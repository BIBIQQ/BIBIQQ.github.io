<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用的Api-01</title>
    <url>/2021/09/20/DAY14_API%E5%92%8C%E6%95%B0%E7%BB%84%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="24-常用的API"><a href="#24-常用的API" class="headerlink" title="24. 常用的API"></a>24. 常用的API</h3><h5 id="24-1-API的基本概念"><a href="#24-1-API的基本概念" class="headerlink" title="24.1 API的基本概念"></a>24.1 API的基本概念</h5><p>​        概念：JAVA对外开放的应用程序接口</p>
<h5 id="24-2-Math"><a href="#24-2-Math" class="headerlink" title="24.2 Math"></a>24.2 Math</h5><p>​    Math：执行基本数学运算的方法；    不能被实例化 </p>
<p>​    基本常用方法：</p>
<table>
<thead>
<tr>
<th>方法名    方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static int   abs(int a)</td>
<td>返回参数的绝对值</td>
</tr>
<tr>
<td>public static double ceil(double a)</td>
<td>返回大于或等于参数的最小double值，等于一个整数</td>
</tr>
<tr>
<td>public static double floor(double a)</td>
<td>返回小于或等于参数的最大double值，等于一个整数</td>
</tr>
<tr>
<td>public  static int round(float a)</td>
<td>按照四舍五入返回最接近参数的int</td>
</tr>
<tr>
<td>public static int   max(int a,int b)</td>
<td>返回两个int值中的较大值</td>
</tr>
<tr>
<td>public  static int min(int a,int b)</td>
<td>返回两个int值中的较小值</td>
</tr>
<tr>
<td>public  static double pow (double a,double b)</td>
<td>返回a的b次幂的值</td>
</tr>
<tr>
<td>public  static double random()</td>
<td>返回值为double的正值，[0.0,1.0)</td>
</tr>
</tbody></table>
<h5 id="24-3-System"><a href="#24-3-System" class="headerlink" title="24.3 System"></a>24.3 System</h5><p>​    不能被实例化</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   static void exit(int status)</td>
<td>终止当前运行的   Java   虚拟机，非零表示异常终止</td>
</tr>
<tr>
<td>public   static long currentTimeMillis()</td>
<td>获取当前时间距离计算机时间元年的差值毫秒值<br>GMT时间(格林威治时间):<code>1970-01-01 00:00:00 000</code><br/>注意时区  中国// 东8区  +8小时</td>
</tr>
<tr>
<td>static arraycopy(数据源数组, 起始索引, <br>目的地数组, 起始索引, 拷贝元素个数)</td>
<td>数组复制</td>
</tr>
</tbody></table>
<h5 id="24-4-Object"><a href="#24-4-Object" class="headerlink" title="24.4 Object"></a>24.4 Object</h5><ul>
<li>是所有类的直接或者间接父类</li>
<li>直接打印一个对象就是答应这个对象的toString方法的返回值</li>
<li>Object类的toString方法得到的是对象的地址值</li>
<li>对toString方法进行重写</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object_01 s &#x3D; new Object_01(&quot;假面骑士&quot;,&quot;999&quot;);</span><br><span class="line">      Object_01 s1 &#x3D; new Object_01(&quot;假面骑士&quot;,&quot;999&quot;);</span><br><span class="line">      &#x2F;&#x2F; 直接使用打印的地址值</span><br><span class="line">      System.out.println(s);</span><br><span class="line">      &#x2F;&#x2F; 比较地址值</span><br><span class="line">      System.out.println(s &#x3D;&#x3D; s1);</span><br><span class="line">      &#x2F;&#x2F; 调用toString，需要在对象内重写方法</span><br><span class="line">      System.out.println(s.toString());</span><br><span class="line">      &#x2F;&#x2F; equals比较的是地址值，需要重写equals方法</span><br><span class="line">      System.out.println(s.equals(s));</span><br></pre></td></tr></table></figure>



<h5 id="24-5-Objects"><a href="#24-5-Objects" class="headerlink" title="24.5 Objects"></a>24.5 Objects</h5><p>常用方法：</p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">public static String toString(对象)</td>
<td>返回参数中对象的字符串表示形式</td>
</tr>
<tr>
<td align="left">public static String toString(对象, 默认字符串)</td>
<td>返回对象的字符串表示形式，对象为null返回默认串</td>
</tr>
<tr>
<td align="left">public static Boolean isNull(对象)</td>
<td>判断对象是否为空</td>
</tr>
<tr>
<td align="left">public static Boolean nonNull(对象)</td>
<td>判断对象是否不为空</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="24-5-BigDecimal类"><a href="#24-5-BigDecimal类" class="headerlink" title="24.5 BigDecimal类"></a>24.5 BigDecimal类</h5><ul>
<li><p>输出可以数字或者字符串</p>
<ul>
<li><pre><code>BigDecimal s1 = new BigDecimal(&quot;10.0&quot;);
BigDecimal s2 = new BigDecimal(0.3);
System.out.println(s1);
System.out.println(s2);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure>
// 加法
BigDecimal sum = a1.add(a2);
System.out.println(sum);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure>
//减法
BigDecimal subtract = a1.subtract(a2);
System.out.println(subtract);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure>
// 乘法
BigDecimal multiply = a1.multiply(a2);
System.out.println(multiply);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure>
// 除法
BigDecimal divide = a1.divide(a2);
System.out.println(divide);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用字符串 除不尽的带取舍模式</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;java</span><br><span class="line">    BigDecimal i1 &#x3D; new BigDecimal(&quot;0.5&quot;);</span><br><span class="line">            BigDecimal i2 &#x3D; new BigDecimal(&quot;0.3&quot;);</span><br><span class="line">            &#x2F;&#x2F; 参数一：参与运算的另一个对象</span><br><span class="line">            &#x2F;&#x2F; 参数二：精确到小数点后多少位</span><br><span class="line">            &#x2F;&#x2F; 参数三：舍入模式</span><br><span class="line">    &#x2F;&#x2F;                    进一法 BigDecimal.ROUND_UP</span><br><span class="line">    &#x2F;&#x2F;                        去尾法 BigDecimal.ROUND_FLOOR</span><br><span class="line">    &#x2F;&#x2F;                            四舍五入  BigDecimal.ROUND_HALF_UP</span><br><span class="line">            BigDecimal divide1 &#x3D; i1.divide(i2, 2, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">            BigDecimal divide2 &#x3D; i1.divide(i2, 2, BigDecimal.ROUND_UP);</span><br><span class="line">            BigDecimal divide3 &#x3D; i1.divide(i2, 2, BigDecimal.ROUND_FLOOR);</span><br><span class="line">            System.out.println(divide1);</span><br><span class="line">            System.out.println(divide2);</span><br><span class="line">            System.out.println(divide3);</span><br></pre></td></tr></table></figure>


</code></pre></li>
</ul>
</li>
</ul>
<h5 id="24-6-Integer"><a href="#24-6-Integer" class="headerlink" title="24.6 Integer"></a>24.6 Integer</h5><p>​    基本类型包装类概述：将基本数据类型封装成对象的好处在于可以在对象中定义更多的更多功能方法</p>
<p>​    常用的操作之一：用于基本数据类型与字符串之间的转换，范围区间的判断</p>
<ul>
<li>基本数据类型包装类</li>
</ul>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<p><strong>Integer概述</strong></p>
<p>​    概述：包装一个对象中的基本类型int的值</p>
<p>​    基本类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;返回表示保存指定值的Integer对象String</span><br><span class="line">Integer i1 &#x3D; Integer.valueOf(&quot;200&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;返回表示指定int值的Integer实例</span><br><span class="line">Integer i &#x3D; Integer.valueOf(200);</span><br></pre></td></tr></table></figure>



<p>自动装箱—jdk1.5特性</p>
<p>​    装箱：把一个基本数据类变量，变量对应的包装类</p>
<p>​    自动：java底层会帮我们自动调用valueof方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        Integer i2= <span class="number">100</span>;</span><br><span class="line"><span class="comment">//       对象 = 默认是一个基本数据类型</span></span><br><span class="line">        System.out.println(i2);</span><br></pre></td></tr></table></figure>

<p>自动拆箱—jdk1.5特性    </p>
<p>​    拆箱：把一个包装类型，变成对应的基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i3 = i2;</span><br></pre></td></tr></table></figure>

<p>注意：在使用包装类类型的时候，如果做操作，最好先判断是否为null</p>
<p>​        只要是对象，在使用前就必须进行不为Null 的判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer i4 &#x3D; null;</span><br><span class="line">if (i4 !&#x3D; null) &#123;</span><br><span class="line">    i4 +&#x3D; 200;</span><br><span class="line">    System.out.println(i4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>24.6.1 int 和String的数据转换</p>
<ul>
<li>方法一：直接加“ ”相加</li>
<li>方法二：通过String的静态方法vauleOf();</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"100"</span>;</span><br><span class="line"><span class="keyword">int</span> i1 =<span class="number">200</span>;</span><br><span class="line">System.out.println(s1+i1);<span class="comment">//字符串+任意数都是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = Integer.parseInt(s1);  <span class="comment">// 字符串变成int整数</span></span><br><span class="line">System.out.println(i2+i1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//int -.&gt; String</span></span><br><span class="line">String s2 = i1 +<span class="string">" "</span>;</span><br><span class="line">System.out.println(s2+<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用String的静态方法valueOf()</span></span><br><span class="line">String s3 = String.valueOf(i1);</span><br><span class="line">System.out.println(s3+<span class="number">100</span>);</span><br></pre></td></tr></table></figure>



<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">\\将字符串：“<span class="number">92</span> <span class="number">91</span> <span class="number">34</span> <span class="number">52</span> <span class="number">45</span> <span class="number">11</span> <span class="number">23</span>”存于<span class="keyword">int</span>数组内</span><br><span class="line"><span class="function">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"92 91 34 52 45 11 23"</span>;</span><br><span class="line">        <span class="comment">//获取字符串的每一个数字</span></span><br><span class="line">        String[] strings =str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">//创建int数组</span></span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[strings.length];</span><br><span class="line">        <span class="comment">//把String数组转换存于int数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> number = Integer.parseInt(strings[i]);</span><br><span class="line">            num[i]= number;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">            System.out.print(num[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h5 id="24-7-数组的高级操作"><a href="#24-7-数组的高级操作" class="headerlink" title="24.7 数组的高级操作"></a>24.7 数组的高级操作</h5><h6 id="24-7-1-二分查找"><a href="#24-7-1-二分查找" class="headerlink" title="24.7.1 二分查找"></a>24.7.1 二分查找</h6><pre><code>==前提：数组中的元素必须按大小排序==</code></pre><p>​        查找步骤：</p>
<ol>
<li>定义两个变量，表示要查找的范围，默认min= 0，max = 最大索引</li>
<li>循环查找，但是min &lt;= max</li>
<li>计算出mid的值</li>
<li>判断mid位置的元素，如果是直接返回对应索引</li>
<li>如果要查找的值在mid的左半边，那么min值不变，max= mid -1,继续下次循环查找</li>
<li>如果要查找的值在mid的右半边，那么max值不变，min= mid +1,继续下次循环查找</li>
<li>当min &gt; max 时，表示要查找的元素在数组中不存在，返回-1</li>
</ol>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = binarySerchForIndex(arr, num);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySerchForIndex</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.定义查找的范围</span></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//2.循环查找min &lt; =max</span></span><br><span class="line">        <span class="keyword">while</span> (min &lt;= max) &#123;</span><br><span class="line">            <span class="comment">// 计算出中间的位置 mid</span></span><br><span class="line">            <span class="keyword">int</span> mid = (min + max) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">// mid指向的元素 &gt; number</span></span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; num) &#123;</span><br><span class="line">                <span class="comment">// 表示要查找的元素在左边</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; num) &#123;</span><br><span class="line">                <span class="comment">// 表示要查找的元素在右边</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果大于了max，表示元素不存在。返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h6 id="24-7-2-冒泡排序"><a href="#24-7-2-冒泡排序" class="headerlink" title="24.7.2 冒泡排序"></a>24.7.2 冒泡排序</h6><pre><code>1. 相邻元素两两比较，打的放右边，小的放左边，找到最大值。
   2. 第一次循环结束，最大值已经找到，在数组的最右边
   3. 下一次只要在剩余的元素找到最大值就可以了
   4. 因为已经确认了5是最大值，所以4和5无需再进行比较
   5. 因为已经确认了5是最大值，4是次UI大致，所以3无须跟4和5比较了
   6. 同理3、4、5的位置已经确认了，2也无须这三个值进行比较了
   7. 最后只剩下一个最小值，放在最后的一个格子中</code></pre><p>代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//一.找到最大值</span></span><br><span class="line">    <span class="comment">// 外层循环控制次数，比数组少一次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//内层循环，控制大小标胶，-1控制不超过最大索引</span></span><br><span class="line">        <span class="comment">// -i 每轮结束，少比较一个数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printArr(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="24-7-3-递归"><a href="#24-7-3-递归" class="headerlink" title="24.7.3 递归"></a>24.7.3 递归</h6><p>​    概述：以编程的角度，递归指的是方法定义中调用方法本身的现象</p>
<p>​    思路：把一个复杂的问题层层转化为一个与<font color = "red">原问题相似的规模较小</font>的问题来求解，递归策略只需<font color = "red">少量的程序</font>就可以描述出解题过程所需要的多次重复计算</p>
<p>​    核心：</p>
<ul>
<li>一定要有出口，否则无限调用自己，会造成内存溢出</li>
<li>注意递归规则（每次递归调用方法本身，都比上一次调用更加接近出口）</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = getSum(<span class="number">100</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1-100之间的和</span></span><br><span class="line">        <span class="comment">// 100 + （1 - 99之间的和）</span></span><br><span class="line">            <span class="comment">//99 + （1 - 98之间的和）</span></span><br><span class="line">                <span class="comment">//。。。</span></span><br><span class="line">                    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 作用：求 1 - i 之间的和</span></span><br><span class="line">    <span class="comment">//如果没有设置出口，会造成栈溢出错误</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + getSum(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h6 id="24-7-4-快排"><a href="#24-7-4-快排" class="headerlink" title="24.7.4 快排"></a>24.7.4 快排</h6><p>​    快速排序中，每一次递归时已找到第一个数为基准数，找到数组中所有比基数准数小的，再找到所有比基数准数打的，小的全部放左边，大的全部放右边，确定基准输的正确位置</p>
<ul>
<li>从右开始找比基准数小的</li>
<li>从左开始找比基准数大的</li>
<li>交换两个值的位置</li>
<li>右边的继续往左找，左边的继续往右找，知道两个箭头指向到同一个索引的为止</li>
<li>基准数归位</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        getQuitSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getQuitSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left0 = left;</span><br><span class="line">        <span class="keyword">int</span> right0 = right;</span><br><span class="line">        <span class="comment">//计算出基准数</span></span><br><span class="line">        <span class="keyword">int</span> baseNumber = arr[left0];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left != right) &#123;</span><br><span class="line">            <span class="comment">//从右开始找</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt;= baseNumber &amp;&amp; right &gt; left) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从左开始找</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &lt;= baseNumber &amp;&amp; right &gt; left) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换位置</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">            arr[left] = arr[right];</span><br><span class="line">            arr[right] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 基准数归位</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">        arr[left] = arr[left0];</span><br><span class="line">        arr[left0] = temp;</span><br><span class="line"></span><br><span class="line">    getQuitSort(arr,left0,left-<span class="number">1</span>);</span><br><span class="line">    getQuitSort(arr,left+<span class="number">1</span>,right0);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="24-8-Arrays"><a href="#24-8-Arrays" class="headerlink" title="24.8 Arrays"></a>24.8 Arrays</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用二分查找返回指定元素的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binarySearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = Arrays.binarySearch(arr,<span class="number">4</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照数字的顺序排序指定数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        Arrays.sort(arr1);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回指定数组的内容的字符串表示形式</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ArrtoString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="24-9-工具类设计思路"><a href="#24-9-工具类设计思路" class="headerlink" title="24.9 工具类设计思路"></a>24.9 工具类设计思路</h5><ol>
<li>构造方法私有化</li>
<li>所有的方法都被<code>public static</code> 修饰</li>
</ol>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Api-02</title>
    <url>/2021/09/22/DAY15_JDK8%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="25-常见的API-02"><a href="#25-常见的API-02" class="headerlink" title="25. 常见的API-02"></a>25. 常见的API-02</h3><h4 id="25-1-日期类"><a href="#25-1-日期类" class="headerlink" title="25.1 日期类"></a>25.1 日期类</h4><p>​            计算机的时间原点：1970年1月1日  00：00：00</p>
<h5 id="25-1-1-Date类概述和构造方法"><a href="#25-1-1-Date类概述和构造方法" class="headerlink" title="25.1.1 Date类概述和构造方法"></a>25.1.1 Date类概述和构造方法</h5><p>​        <strong>1. JDK8之前用于表示日期时间的类</strong></p>
<p>​        其对象可以表示特定的时刻，精确到毫秒（yyyy-MM-dd HH:mm:ss 000）</p>
<p>​        <strong>2. 构造方法</strong>    </p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Date()</td>
<td>创建一个Date对象，表示默认时间</td>
</tr>
<tr>
<td>public Date(long date)</td>
<td>创建一个Date对象，表示指定时间</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出默认时间</span></span><br><span class="line">      Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">      System.out.println(date1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//输出指定时间 </span></span><br><span class="line">      Date date2 = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">      System.out.println(date2);</span><br></pre></td></tr></table></figure>

<p>​        <strong>3.常用方法</strong></p>
<p>​            setTime–设置从远点时间过了多少毫秒值</p>
<p>​            getTime–获取时间的毫秒值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取date对象的毫秒值--当前时间的毫秒值</span><br><span class="line">long time &#x3D; date1.getTime();</span><br><span class="line">      System.out.println(time);</span><br><span class="line">&#x2F;&#x2F; 设置date对象从原点时间过了多少毫秒值</span><br><span class="line">     date1.setTime(2000000000000L);</span><br><span class="line">      System.out.println(date1);</span><br></pre></td></tr></table></figure>

<h5 id="25-1-2-SimpleDateFormat-类概述"><a href="#25-1-2-SimpleDateFormat-类概述" class="headerlink" title="25.1.2 SimpleDateFormat 类概述"></a>25.1.2 SimpleDateFormat 类概述</h5><p>​         SimpleDateFormat可以对Date对象，进行<font color = "red">格式化解析</font></p>
<p>字符串和Date对象转化过程的中相关概念</p>
<ul>
<li><p>String -&gt; Date 解析 parse</p>
</li>
<li><pre><code class="java"> <span class="comment">// String -&gt; Date  解析</span>
 String str = <span class="string">"2021-9-22"</span>;
 SimpleDateFormat sdf02 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);
 Date result2 = sdf02.parse(str);
 System.out.println(result2);
&lt;!--￼<span class="number">2</span>--&gt;
</code></pre>
</li>
</ul>
<p>​        <strong>2. 构造方法</strong>    </p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public SimpleDateFormat()</td>
<td>创建一个SimpleDateFormat，使用默认格式</td>
</tr>
<tr>
<td>public SimpleDateFormat(String pattern)</td>
<td>创建一个SimpleDateFormat，表示指定格式</td>
</tr>
</tbody></table>
<p>​    <strong>3.小结</strong></p>
<table>
<thead>
<tr>
<th>转向流向</th>
<th>设计方法</th>
<th>方法所属类</th>
</tr>
</thead>
<tbody><tr>
<td>long ==&gt; Date</td>
<td>new Date(long ms)/setTime(long ms)创建Date对象/为Date对象设置时间</td>
<td>Date</td>
</tr>
<tr>
<td>Date ==&gt; long</td>
<td>getTime()获取指定时间对象的毫秒值</td>
<td>Date</td>
</tr>
<tr>
<td>String ==&gt; Date</td>
<td>解析，sdfObj.parse(dateStr)</td>
<td>SimpleDateFormat</td>
</tr>
<tr>
<td>Date ==&gt; String</td>
<td>格式化，sdfObj.format(dateObj)</td>
<td>SimpleDateFormat</td>
</tr>
</tbody></table>
<h5 id="25-1-3-JDK8新增日期类-LocaDateTime"><a href="#25-1-3-JDK8新增日期类-LocaDateTime" class="headerlink" title="25.1.3 JDK8新增日期类-LocaDateTime"></a>25.1.3 JDK8新增日期类-LocaDateTime</h5><ul>
<li>LocaDateTime</li>
</ul>
<table>
<thead>
<tr>
<th>fa方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static LocalDateTime now()</td>
<td>获取当前系统时间</td>
</tr>
<tr>
<td>public static LocalDateTime of(年，月，日，时，分，秒)</td>
<td>使用指定年月日和时分秒初始化一个LocalDateTime对象</td>
</tr>
</tbody></table>
<h6 id="25-1-3-1-localDateTime的常用方法"><a href="#25-1-3-1-localDateTime的常用方法" class="headerlink" title="25.1.3.1 localDateTime的常用方法"></a>25.1.3.1 localDateTime的常用方法</h6><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2020</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//获得年</span></span><br><span class="line"><span class="keyword">int</span> year = localDateTime.getYear();</span><br><span class="line">System.out.println(year);</span><br><span class="line"><span class="comment">//获取月份</span></span><br><span class="line"><span class="keyword">int</span> monthValue = localDateTime.getMonthValue();</span><br><span class="line">System.out.println(monthValue);</span><br><span class="line"><span class="comment">//获取月份中的第几天</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth = localDateTime.getDayOfMonth();</span><br><span class="line">System.out.println(dayOfMonth);</span><br><span class="line"><span class="comment">//获取一年中的第几天</span></span><br><span class="line"><span class="keyword">int</span> dayOfYear = localDateTime.getDayOfYear();</span><br><span class="line">System.out.println(dayOfYear);</span><br><span class="line"><span class="comment">//获取星期</span></span><br><span class="line">DayOfWeek dayOfWeek =localDateTime.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);</span><br><span class="line"><span class="comment">//获取分钟</span></span><br><span class="line"><span class="keyword">int</span> minute = localDateTime.getMinute();</span><br><span class="line">System.out.println(minute);</span><br><span class="line"><span class="comment">//获取小时</span></span><br><span class="line"><span class="keyword">int</span> hour = localDateTime.getHour();</span><br><span class="line">System.out.println(hour);</span><br></pre></td></tr></table></figure>



<h6 id="25-1-3-2-LocalDateTime转换方法"><a href="#25-1-3-2-LocalDateTime转换方法" class="headerlink" title="25.1.3.2 LocalDateTime转换方法"></a>25.1.3.2 LocalDateTime转换方法</h6><p>方法说明：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public LocalDate  toLocalDate ()</td>
<td>转换成为一个LocalDate对象</td>
</tr>
<tr>
<td>public LocalTime toLocalTime ()</td>
<td>转换成为一个LocalTime对象</td>
</tr>
</tbody></table>
<p>​    示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDK8DateDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//public LocalDate toLocalDate ()    转换成为一个LocalDate对象</span></span><br><span class="line">        LocalDate localDate = localDateTime.toLocalDate();</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public LocalTime toLocalTime ()    转换成为一个LocalTime对象</span></span><br><span class="line">        LocalTime localTime = localDateTime.toLocalTime();</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="25-1-3-3-LocalDatTime的解析和格式化"><a href="#25-1-3-3-LocalDatTime的解析和格式化" class="headerlink" title="25.1.3.3 LocalDatTime的解析和格式化"></a>25.1.3.3 LocalDatTime的解析和格式化</h6><p>方法说明：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public String format (指定格式)</td>
<td>把一个LocalDateTime格式化成为一个字符串</td>
</tr>
<tr>
<td>public LocalDateTime parse (准备解析的字符串, 解析格式)</td>
<td>把一个日期字符串解析成为一个LocalDateTime对象</td>
</tr>
<tr>
<td>public static DateTimeFormatter ofPattern(String pattern)</td>
<td>使用指定的日期模板获取一个日期格式化器DateTimeFormatter对象</td>
</tr>
</tbody></table>
<p>解析示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s = <span class="string">"2020年11月12日 11:01:10"</span>;</span><br><span class="line">    DateTimeFormatter patten = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">    LocalDateTime parse = LocalDateTime.parse(s,patten);</span><br><span class="line">    System.out.println(parse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    格式化示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">    System.out.println(localDateTime);</span><br><span class="line">    DateTimeFormatter patten = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">    String s = localDateTime.format(patten);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="25-1-3-4-LocaDateTime增加或者减少时间方法"><a href="#25-1-3-4-LocaDateTime增加或者减少时间方法" class="headerlink" title="25.1.3.4 LocaDateTime增加或者减少时间方法"></a>25.1.3.4 <strong>LocaDateTime增加或者减少时间方法</strong></h6><ol>
<li>方法返回一个新的ocalDateTime对象，返回值就是修改之后的结果</li>
<li>参数为正，就是往后加</li>
<li>参数为负，就是往后减</li>
</ol>
<p><strong>plus基本方法说明：</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public LocalDateTime plusYears (long years)</td>
<td>添加或者减去年</td>
</tr>
<tr>
<td>public LocalDateTime plusMonths(long months)</td>
<td>添加或者减去月</td>
</tr>
<tr>
<td>public LocalDateTime plusDays(long days)</td>
<td>添加或者减去日</td>
</tr>
<tr>
<td>public LocalDateTime plusHours(long hours)</td>
<td>添加或者减去时</td>
</tr>
<tr>
<td>public LocalDateTime plusMinutes(long minutes)</td>
<td>添加或者减去分</td>
</tr>
<tr>
<td>public LocalDateTime plusSeconds(long seconds)</td>
<td>添加或者减去秒</td>
</tr>
<tr>
<td>public LocalDateTime plusWeeks(long weeks)</td>
<td>添加或者减去周</td>
</tr>
</tbody></table>
<p><strong>minus基本方法说明：</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public LocalDateTime  minusYears (long years)</td>
<td>减去或者添加年</td>
</tr>
<tr>
<td>public LocalDateTime  minusMonths(long months)</td>
<td>减去或者添加月</td>
</tr>
<tr>
<td>public LocalDateTime minusDays(long days)</td>
<td>减去或者添加日</td>
</tr>
<tr>
<td>public LocalDateTime minusHours(long hours)</td>
<td>减去或者添加时</td>
</tr>
<tr>
<td>public LocalDateTime minusMinutes(long minutes)</td>
<td>减去或者添加分</td>
</tr>
<tr>
<td>public LocalDateTime minusSeconds(long seconds)</td>
<td>减去或者添加秒</td>
</tr>
<tr>
<td>public LocalDateTime minusWeeks(long weeks)</td>
<td>减去或者添加周</td>
</tr>
</tbody></table>
<h6 id="25-1-3-5-LocalDateTime修改方法"><a href="#25-1-3-5-LocalDateTime修改方法" class="headerlink" title="25.1.3.5 LocalDateTime修改方法"></a>25.1.3.5 <strong>LocalDateTime修改方法</strong></h6><p>方法说明</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public LocalDateTime withYear(int year)</td>
<td>直接修改年</td>
</tr>
<tr>
<td>public LocalDateTime withMonth(int month)</td>
<td>直接修改月</td>
</tr>
<tr>
<td>public LocalDateTime withDayOfMonth(int dayofmonth)</td>
<td>直接修改日期(一个月中的第几天)</td>
</tr>
<tr>
<td>public LocalDateTime withDayOfYear(int dayOfYear)</td>
<td>直接修改日期(一年中的第几天)</td>
</tr>
<tr>
<td>public LocalDateTime withHour(int hour)</td>
<td>直接修改小时</td>
</tr>
<tr>
<td>public LocalDateTime withMinute(int minute)</td>
<td>直接修改分钟</td>
</tr>
<tr>
<td>public LocalDateTime withSecond(int second)</td>
<td>直接修改秒</td>
</tr>
</tbody></table>
<p>注意：直接修改，不会和of一样会会根据情况报错</p>
<h5 id="23-1-4-时间间隔的计算"><a href="#23-1-4-时间间隔的计算" class="headerlink" title="23.1.4 时间间隔的计算"></a>23.1.4 时间间隔的计算</h5><ul>
<li>Period方法说明：</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static Period between(开始时间,结束时间)</td>
<td>计算两个“时间”的间隔</td>
</tr>
<tr>
<td>public int getYears()</td>
<td>获得这段时间的年数</td>
</tr>
<tr>
<td>public int getMonths()</td>
<td>获得此期间的月数</td>
</tr>
<tr>
<td>public int getDays()</td>
<td>获得此期间的天数</td>
</tr>
<tr>
<td>public long toTotalMonths()</td>
<td>获取此期间的总月数</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LocalDate localDate1 &#x3D; LocalDate.of(2020, 1, 1);</span><br><span class="line">       LocalDate localDate2 &#x3D; LocalDate.of(2048, 12, 12);</span><br><span class="line">       Period period &#x3D; Period.between(localDate1, localDate2);</span><br><span class="line">       System.out.println(period);&#x2F;&#x2F;P28Y11M11D</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;public int getYears()         获得这段时间的年数</span><br><span class="line">       System.out.println(period.getYears());&#x2F;&#x2F;28</span><br><span class="line">       &#x2F;&#x2F;public int getMonths()        获得此期间的月数</span><br><span class="line">       System.out.println(period.getMonths());&#x2F;&#x2F;11</span><br><span class="line">       &#x2F;&#x2F;public int getDays()          获得此期间的天数</span><br><span class="line">       System.out.println(period.getDays());&#x2F;&#x2F;11</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;public long toTotalMonths()   获取此期间的总月数</span><br><span class="line">       System.out.println(period.toTotalMonths());&#x2F;&#x2F;347</span><br></pre></td></tr></table></figure>



<ul>
<li>Duration方法说明</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static Durationbetween(开始时间,结束时间)</td>
<td>计算两个“时间”的间隔</td>
</tr>
<tr>
<td>public long toSeconds()</td>
<td>获得此时间间隔的秒</td>
</tr>
<tr>
<td>public int toMillis()</td>
<td>获得此时间间隔的毫秒</td>
</tr>
<tr>
<td>public int toNanos()</td>
<td>获得此时间间隔的纳秒</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">        LocalDateTime localDateTime2 = LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">        Duration duration = Duration.between(localDateTime1, localDateTime2);</span><br><span class="line">        System.out.println(duration);<span class="comment">//PT21H57M58S</span></span><br><span class="line">        <span class="comment">//public long toSeconds()	       获得此时间间隔的秒</span></span><br><span class="line">        System.out.println(duration.toSeconds());<span class="comment">//79078</span></span><br><span class="line">        <span class="comment">//public int toMillis()	           获得此时间间隔的毫秒</span></span><br><span class="line">        System.out.println(duration.toMillis());<span class="comment">//79078000</span></span><br><span class="line">        <span class="comment">//public int toNanos()             获得此时间间隔的纳秒</span></span><br><span class="line">        System.out.println(duration.toNanos());<span class="comment">//79078000000000</span></span><br></pre></td></tr></table></figure>



<p>注意：<font color= "red">Period方法只能精确到年月日，Duration方法可以精确到纳秒位</font></p>
<h5 id="25-1-5-小结"><a href="#25-1-5-小结" class="headerlink" title="25.1.5 小结"></a>25.1.5 小结</h5><ul>
<li>创建时间对象（now、of）</li>
<li>获取时间对象中的年，月，日，时，分，秒</li>
<li>格式化（format）</li>
<li>解析（parse）</li>
<li>增加或减少时间的方法（plus开头，minus开头）</li>
<li>修改时间（with开头+对象）</li>
<li>计算时间间隔的两个类：<ul>
<li>Period</li>
<li>Duration</li>
</ul>
</li>
</ul>
<h4 id="25-2-异常概述"><a href="#25-2-异常概述" class="headerlink" title="25.2 异常概述"></a>25.2 异常概述</h4><h5 id="25-2-1-基本概述"><a href="#25-2-1-基本概述" class="headerlink" title="25.2.1 基本概述"></a>25.2.1 基本概述</h5><p>​        概述：就是程序中出现了不正常的情况。程序在执行过程中，出现的非正常的情况，就会导致JVM的非正常停止</p>
<p>​        <font color= "red">注意：</font>语法错误不算在异常体系中</p>
<p>异常体系：</p>
<p>Thorwable：</p>
<ul>
<li><p>Error：严重错误，通过代码无法处理  — 内存溢出</p>
</li>
<li><p>Exception：称为异常类，表示程序本身可以处理的问题    </p>
<ul>
<li>RuntimeExcetion及其子类：运行时异常。（空指针异常、数组索引越界异常）</li>
<li>除RuntimeExcetion之外所有的异常：编译时异常。在编译期必须处理，否则不能通过编译</li>
</ul>
</li>
</ul>
<h5 id="25-2-2-JVM默认处理异常的方式"><a href="#25-2-2-JVM默认处理异常的方式" class="headerlink" title="25.2.2 JVM默认处理异常的方式"></a>25.2.2 JVM默认处理异常的方式</h5><ul>
<li>如果程序出现了问题，我们没有做任何处理时，最终JVM会做默认的处理：<ul>
<li>把异常的名称，错误原因及异常出现的位置等信息输出在控制台</li>
<li>程序停止执行，出现异常之后的所有代码不会执行</li>
</ul>
</li>
</ul>
<h5 id="25-2-3-异常处理方式"><a href="#25-2-3-异常处理方式" class="headerlink" title="25.2.3 异常处理方式"></a>25.2.3 异常处理方式</h5><h6 id="25-2-3-1-Thorws处理方式"><a href="#25-2-3-1-Thorws处理方式" class="headerlink" title="25.2.3.1.  Thorws处理方式"></a>25.2.3.1.  <strong>Thorws处理方式</strong></h6><p>​        格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法名()  thorws 异常类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用在方法声明后面，跟的是异常类名</span></span><br><span class="line"><span class="comment">// 表示什么异常，调用该方法有可能会出现这样的异常</span></span><br></pre></td></tr></table></figure>



<p>​        注意事项：表示声明一个异常</p>
<ul>
<li>编译异常因为在编译时就会检查，所以必须要写在方法后面进行显示声明</li>
<li>运行时异常因为在运行时才会发生，所以方法后面可以不写</li>
</ul>
<h6 id="25-2-3-2-Thorw处理方式"><a href="#25-2-3-2-Thorw处理方式" class="headerlink" title="25.2.3.2. Thorw处理方式"></a>25.2.3.2. <strong>Thorw处理方式</strong></h6><p>​            格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thorw new 异常对象;</span><br><span class="line">&#x2F;&#x2F;用在方法体内，跟的是异常对象名</span><br><span class="line">&#x2F;&#x2F;表示手动抛出异常对象，由方法体内的语句处理</span><br></pre></td></tr></table></figure>



<p>​        意义：</p>
<pre><code>1. 在方法中，参数传递有误，没有继续执行的意义了
 2. 我们根据业务需要，定义一些业务相关的一类，可以在核实的时机手动创建这些类的对象并抛出</code></pre><h6 id="25-2-3-3-try…-catch…处理方式"><a href="#25-2-3-3-try…-catch…处理方式" class="headerlink" title="25.2.3.3 try… catch…处理方式"></a>25.2.3.3 try… catch…处理方式</h6><p>​            格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">可能出现的异常的代码；</span><br><span class="line"><span class="comment">//异常</span></span><br><span class="line"><span class="comment">//try中异常之后的代码不会执行了</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名  变量名 )&#123;</span><br><span class="line"><span class="comment">//使用变量名，获得本次异常的各种信息</span></span><br><span class="line">异常的处理代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面的代码会继续执行</span></span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>​            示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            printArr(arr);<span class="comment">// 可能会尝试异常的代码</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"不能为Null"</span>);<span class="comment">// 处理异常的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"大牛皮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();<span class="comment">//当参数为null的时候，手动创建一个异常对象，抛给调用者，产生了一个异常</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h6 id="25-2-3-4-try…cath…常见问题"><a href="#25-2-3-4-try…cath…常见问题" class="headerlink" title="25.2.3.4 try…cath…常见问题"></a>25.2.3.4 try…cath…常见问题</h6><ul>
<li><p>如果try中没有遇到问题，怎么执行</p>
<ul>
<li>会把try中的所有代码全部执行完毕，catch中的不执行</li>
</ul>
</li>
<li><p>如果try中遇到问题，try下面的代码还会执行么</p>
<ul>
<li>直接跳转到catch语句中，try中的下面的代码就不会再执行了</li>
<li>catch执行完毕，表示try…catch体系全部执行完毕，继续执行下面的代码</li>
</ul>
</li>
<li><p>如果出现的问题没有被捕获，那么程序如何运行</p>
<ul>
<li>那么相当于异常没有处理到，try…catch就没有处理到异常</li>
<li>默认交给JVM处理</li>
</ul>
</li>
<li><p>同时出现多个异常怎么处理</p>
<ul>
<li><p>添加多个catch语句</p>
</li>
<li><pre><code class="java"><span class="keyword">try</span>{
可能出现的异常的代码；
}<span class="keyword">catch</span>(异常类名<span class="number">1</span>  变量名){
该异常的处理代码；
}<span class="keyword">catch</span>(异常类名<span class="number">2</span>  变量名){
    <span class="comment">//针对不同的异常，有不同的处理方法</span>
该异常的处理代码；
}……
&lt;!--￼<span class="number">13</span>--&gt;
<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
<span class="keyword">try</span> {
    <span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};
    System.out.println(arr[<span class="number">10</span>]);
} <span class="keyword">catch</span> (Exception e) {
    <span class="comment">//返回此throwable的详细信息字符串</span>
    e.getMessage();
    <span class="comment">//返回此可抛出的简短描述</span>
    e.toString();
    <span class="comment">// 把异常的信息输出到控制台（字体为红色）</span>
    e.printStackTrace();
}
&lt;!--￼<span class="number">14</span>--&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<p>对象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryStudent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TryStudent</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TryStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age &gt;=<span class="number">18</span> &amp;&amp; age&lt;=<span class="number">25</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> AgeOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TryStudent&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeOutOfBoundsException</span> <span class="keyword">extends</span>  <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeOutOfBoundsException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeOutOfBoundsException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>高级集合-Set和泛型</title>
    <url>/2021/09/23/DAY17_%E6%B3%9B%E5%9E%8B%E5%92%8C%E9%AB%98%E7%BA%A7%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h3 id="28-泛型"><a href="#28-泛型" class="headerlink" title="28. 泛型"></a>28. 泛型</h3><h4 id="28-1-泛型的概念"><a href="#28-1-泛型的概念" class="headerlink" title="28.1 泛型的概念"></a>28.1 泛型的概念</h4><blockquote>
<p>泛型：是JDK5中引入的特性，它提供了编译时类型安全检测机制</p>
<p>泛型的好处：</p>
<ul>
<li>把运行使其的问题提前到了编译期间</li>
<li>避免了强制类型转换</li>
</ul>
</blockquote>
<h4 id="28-2-泛型的使用"><a href="#28-2-泛型的使用" class="headerlink" title="28.2 泛型的使用"></a>28.2 泛型的使用</h4><blockquote>
<p>泛型可以使用在：</p>
<ul>
<li><p>类后面 —-&gt; 泛型类</p>
</li>
<li><p>方法声明 —-&gt; 泛型方法</p>
</li>
<li><p>接口后面 —-&gt; 泛型接口</p>
</li>
</ul>
<p>总结：</p>
<p>​    创建泛型类的对象时，必须要给这个泛型确定具体的数据类型</p>
<p>定义格式：</p>
<ul>
<li>修饰符 class 类名 &lt;类型&gt;｛｝</li>
</ul>
<p>示例：</p>
<ul>
<li><p>public class Demo <T>{ }    </p>
<p>//  T的位置可以写任意标识，常见的如T、E、K、V</p>
</li>
</ul>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Box&lt;String&gt; box1 = <span class="keyword">new</span> Box&lt;&gt;();</span><br><span class="line">        box1.setElement(<span class="string">"给小丽的土味情话"</span>);</span><br><span class="line">        String element01 = box1.getElement();</span><br><span class="line">        System.out.println(element01);</span><br><span class="line"></span><br><span class="line">        Box&lt;Integer&gt; box2 = <span class="keyword">new</span> Box&lt;&gt;();</span><br><span class="line">        box2.setElement(<span class="number">19</span>);</span><br><span class="line">        <span class="keyword">int</span> element02 = box2.getElement();</span><br><span class="line">        System.out.println(element02);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E element;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElement</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="28-2-1-泛型方法的使用"><a href="#28-2-1-泛型方法的使用" class="headerlink" title="28.2.1 泛型方法的使用"></a>28.2.1 泛型方法的使用</h5><blockquote>
<p>定义格式：</p>
<ul>
<li>格式：修饰符&lt;类型&gt; 返回值类型 方法名 (类型 变量名) {  }</li>
</ul>
<p>范例：</p>
<ul>
<li>public <T> void show(T t) { }</li>
</ul>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//字符串</span></span><br><span class="line">   ArrayList&lt;String&gt; list1 = addElement(<span class="keyword">new</span> ArrayList&lt;&gt;(), <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"v"</span>, <span class="string">"d"</span>);</span><br><span class="line">   System.out.println(list1);</span><br><span class="line">   <span class="comment">//整数</span></span><br><span class="line">   ArrayList&lt;Integer&gt; list2 = addElement(<span class="keyword">new</span> ArrayList&lt;&gt;(), <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   System.out.println(list2);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 集合批量添加的功能</span></span><br><span class="line">&gt;<span class="comment">//让类，方法，接口更加通用</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ArrayList&lt;T&gt; <span class="title">addElement</span><span class="params">(ArrayList&lt;T&gt; list, T ti1, T ti2, T ti3, T ti4)</span> </span>&#123;</span><br><span class="line">   list.add(ti1);</span><br><span class="line">   list.add(ti2);</span><br><span class="line">   list.add(ti3);</span><br><span class="line">   list.add(ti4);</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="28-2-2-泛型接口的使用"><a href="#28-2-2-泛型接口的使用" class="headerlink" title="28.2.2 泛型接口的使用"></a>28.2.2 泛型接口的使用</h5><blockquote>
<p>使用方式：</p>
<ul>
<li>实现类也不给泛型</li>
<li>实现类确定具体的数据类型</li>
</ul>
<p>定义格式：</p>
<ul>
<li>修饰符  interface 接口类 &lt; 泛型&gt; { }</li>
</ul>
<p>范例：</p>
<ul>
<li>范例：public interface Demo<T> { } </li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//没有定义数据类型的引用</span></span><br><span class="line">       demo04Impl method = <span class="keyword">new</span> demo04Impl();</span><br><span class="line">       method.method(<span class="string">"你说的好"</span>);</span><br><span class="line">       <span class="comment">//定义了数据类型的引用</span></span><br><span class="line">       demo04Impl02 method02 = <span class="keyword">new</span> demo04Impl02();</span><br><span class="line">       method02.method(<span class="number">19</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">interface</span> <span class="title">demo04</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(E e)</span></span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//不定义数据类型</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">demo04Impl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">demo04</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       System.out.println(e);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//定义了数据类型</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">demo04Impl02</span> <span class="keyword">implements</span> <span class="title">demo04</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">       System.out.println(integer);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="28-2-3-泛型的通配符"><a href="#28-2-3-泛型的通配符" class="headerlink" title="28.2.3 泛型的通配符"></a>28.2.3 泛型的通配符</h5><blockquote>
<p>类型通配符：&lt;?&gt;</p>
<ul>
<li>获取出来的是父类类型</li>
</ul>
<p>类型通配符上限：&lt;? extends 类型&gt;</p>
<ul>
<li>获取出来的是其他类型或者其子类型</li>
</ul>
<p>类型通配符下限：&lt;? super 类型&gt;</p>
<ul>
<li>获取出来的是其他类型或者其父类型</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ArrayList&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ArrayList&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       <span class="comment">// 所有父类</span></span><br><span class="line">       printList(list1);</span><br><span class="line">       printList(list2);</span><br><span class="line">       printList(list3);</span><br><span class="line">       printList(list4);</span><br><span class="line">       <span class="comment">// Number及所有子类</span></span><br><span class="line">       method01(list1);</span><br><span class="line">&gt;<span class="comment">//        method01(list2); // 不是Number类型</span></span><br><span class="line">       method01(list3);</span><br><span class="line">&gt;<span class="comment">//        method01(list4);  // 超出Number区域</span></span><br><span class="line">       <span class="comment">// Number及所有父类</span></span><br><span class="line">&gt;<span class="comment">//        method02(list1);    //不是Number的父类</span></span><br><span class="line">&gt;<span class="comment">//        method02(list2);    //不是Number的父类</span></span><br><span class="line">       method02(list3);</span><br><span class="line">       method02(list4);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设定通配符区域</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(ArrayList&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//表示传递进来的集合的类型，可以是Number类型，也可以是Number的所有父类类型</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">(ArrayList&lt;? <span class="keyword">super</span> Number&gt; list)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//表示传递进来的集合的类型，可以是Number类型，也可以是Number的所有子类类型</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">(ArrayList&lt;? extends Number&gt; list)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="29-集合体系结构—Set"><a href="#29-集合体系结构—Set" class="headerlink" title="29.集合体系结构—Set"></a>29.集合体系结构—Set</h3><h5 id="29-1-Set的概念"><a href="#29-1-Set的概念" class="headerlink" title="29.1 Set的概念"></a>29.1 Set的概念</h5><blockquote>
<p>Set的特点</p>
<ul>
<li>可以去除重复</li>
<li>存储顺序不一致</li>
<li>没有带索引的方法，不能使用普通for和通过索引来获取、删除Set集合的元素</li>
</ul>
<p>可以使用迭代器和增强For进行遍历</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">       <span class="comment">//默认自然顺序 排序</span></span><br><span class="line">       set.add(<span class="string">"ddd"</span>);</span><br><span class="line">       set.add(<span class="string">"aaa"</span>);</span><br><span class="line">       set.add(<span class="string">"bbb"</span>);</span><br><span class="line">       set.add(<span class="string">"aaa"</span>);</span><br><span class="line">       set.add(<span class="string">"ccc"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//迭代器遍历</span></span><br><span class="line">       Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">       <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">           System.out.println(it.next());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"----------"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//增强for遍历，没有索引，因此无法使用普通for</span></span><br><span class="line">       <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">           System.out.println(s);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">       <span class="comment">//foreach的遍历---Lambda</span></span><br><span class="line">       set.forEach(c -&gt; System.out.println(c));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="29-1-1-TreeSet集合"><a href="#29-1-1-TreeSet集合" class="headerlink" title="29.1.1 TreeSet集合"></a>29.1.1 TreeSet集合</h5><blockquote>
<p>特点：</p>
<ul>
<li>不包含重复元素</li>
<li>没有索引</li>
<li>可以将元素按照规则排序</li>
</ul>
<p>设置TreeSet排序规则：</p>
<p>自然排序</p>
<ul>
<li>Comparable     </li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       TreeSet&lt;Test&gt; list = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">       <span class="comment">//新建测试对象</span></span><br><span class="line">       Test s1 = <span class="keyword">new</span> Test(<span class="string">"xiaoli"</span>,<span class="number">10</span>);</span><br><span class="line">       Test s2 = <span class="keyword">new</span> Test(<span class="string">"liuhuang"</span>,<span class="number">20</span>);</span><br><span class="line">       Test s3 = <span class="keyword">new</span> Test(<span class="string">"aotemang"</span>,<span class="number">30</span>);</span><br><span class="line">       Test s4 = <span class="keyword">new</span> Test(<span class="string">"xiyangyang"</span>,<span class="number">110</span>);</span><br><span class="line">       Test s5 = <span class="keyword">new</span> Test(<span class="string">"gaiya"</span>,<span class="number">30</span>);</span><br><span class="line">       <span class="comment">//TreeSet添加对象</span></span><br><span class="line">       list.add(s1);</span><br><span class="line">       list.add(s2);</span><br><span class="line">       list.add(s3);</span><br><span class="line">       list.add(s4);</span><br><span class="line">       list.add(s5);</span><br><span class="line"></span><br><span class="line">       System.out.println(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>示例对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;public class Test  implements Comparable&lt;Test&gt;&#123;</span><br><span class="line">   private  String name;</span><br><span class="line">   private  int age;</span><br><span class="line"></span><br><span class="line">   public String getName() &#123;</span><br><span class="line">       return name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">       this.name &#x3D; name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public int getAge() &#123;</span><br><span class="line">       return age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setAge(int age) &#123;</span><br><span class="line">       this.age &#x3D; age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Test(String name, int age) &#123;</span><br><span class="line">       this.name &#x3D; name;</span><br><span class="line">       this.age &#x3D; age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Test() &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public String toString() &#123;</span><br><span class="line">       return &quot;Test&#123;&quot; +</span><br><span class="line">               &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">               &quot;, age&#x3D;&quot; + age +</span><br><span class="line">               &#39;&#125;&#39;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&gt;&#x2F;&#x2F;自然排序  Compareable</span><br><span class="line">&gt;&#x2F;&#x2F; return返回三个数   负数在左，正数在右，相同重复或次要判断</span><br><span class="line">   @Override</span><br><span class="line">   public int compareTo(Test o) &#123;</span><br><span class="line">       &#x2F;&#x2F;主要条件</span><br><span class="line">       &#x2F;&#x2F;从小到大</span><br><span class="line">      int result &#x3D; this.age - o.age;</span><br><span class="line">      &#x2F;&#x2F;次要条件</span><br><span class="line">      result &#x3D; this.age &#x3D;&#x3D; o.age ?  this.name.compareTo(o.name) :result ;</span><br><span class="line">      return result;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>比较器排序</p>
<ul>
<li>Comparator</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//比较器 Comparator 的方法重写；两个对象对比</span></span><br><span class="line">   <span class="comment">// o1 表示要存入的，o2 表示 集合中已经存在的</span></span><br><span class="line">   TreeSet&lt;Test02&gt; list = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Test02&gt;() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Test02 o1, Test02 o2)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> result = o1.getAge() - o2.getAge();</span><br><span class="line">           result = result == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : result;</span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">//新建测试对象</span></span><br><span class="line">   Test02 s1 = <span class="keyword">new</span> Test02(<span class="string">"xiaoli"</span>, <span class="number">10</span>);</span><br><span class="line">   Test02 s2 = <span class="keyword">new</span> Test02(<span class="string">"liuhuang"</span>, <span class="number">20</span>);</span><br><span class="line">   Test02 s3 = <span class="keyword">new</span> Test02(<span class="string">"aotemang"</span>, <span class="number">30</span>);</span><br><span class="line">   Test02 s4 = <span class="keyword">new</span> Test02(<span class="string">"xiyangyang"</span>, <span class="number">110</span>);</span><br><span class="line">   Test02 s5 = <span class="keyword">new</span> Test02(<span class="string">"gaiya"</span>, <span class="number">30</span>);</span><br><span class="line">   <span class="comment">//TreeSet添加对象</span></span><br><span class="line">   list.add(s1);</span><br><span class="line">   list.add(s2);</span><br><span class="line">   list.add(s3);</span><br><span class="line">   list.add(s4);</span><br><span class="line">   list.add(s5);</span><br><span class="line"></span><br><span class="line">   System.out.println(list);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="29-1-2-比较方式小结"><a href="#29-1-2-比较方式小结" class="headerlink" title="29.1.2 比较方式小结"></a>29.1.2 比较方式小结</h5><blockquote>
<p>小结：</p>
<ul>
<li>自然排序：自定义实现Comparable，重写comparaTo方法，根据返回值进行排序</li>
<li>比较器排序：创建TreeSet对象的时候传递Comparator的实现类对象，重写compara方法，根据返回值进行排序</li>
<li>在使用的时候，默认使用自然排序，当自然排序不满足现在的需求，使用比较器排序</li>
</ul>
<p>关于返回值的规则：</p>
<ul>
<li>如果返回值为负数，表示当前存入的元素是最小值，存左边</li>
<li>如果返回值为0，表示当前存入的元素b跟集合中元素重复了，不存</li>
<li>如果返回值为正数表示当前存入的元素是较大值，存右边</li>
</ul>
</blockquote>
<h3 id="30-二叉树"><a href="#30-二叉树" class="headerlink" title="30. 二叉树"></a>30. 二叉树</h3><h4 id="30-1-二叉查找树"><a href="#30-1-二叉查找树" class="headerlink" title="30.1 二叉查找树"></a>30.1 二叉查找树</h4><blockquote>
<p>特点：</p>
<ul>
<li>小的存左边</li>
<li><h6 id="大的存右边"><a href="#大的存右边" class="headerlink" title="大的存右边"></a>大的存右边</h6></li>
<li>一样的不存</li>
</ul>
<h5 id=""><a href="#" class="headerlink" title=""></a><img src="/image/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.png" alt=""></h5></blockquote>
<h4 id="30-2-二叉平衡树"><a href="#30-2-二叉平衡树" class="headerlink" title="30.2 二叉平衡树"></a>30.2 二叉平衡树</h4><blockquote>
<p>特点：</p>
<ul>
<li><p>左子树和右子树的高度差不超过1</p>
</li>
<li><p>任意节点的左右两个子树都是一个平衡二叉树</p>
</li>
</ul>
<h6 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/image/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt=""></h6></blockquote>
<h5 id="30-2-1-二叉树平衡机制—左旋、右旋"><a href="#30-2-1-二叉树平衡机制—左旋、右旋" class="headerlink" title="30.2.1 二叉树平衡机制—左旋、右旋"></a>30.2.1 二叉树平衡机制—左旋、右旋</h5><blockquote>
<p>左旋：就是将根节点的右侧往左转，原先的右节点变成新的父节点，并将多余的左子节点出让，给已经降级的根节点当右子节点</p>
<h6 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="/image/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E6%97%8B.png" alt=""></h6><p>右旋：就是将根节点的左侧往右转，原先的左节点变成新的父节点，并将多余的右子节点出让，给已经降级的根节点当左  子节点</p>
<p><img src="/image/%E5%8F%B3%E6%97%8B02.png" alt=""></p>
</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>高级集合-list和数据结构</title>
    <url>/2021/09/23/DAY16_%E9%AB%98%E7%BA%A7%E9%9B%86%E5%90%88%E5%92%8C%E6%95%B0%E6%8D%AE%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h3 id="26-集合的高级"><a href="#26-集合的高级" class="headerlink" title="26. 集合的高级"></a>26. 集合的高级</h3><h4 id="26-1-集合的概述和继承体系"><a href="#26-1-集合的概述和继承体系" class="headerlink" title="26.1 集合的概述和继承体系"></a>26.1 集合的概述和继承体系</h4><blockquote>
<ol>
<li>集合和数组的对比：</li>
</ol>
<ul>
<li>集合长度可变，数组长度不可变</li>
<li>集合只能存储引用数据类型或者<font color = "red">存储基本数据类型的包装类</font>，集合可以存储引用数据类型和基本数据类型</li>
</ul>
<ol start="2">
<li>集合类体系结构</li>
</ol>
<ul>
<li>Collection (单列)(接口)<ul>
<li>list（可重复)(接口)<ul>
<li>ArrayList（实现类）</li>
<li>LinkedList（实现类）</li>
</ul>
</li>
<li>Set（不重复)(接口)<ul>
<li>HashSet（实现类）</li>
<li>TreeSet（实现类）</li>
</ul>
</li>
</ul>
</li>
<li>Map（双列)(接口)<ul>
<li>HashMap（实现类）</li>
<li>TreeMap（实现类）</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="26-2-Collection"><a href="#26-2-Collection" class="headerlink" title="26.2 Collection"></a>26.2 Collection</h4><h5 id="26-2-1-成员方法"><a href="#26-2-1-成员方法" class="headerlink" title="26.2.1 成员方法"></a>26.2.1 成员方法</h5><blockquote>
<table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean add(E e)</td>
<td align="left">添加元素</td>
</tr>
<tr>
<td align="left">boolean remove(Object o)</td>
<td align="left">从集合中移除指定的元素</td>
</tr>
<tr>
<td align="left">boolean removeIf(Object o)</td>
<td align="left">根据条件进行移除</td>
</tr>
<tr>
<td align="left">void   clear()</td>
<td align="left">清空集合中的元素</td>
</tr>
<tr>
<td align="left">boolean contains(Object o)</td>
<td align="left">判断集合中是否存在指定的元素</td>
</tr>
<tr>
<td align="left">boolean isEmpty()</td>
<td align="left">判断集合是否为空</td>
</tr>
<tr>
<td align="left">int   size()</td>
<td align="left">集合的长度，也就是集合中元素的个数</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    collection.add(<span class="string">"aaa"</span>);</span><br><span class="line">    collection.add(<span class="string">"bbb"</span>);</span><br><span class="line">    collection.add(<span class="string">"ccc"</span>);</span><br><span class="line">    collection.add(<span class="string">"dddd"</span>);</span><br><span class="line">    collection.add(<span class="string">"eeeee"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否存在某元素</span></span><br><span class="line">    <span class="keyword">boolean</span> result = collection.contains(<span class="string">"aaa"</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    <span class="comment">// 删除符合条件的元素</span></span><br><span class="line">    collection.removeIf(s -&gt; s.length() == <span class="number">3</span>);</span><br><span class="line">    System.out.println(collection);</span><br><span class="line">    <span class="comment">//集合是否为空</span></span><br><span class="line">    <span class="keyword">boolean</span> result1 = collection.isEmpty();</span><br><span class="line">    System.out.println(result1);</span><br><span class="line">    <span class="comment">//清空集合</span></span><br><span class="line">    collection.clear();</span><br><span class="line">    System.out.println(collection);</span><br><span class="line">    <span class="comment">//获取集合的长度</span></span><br><span class="line">    <span class="keyword">int</span> size = collection.size();</span><br><span class="line">    System.out.println(size);</span><br><span class="line">    <span class="comment">// removerIf的拓展</span></span><br><span class="line">    collection.removeIf(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length() == <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(collection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="26-2-2-Collertion集合的遍历"><a href="#26-2-2-Collertion集合的遍历" class="headerlink" title="26.2.2 Collertion集合的遍历"></a>26.2.2 Collertion集合的遍历</h5><blockquote>
<ul>
<li><p>Iterator:迭代器，集合的专用遍历方式</p>
<ul>
<li>Iterator<E> itertor(): 返回集合中的迭代器对象，该迭代器对象默认指向当前集合的0索引位置</li>
</ul>
</li>
<li><p>Iterator中的常用方法</p>
<ul>
<li>boolean hasNext：判断单签位置是否有元素可以取出</li>
<li>E next()：获取当前位置的元素；将迭代器对象移动向下一个索引位置</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> collection.add(<span class="string">"aaa"</span>);</span><br><span class="line"> collection.add(<span class="string">"bbb"</span>);</span><br><span class="line"> collection.add(<span class="string">"ccc"</span>);</span><br><span class="line"> collection.add(<span class="string">"dddd"</span>);</span><br><span class="line"> collection.add(<span class="string">"eeeee"</span>);</span><br><span class="line"> <span class="comment">//创建Iterator 对象</span></span><br><span class="line"> Iterator&lt;String&gt; it = collection.iterator();</span><br><span class="line"> <span class="comment">//创建循环遍历</span></span><br><span class="line"> <span class="keyword">while</span> (it.hasNext())&#123;  <span class="comment">// 判断索引位置是否有元素</span></span><br><span class="line">     System.out.println(it.next());  <span class="comment">// 取出索引位置的元素；并且往后推一下元素</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>集合遍历删除相同元素示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      list.add(<span class="string">"a"</span>);</span><br><span class="line">      list.add(<span class="string">"a"</span>);</span><br><span class="line">      list.add(<span class="string">"c"</span>);</span><br><span class="line">      list.add(<span class="string">"b"</span>);</span><br><span class="line">      list.add(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//数组for循环遍历删除   ----1</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">           String s = list.get(i);</span><br><span class="line">           <span class="keyword">if</span>(<span class="string">"a"</span>.equals(s))&#123;</span><br><span class="line">               list.remove(s);</span><br><span class="line">               i--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&gt;<span class="comment">// 集合迭代器遍历，删除相同元素   -----2</span></span><br><span class="line">      Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;  <span class="comment">// 迭代器指向0索引</span></span><br><span class="line">          <span class="comment">// 将指向元素，赋值String，取出比较，并移向下一元素</span></span><br><span class="line">          String s = it.next();  </span><br><span class="line">          <span class="keyword">if</span> (<span class="string">"a"</span>.equals(s)) &#123;</span><br><span class="line">              it.remove();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(list);</span><br></pre></td></tr></table></figure>
<p>ArrayList集合遍历删除弊端：降低性能（删除中间的数值，需要将后面的元素往前移动一位）</p>
<p><strong>增强for循环</strong></p>
<p>概念：简化数组和Collertion集合的遍历</p>
<ul>
<li>JDK5后面出现的，其内部原理是一个Iterator迭代器</li>
<li>实现Iterable接口的类才可以使用迭代器和增强for</li>
</ul>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">for</span>(元素数据类型  变量名：数组或者Collertion集合)&#123;</span><br><span class="line">	<span class="comment">//在此处使用变量，该变量就是元素</span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&gt;<span class="comment">//  增加元素</span></span><br><span class="line">&gt;<span class="comment">//s只是一个变量，表示集合或者数组中循环的中的每个元素</span></span><br><span class="line">&gt;<span class="comment">// list是需要遍历的集合或者数组</span></span><br><span class="line">&gt;<span class="keyword">for</span>(String s : list)&#123;  </span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<p>Lambda方式遍历</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;list.forEach(c -&gt; System.out.println(c));</span><br></pre></td></tr></table></figure>

<p>三种循环的使用场景</p>
<ul>
<li><p>如果需要操作索引，使用普通for循环</p>
</li>
<li><p>如果在遍历过程中需要删除元素，使用迭代器</p>
</li>
<li><p>如果只需要遍历，使用增强for，不建议使用删除</p>
<p>（Iterator迭代器和集合长度可变删除移位冲突）</p>
<p>// ConcurrentModificationException  并发修改异常</p>
</li>
<li><p>普通for循环不通用</p>
</li>
</ul>
</blockquote>
<h4 id="26-3-List集合"><a href="#26-3-List集合" class="headerlink" title="26.3 List集合"></a>26.3 List集合</h4><h5 id="26-3-1-List的概述和特点"><a href="#26-3-1-List的概述和特点" class="headerlink" title="26.3.1 List的概述和特点"></a>26.3.1 List的概述和特点</h5><blockquote>
<ol>
<li><strong>List集合概述</strong></li>
</ol>
<ul>
<li>有序集合，这里的有序指的是存取顺序</li>
<li>用户可以精确控制列表中每个元素的插入位置，用户可以通过整数索引访问元素，并搜索列表中的元素</li>
<li>与Set集合不同，列表中通常允许重复的元素</li>
</ul>
<ol start="2">
<li>List集合的<strong>特点</strong></li>
</ol>
<ul>
<li>有序：有序和取出的元素顺序一致</li>
<li>有索引：可以通过索引操作元素</li>
<li>可重复：存储的元素可以重复</li>
</ul>
</blockquote>
<h5 id="26-3-2-List集合的方法"><a href="#26-3-2-List集合的方法" class="headerlink" title="26.3.2 List集合的方法"></a>26.3.2 List集合的方法</h5><blockquote>
<p>成员方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void add(int index,E   element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
<tr>
<td>E remove(int   index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>E set(int index,E   element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>E get(int   index)</td>
<td>返回指定索引处的元素</td>
</tr>
</tbody></table>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;String&gt; list  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">"aaa"</span>);</span><br><span class="line">       list.add(<span class="string">"bbb"</span>);</span><br><span class="line">       list.add(<span class="string">"ccc"</span>);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//        Listadd(list);   // 增加</span></span><br><span class="line">&gt;<span class="comment">//       Listremove(list);  //删除</span></span><br><span class="line">&gt;<span class="comment">//        Listset(list);    //修改</span></span><br><span class="line">&gt;<span class="comment">//        Listget(list);    //获取</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Listget</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 获取指定位置的元素</span></span><br><span class="line">       String s = list.get(<span class="number">0</span>);</span><br><span class="line">       System.out.println(s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Listset</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 修改指定元素，会返回被修改的元素</span></span><br><span class="line">       <span class="comment">//被替代的元素，在集合中就不存在了</span></span><br><span class="line">       String  result = list.set(<span class="number">0</span>,<span class="string">"qqq"</span>);</span><br><span class="line">       System.out.println(result);</span><br><span class="line">       System.out.println(list);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Listremove</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 删除指定元素，会返回被删除的元素</span></span><br><span class="line">       String s = list.remove(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">// 删除指定元素，集合中的第一个，返回删除的布尔值</span></span><br><span class="line">       <span class="keyword">boolean</span> result = list.remove(<span class="string">"aaa"</span>);</span><br><span class="line">       System.out.println(result);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Listadd</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// add 在指定位置插入指定元素，原来上的元素往后挪一个索引</span></span><br><span class="line">       list.add(<span class="number">0</span>,<span class="string">"ddd"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



</blockquote>
<h5 id="26-3-3-List的常用方法"><a href="#26-3-3-List的常用方法" class="headerlink" title="26.3.3 List的常用方法"></a>26.3.3 List的常用方法</h5><blockquote>
<ul>
<li><p>ArrayList集合</p>
<ul>
<li>底层是数组结构实现，查询快、增删慢</li>
</ul>
</li>
<li><p>LinkedList集合</p>
<ul>
<li>底层是链表结构实现，查询慢、增删快</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="26-3-4-LinkedList的私有方法"><a href="#26-3-4-LinkedList的私有方法" class="headerlink" title="26.3.4 LinkedList的私有方法"></a>26.3.4 LinkedList的私有方法</h5><blockquote>
<p>成员方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public void addFirst(E e)</td>
<td>在该列表开头插入指定的元素</td>
</tr>
<tr>
<td>public void addLast(E e)</td>
<td>将指定的元素追加到此列表的末尾</td>
</tr>
<tr>
<td>public E getFirst()</td>
<td>返回此列表中的第一个元素</td>
</tr>
<tr>
<td>public   E getLast()</td>
<td>返回此列表中的最后一个元素</td>
</tr>
<tr>
<td>public E removeFirst()</td>
<td>从此列表中删除并返回第一个元素</td>
</tr>
<tr>
<td>public   E removeLast()</td>
<td>从此列表中删除并返回最后一个元素</td>
</tr>
</tbody></table>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"aaa"</span>);</span><br><span class="line">list.add(<span class="string">"bbb"</span>);</span><br><span class="line">list.add(<span class="string">"ccc"</span>);</span><br><span class="line">list.add(<span class="string">"ddd"</span>);</span><br><span class="line">&gt;<span class="comment">//添加到最后一位</span></span><br><span class="line">list.addLast(<span class="string">"eee"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加到开头</span></span><br><span class="line">list.addFirst(<span class="string">"000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回列表中第一个元素</span></span><br><span class="line">String a =list.getFirst();</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回列表中最后一个元素</span></span><br><span class="line">String b =list.getLast();</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个元素</span></span><br><span class="line">list.removeFirst();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除最后一位</span></span><br><span class="line">list.removeLast();</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="27-数据结构"><a href="#27-数据结构" class="headerlink" title="27. 数据结构"></a>27. 数据结构</h3><h4 id="27-1-常见的数据结构之一队列"><a href="#27-1-常见的数据结构之一队列" class="headerlink" title="27.1 常见的数据结构之一队列"></a>27.1 常见的数据结构之一队列</h4><blockquote>
<ul>
<li><p>栈结构</p>
<p>​    先进后出</p>
</li>
<li><p>队列结构</p>
<p>​    先进先出</p>
</li>
</ul>
</blockquote>
<h4 id="27-2-常见的数据结构之一数组"><a href="#27-2-常见的数据结构之一数组" class="headerlink" title="27.2 常见的数据结构之一数组"></a>27.2 常见的数据结构之一数组</h4><blockquote>
<ul>
<li>数组<ul>
<li>查询数据通过地址值和索引定位</li>
<li>查询快，增删慢</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="27-3-常见的数据结构之一链表"><a href="#27-3-常见的数据结构之一链表" class="headerlink" title="27.3 常见的数据结构之一链表"></a>27.3 常见的数据结构之一链表</h4><blockquote>
<ul>
<li>增删快，查询慢</li>
</ul>
<p><img src="image/%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8.png" alt=""></p>
<p><img src="image/%E9%93%BE%E8%A1%A8-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt=""></p>
</blockquote>
<ul>
<li>数组在执行查询时效率很高</li>
<li>数据在增删时候效率很低</li>
<li>链表在执行查询时候效率低</li>
<li>链表在执行增删的时候效率很高</li>
</ul>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>可变参数和Steam流</title>
    <url>/2021/09/27/DAY19_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%92%8CSteam%E6%B5%81/</url>
    <content><![CDATA[<h3 id="33-可变参数"><a href="#33-可变参数" class="headerlink" title="33. 可变参数"></a>33. 可变参数</h3><h4 id="33-1-可变参数概述"><a href="#33-1-可变参数概述" class="headerlink" title="33.1 可变参数概述"></a>33.1 可变参数概述</h4><blockquote>
<p>可变参数：就是形参的个数是可以变化的</p>
<ul>
<li>格式：修饰符 返回值类型 方法名｛数据类型…变量名｝</li>
<li>范例：public static int sum (int… a)</li>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//求多个数的和</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> sum = getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">       System.out.<span class="function">printl <span class="title">n</span><span class="params">(sum)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;<span class="comment">// 可变参数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>... arr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           sum += arr[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>这里变量其实就是一个数组</li>
<li>如果一个方法有多个参数，包含可变参数，<font color= "red">可变参数要放在最后</font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> sum = getSum(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">       System.out.println(sum);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 可变参数</span></span><br><span class="line">&gt;<span class="comment">//    添加新参数，必须放在可变参数前面</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span>... arr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           sum += arr[i];</span><br><span class="line">       &#125;</span><br><span class="line">       sum += num;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="33-2-不可变集合-JDK-1-8-不支持"><a href="#33-2-不可变集合-JDK-1-8-不支持" class="headerlink" title="33.2 不可变集合(JDK.1.8 不支持)"></a>33.2 不可变集合(JDK.1.8 不支持)</h4><blockquote>
<p>成员方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>static <E> List of(E….elements)</td>
<td>创建一个具有指定元素的List集合对象</td>
</tr>
<tr>
<td>static <E> Set<E> of(E….elements)</td>
<td>创建一个具有指定元素的Set集合对象（不能出现重复的元素）</td>
</tr>
<tr>
<td>static &lt;K,V&gt;  Map&lt;K,V&gt; of(E….elements)</td>
<td>创建一个具有指定元素的Map集合对象</td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li>集合不可变，不可以添加和删除 、修改</li>
<li>可以结合集合的带参构造，实现集合的批量添加</li>
</ul>
<ul>
<li>在Map接口中，还有一个ofEntries方法可以提高代码的阅读性</li>
<li>首先会把键值对封装成一个Entry对象，再把这个Entry对象添加到集合当中</li>
</ul>
</blockquote>
<h3 id="34-Stream流"><a href="#34-Stream流" class="headerlink" title="34. Stream流"></a>34. Stream流</h3><h4 id="34-1-Stream流"><a href="#34-1-Stream流" class="headerlink" title="34.1 Stream流"></a>34.1 Stream流</h4><blockquote>
<h3 id="Stream流不能直接修改数据源中的数据"><a href="#Stream流不能直接修改数据源中的数据" class="headerlink" title="Stream流不能直接修改数据源中的数据"></a><strong>Stream流不能直接修改数据源中的数据</strong></h3><p>可以使用：</p>
<ul>
<li><p>单列集合</p>
<ul>
<li><p>使用stream() 生成流</p>
</li>
<li><p>default Stream<E> stream()</p>
</li>
<li><pre><code>//        单列集合
       ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
       list.add(&quot;aaa&quot;);
       list.add(&quot;bbb&quot;);
       list.add(&quot;ccc&quot;);
      list.stream().forEach(c -&gt; System.out.println(c));
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;- 双列集合</span><br><span class="line">- 间接的生成流</span><br><span class="line"></span><br><span class="line">- 先通过keySet或者entrySet获取一个单列Set集合，再获取stream流</span><br><span class="line"></span><br><span class="line"> - </span><br></pre></td></tr></table></figure>
//        双列集合
       HashMap&lt;String, String&gt; maps = new HashMap&lt;&gt;();
       maps.put(&quot;aaa&quot;, &quot;001&quot;);
       maps.put(&quot;bbb&quot;, &quot;002&quot;);
       maps.put(&quot;ccc&quot;, &quot;003&quot;);
       //输出键
       maps.keySet().stream().forEach(c -&gt; System.out.println(c));
       //输出键值对
       maps.entrySet().stream().forEach(c -&gt; System.out.println(c));
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li><p>Arrays中的静态方法stream生成流</p>
</li>
<li><pre><code>//        数组
       int[] arr = {1, 2, 3, 4};
       Arrays.stream(arr).forEach(c -&gt; System.out.println(c));
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;- 同数据类型的多个数据</span><br><span class="line">- 使用Stream.of(T…values)生成流</span><br><span class="line"></span><br><span class="line">- </span><br></pre></td></tr></table></figure>
//         多个同数据类型
       String a = &quot;aaa&quot;;
       String b = &quot;bbb&quot;;
       String c = &quot;ccc&quot;;
       String d = &quot;ddd&quot;;
       Stream.of(a, b, c, d).forEach(i -&gt; System.out.println(i));</code></pre></li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="34-1-1-Stream常见中间操作方法"><a href="#34-1-1-Stream常见中间操作方法" class="headerlink" title="34.1.1 Stream常见中间操作方法"></a>34.1.1 Stream常见中间操作方法</h5><blockquote>
<p>条件筛选：</p>
<ul>
<li><p>Stream <T> filter(Predicate predicate)：用户对流中的数据进行过滤</p>
<ul>
<li>Predicate接口汇总的方法</li>
<li>boolean test(T  t) :对给定的参数进行判断，返回一个布尔值</li>
</ul>
</li>
<li><p>Stream<T> limit(long maxSize) ：截取指定参数个数的数据</p>
</li>
<li><p>Stream<T> skip(long n)：跳过指定参数个数的数据</p>
</li>
<li><p>static<T> Stream<T> concat(Stream a,Stream b)：合并a和b两个流为一个流</p>
</li>
<li><p>Stream<T> distinct：去除流中重复的元素，依赖（hashCode和equals方法）</p>
</li>
</ul>
<p>结束后返回值：</p>
<ul>
<li>void forEach(Consumer action)：对此流的每个元素执行操作<ul>
<li>Consumer 接口中的方法</li>
<li>void accept(T  t) ：对给定的参数执行此操作</li>
</ul>
</li>
<li>long count()  ：返回此流中的元素数</li>
</ul>
</blockquote>
<h5 id="34-1-2-Stream流的收集操作"><a href="#34-1-2-Stream流的收集操作" class="headerlink" title="34.1.2 Stream流的收集操作"></a>34.1.2 Stream流的收集操作</h5><blockquote>
<p>收集方法：</p>
<ul>
<li>R collect(Collector collector)<ul>
<li>toList()  ：元素收集到List集合中</li>
<li>toSet()   ：元素收集到Set集合中</li>
<li>toMap(Function keyMapper,Function valueMapper)  ：元素收集到Map集合中</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载器和反射</title>
    <url>/2021/10/07/DAY23_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="43-类加载器"><a href="#43-类加载器" class="headerlink" title="43. 类加载器"></a>43. 类加载器</h3><h4 id="43-1-类加载器的基础"><a href="#43-1-类加载器的基础" class="headerlink" title="43.1 类加载器的基础"></a>43.1 类加载器的基础</h4><h5 id="43-1-1-类加载器的概念"><a href="#43-1-1-类加载器的概念" class="headerlink" title="43.1.1 类加载器的概念"></a>43.1.1 类加载器的概念</h5><blockquote>
<p>类加载器：负责将.class文件(存储的物理文件)加载到内存中</p>
</blockquote>
<h4 id="43-2-类加载器的过程"><a href="#43-2-类加载器的过程" class="headerlink" title="43.2 类加载器的过程"></a>43.2 类加载器的过程</h4><blockquote>
<p>类加载时机</p>
<ul>
<li>创建类的实例（对象）</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为该类变量赋值</li>
<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类、</li>
</ul>
<h6 id="使用的时候加载，不运行不加载"><a href="#使用的时候加载，不运行不加载" class="headerlink" title="==使用的时候加载，不运行不加载=="></a>==使用的时候加载，不运行不加载==</h6><p>过程：</p>
<p>加载—验证—准备—解析—初始化</p>
<p>链接：验证-准备-解析 </p>
<p>加载：（把Class文件加载到内存中）</p>
<p>​    全限定类名 ： 包名+类名  （相当于类的绝对路径）</p>
<ul>
<li>通过包名+类名，来获取这个类，准备用进行传输</li>
<li>在这个类加载到内存中</li>
<li>加载完毕创建一个Class对象</li>
</ul>
<p>验证：</p>
<ul>
<li>文件中的信息是否符合规范</li>
</ul>
<p>准备：</p>
<ul>
<li>初始化静态变量</li>
</ul>
<p>解析：</p>
<ul>
<li>如果使用到其他的类，就找到该类</li>
</ul>
<p>初始化：</p>
<ul>
<li>静态变量赋值以及初始化其他资源</li>
</ul>
</blockquote>
<h4 id="43-3-类加载器的分类"><a href="#43-3-类加载器的分类" class="headerlink" title="43.3 类加载器的分类"></a>43.3 类加载器的分类</h4><blockquote>
<p>三种加载器</p>
<ul>
<li>启动类加载器：虚拟机内置的类加载<ul>
<li>加载JRE        </li>
</ul>
</li>
<li>平台类加载器：负责加载JDK一些特殊的模块  <ul>
<li>加载JDK   </li>
</ul>
</li>
<li>系统类加载器：负责加载用户类路径上所指定的类库  <ul>
<li>加载自己的类或者别人的工具类   </li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="43-4-双亲委派模型"><a href="#43-4-双亲委派模型" class="headerlink" title="43.4 双亲委派模型"></a>43.4 双亲委派模型</h4><blockquote>
<p>方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static ClassLoader getSystemClassLoader()</td>
<td>获取系统类加载器</td>
</tr>
<tr>
<td>public InputStream getResourceAsStream(String name)</td>
<td>加载某一个资源文件</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderDemo2</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span></span><br><span class="line">       <span class="comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取系统类加载器</span></span><br><span class="line">       ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//利用加载器去加载一个指定的文件</span></span><br><span class="line">       <span class="comment">//参数：文件的路径（放在src的根目录下，默认去那里加载）</span></span><br><span class="line">       <span class="comment">//返回值：字节流。</span></span><br><span class="line">     InputStream is = systemClassLoader.getResourceAsStream(<span class="string">"prop.properties"</span>);</span><br><span class="line"></span><br><span class="line">       Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">     prop.load(is);</span><br><span class="line"></span><br><span class="line">     System.out.println(prop);</span><br><span class="line"></span><br><span class="line">       is.close();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="44-反射"><a href="#44-反射" class="headerlink" title="44. 反射"></a>44. 反射</h3><h4 id="44-1-反射的概念"><a href="#44-1-反射的概念" class="headerlink" title="44.1 反射的概念"></a>44.1 反射的概念</h4><blockquote>
<p>Java反射机制：</p>
<ul>
<li>在运行状态下，对于任何一个类，都能够知道这个类的所有属性和方法</li>
<li>对于任何一个对象，都能调用它的任意属性和方法</li>
</ul>
<p>==利用反射调用它类中的属性和方法时，无视修饰符==</p>
<p>先获取配置文件中的信息，动态获取信息并创建对象和调动方法</p>
</blockquote>
<h4 id="44-2-使用反射的前提条件"><a href="#44-2-使用反射的前提条件" class="headerlink" title="44.2 使用反射的前提条件"></a>44.2 使用反射的前提条件</h4><h5 id="44-2-1-获取Class类的对象"><a href="#44-2-1-获取Class类的对象" class="headerlink" title="44.2.1 获取Class类的对象"></a>44.2.1 获取Class类的对象</h5><blockquote>
<p>三种方法：</p>
<ul>
<li>Class类中的静态方法forName（“包名+类名”）</li>
<li>通过class属性来获得</li>
<li>利用对象的getClass方法来获得class对象；getClass方法是定义在Object类中</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//        1.Class类中的静态方法forName（“全类名”）</span></span><br><span class="line">       <span class="comment">//全类名：包名+类名</span></span><br><span class="line">       Class clazz = Class.forName(<span class="string">"DAY24.Demo.Demo01.Staff"</span>);</span><br><span class="line">       System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//        2.通过class属性来获得</span></span><br><span class="line">       Class clazz2 = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//        3.利用对象的getClass方法来获得class对象</span></span><br><span class="line">&gt;<span class="comment">//            getClass方法是定义在Object类中</span></span><br><span class="line">       Staff staff= <span class="keyword">new</span> Staff();</span><br><span class="line">       Class clazz3 = staff.getClass();</span><br><span class="line">       System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="44-3-Class的使用"><a href="#44-3-Class的使用" class="headerlink" title="44.3 Class的使用"></a>44.3 Class的使用</h4><h5 id="44-3-1-Class的方法"><a href="#44-3-1-Class的方法" class="headerlink" title="44.3.1 Class的方法"></a>44.3.1 Class的方法</h5><blockquote>
<p>获取构造方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>返回所有构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>返回所有公共构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共构造方法对象</td>
</tr>
<tr>
<td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个构造方法对象</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo02</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">       <span class="comment">//返回单个公共构造方法</span></span><br><span class="line">&gt;<span class="comment">//        method01();</span></span><br><span class="line">       <span class="comment">//获取单个构造方法</span></span><br><span class="line">&gt;<span class="comment">//        method02();</span></span><br><span class="line">       <span class="comment">//返回所有构造方法对象数组</span></span><br><span class="line">&gt;<span class="comment">//        method03();</span></span><br><span class="line">       <span class="comment">//返回所有公共方法对象</span></span><br><span class="line">&gt;<span class="comment">//        method04();</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//返回所有公共方法对象</span></span><br><span class="line">       Constructor[] cs = clazz.getConstructors();</span><br><span class="line">       System.out.println(Arrays.toString(cs));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//返回所有构造方法对象数组</span></span><br><span class="line">       Constructor[] dc = clazz.getDeclaredConstructors();</span><br><span class="line">       System.out.println(Arrays.toString(dc));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">       <span class="comment">//获取class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取单个构造方法</span></span><br><span class="line">       Constructor dc = clazz.getDeclaredConstructor();</span><br><span class="line">       System.out.println(dc);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">       <span class="comment">//获取class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取无参构造</span></span><br><span class="line">       Constructor cs = clazz.getConstructor();</span><br><span class="line">       System.out.println(cs);</span><br><span class="line">       <span class="comment">//获取有参构造，顺序需要和构造方法的顺序一致</span></span><br><span class="line">       Constructor cs2 = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">       System.out.println(cs2);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="44-3-2-Class的成员方法使用"><a href="#44-3-2-Class的成员方法使用" class="headerlink" title="44.3.2 Class的成员方法使用"></a>44.3.2 Class的成员方法使用</h5><blockquote>
<p>成员方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object…initargs)</td>
<td>根据指定的构造方法创建对象</td>
</tr>
<tr>
<td>setAccessible(boolean flag)</td>
<td>设置为true,表示取消访问检查</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo03</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//        method01();</span></span><br><span class="line">&gt;<span class="comment">//        method02();</span></span><br><span class="line">&gt;<span class="comment">//        method03();</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method03</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取无参构造</span></span><br><span class="line">       Constructor dc = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       <span class="comment">//被private修饰的成员，不能直接使用</span></span><br><span class="line">       <span class="comment">//如果用反射强行获取并且使用，需要临时取消访问检查</span></span><br><span class="line">       dc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       Staff staff = (Staff) dc.newInstance(<span class="string">"李四"</span>);</span><br><span class="line">       System.out.println(staff);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取公共的无参构造</span></span><br><span class="line">       Constructor cs = clazz.getConstructor();</span><br><span class="line">       <span class="comment">//使用对象</span></span><br><span class="line">       Staff staff = (Staff) cs.newInstance();</span><br><span class="line">       System.out.println(staff);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取构造方法 有参</span></span><br><span class="line">       Constructor cs = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">       Staff sta1 = (Staff) cs.newInstance(<span class="string">"六四"</span>, <span class="string">"14"</span>);</span><br><span class="line">       <span class="comment">//        System.out.println(sta1);</span></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="44-3-3-Clas的成员变量-Field对象"><a href="#44-3-3-Clas的成员变量-Field对象" class="headerlink" title="44.3.3 Clas的成员变量 - Field对象"></a>44.3.3 Clas的成员变量 - Field对象</h5><blockquote>
<p>方法分类：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getFields()</td>
<td>返回所有公共成员变量对象的数组</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回所有成员变量对象的数组</td>
</tr>
<tr>
<td>Field getField(String name)</td>
<td>返回单个公共成员变量对象</td>
</tr>
<tr>
<td>Field getDeclaredField(String name)</td>
<td>返回单个成员变量对象</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassFieldDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//        method01();</span></span><br><span class="line">&gt;<span class="comment">//        method02();</span></span><br><span class="line">&gt;<span class="comment">//        method03();</span></span><br><span class="line">&gt;<span class="comment">//        mothod04();</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mothod04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class&lt;Staff&gt; clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取所有成员变量数组对象</span></span><br><span class="line">       Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">       System.out.println(Arrays.toString(declaredFields));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class&lt;Staff&gt; clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取所有公共成员变量对象的数组</span></span><br><span class="line">       Field[] fields = clazz.getFields();</span><br><span class="line">       System.out.println(Arrays.toString(fields));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class&lt;Staff&gt; clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取私有成员变量</span></span><br><span class="line">       Field field = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">       System.out.println(field);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">       <span class="comment">//获取Class对象</span></span><br><span class="line">       Class&lt;Staff&gt; clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取的成员变量必须是真实存在的</span></span><br><span class="line">       <span class="comment">//且必须是public修饰的</span></span><br><span class="line">       <span class="comment">//获取name的成员变量</span></span><br><span class="line">       Field field = clazz.getField(<span class="string">"sex"</span>);</span><br><span class="line">       System.out.println(field);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="44-3-4-Class的Field对象进行赋值并使用"><a href="#44-3-4-Class的Field对象进行赋值并使用" class="headerlink" title="44.3.4 Class的Field对象进行赋值并使用"></a>44.3.4 Class的Field对象进行赋值并使用</h5><blockquote>
<p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void set(Object obj, Object value)</td>
<td>赋值</td>
</tr>
<tr>
<td>Object get(Object obj)</td>
<td>获取值</td>
</tr>
</tbody></table>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;public class ClassFieldSetDemo &#123;</span><br><span class="line">   public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F;获取Class对象</span><br><span class="line">       Class clazz &#x3D; Staff.class;</span><br><span class="line">       &#x2F;&#x2F;获取成员变量</span><br><span class="line">       Field field &#x3D; clazz.getDeclaredField(&quot;sex&quot;);</span><br><span class="line">       &#x2F;&#x2F;避免访问</span><br><span class="line">       field.setAccessible(true);</span><br><span class="line">       &#x2F;&#x2F;获取成员对象</span><br><span class="line">       Staff staff &#x3D; (Staff)clazz.newInstance();</span><br><span class="line">&gt;&#x2F;&#x2F;        Staff o &#x3D; (Staff)df.get(staff);</span><br><span class="line">       &#x2F;&#x2F;设置成员变量</span><br><span class="line">       field.set(staff,&quot;女&quot;);</span><br><span class="line">       &#x2F;&#x2F;获取成员变量</span><br><span class="line">       String  sex &#x3D;(String) field.get(staff);</span><br><span class="line">       System.out.println(sex);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="44-3-4-Class的调用成员方法"><a href="#44-3-4-Class的调用成员方法" class="headerlink" title="44.3.4 Class的调用成员方法"></a>44.3.4 Class的调用成员方法</h5><blockquote>
<p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethods()</td>
<td>返回所有公共成员方法对象的数组，包括继承的</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td>返回所有成员方法对象的数组，不包括继承的</td>
</tr>
<tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共成员方法对象</td>
</tr>
<tr>
<td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个成员方法对象</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassGetMethodDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//        method01();</span></span><br><span class="line">&gt;<span class="comment">//        method02();</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建Class对象</span></span><br><span class="line">       Class&lt;Staff&gt; clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取方法method02</span></span><br><span class="line">       Method method02 = clazz.getDeclaredMethod(<span class="string">"method02"</span>);</span><br><span class="line">       System.out.println(method02);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">       <span class="comment">//创建Class对象</span></span><br><span class="line">       Class&lt;Staff&gt; clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//获取成员方法method01</span></span><br><span class="line">       Method method01 = clazz.getMethod(<span class="string">"method01"</span>);</span><br><span class="line">       System.out.println(method01);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>成员方法使用：</strong></p>
<p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>运行方法</td>
</tr>
</tbody></table>
<p>参数一: 用obj对象调用该方法</p>
<p>参数二: 调用方法的传递的参数(如果没有就不写)</p>
<p>返回值: 方法的返回值(如果没有就不写)</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassMethodUser</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">       <span class="comment">//创建Class对象</span></span><br><span class="line">       Class clazz = Staff<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       <span class="comment">//构造成员方法</span></span><br><span class="line">       Constructor dc = clazz.getDeclaredConstructor();</span><br><span class="line">       <span class="comment">//避免访问</span></span><br><span class="line">       dc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//调用方法</span></span><br><span class="line">       Method method02 = clazz.getDeclaredMethod(<span class="string">"method02"</span>);</span><br><span class="line">       <span class="comment">//避免访问</span></span><br><span class="line">       method02.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//创建Staff对象</span></span><br><span class="line">       Staff staff = (Staff) dc.newInstance();</span><br><span class="line">       method02.invoke(staff);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="44-4-注意事项"><a href="#44-4-注意事项" class="headerlink" title="44.4 注意事项"></a>44.4 注意事项</h4><blockquote>
<ul>
<li>调用私有成员或者私有方法，需要添加 <code>T setAccessible(true);</code>语句，暴力破解</li>
<li>创建Class后，需要创建成员构造方法</li>
<li>不能直接使用Class对象直接创建成员对象,需要创建构造方法后，构造方法对象进行构造</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2021/10/16/Day01_MySQL%E5%92%8CNavicat/</url>
    <content><![CDATA[<h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1. 数据库"></a>1. 数据库</h3><h4 id="1-1-数据库相关概念"><a href="#1-1-数据库相关概念" class="headerlink" title="1.1 数据库相关概念"></a>1.1 数据库相关概念</h4><blockquote>
<p>数据库：</p>
<ul>
<li>存储数据的仓库，数据是有组织的进行存储</li>
<li>英文：DataBase ，简称DB</li>
</ul>
<p>数据库管理系统：</p>
<ul>
<li>管理数据库的大型软件</li>
<li>英文：DataBase Management System，简称 DBMS</li>
</ul>
<p>SQL：</p>
<ul>
<li>英文：Structured Query Language，简称 SQL，结构化查询语言</li>
<li>操作关系型数据库的编程语言</li>
<li>定义操作所有关系型数据库的统一标准</li>
</ul>
</blockquote>
<h4 id="1-2-SQ分类"><a href="#1-2-SQ分类" class="headerlink" title="1.2 SQ分类"></a>1.2 SQ分类</h4><blockquote>
<p>DDL:操作数据库、表</p>
<p>DML:操作表中数据的增删改</p>
<p>DQL:操作表中数据进行查询</p>
<p>DCL:对数据库中进行权限控制</p>
<p>基本语句：</p>
<p><strong>进入数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;#mysql -u 用户名 -p 密码</span><br><span class="line">&gt;mysql -u root -p root</span><br></pre></td></tr></table></figure>

<p><strong>展示所有数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;show databases;</span><br></pre></td></tr></table></figure>

<p><strong>进入使用数据库</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;use 数据库名；</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-3-DDL的语句"><a href="#1-3-DDL的语句" class="headerlink" title="1.3 DDL的语句:"></a>1.3 DDL的语句:</h4><blockquote>
<p><strong>查看表结构</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;desc 表名;</span><br></pre></td></tr></table></figure>

<p><strong>更换表名</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;ALTER TABLE 表名 RENAME TO 新的表名</span><br></pre></td></tr></table></figure>

<p><strong>添加一列</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;ALTER TABLE 表名 ADD 列名  数据类型；</span><br></pre></td></tr></table></figure>

<p><strong>修改数据类型</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 列名 新数据类型；</span><br></pre></td></tr></table></figure>

<p><strong>修改列名和数据类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型；</span><br></pre></td></tr></table></figure>

<p><strong>删除列</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 列名</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="1-4-DML的语句"><a href="#1-4-DML的语句" class="headerlink" title="1.4 DML的语句"></a>1.4 DML的语句</h4><blockquote>
<p><strong>查看所有数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 查看所有数据</span><br><span class="line">&gt;SELECT * from stu;</span><br></pre></td></tr></table></figure>



<p><strong>添加指定列数据</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 添加指定列数据 表名（列名1，列名2） VALUES (值1，值2。。)</span><br><span class="line">&gt;INSERT INTO stu(id,&#96;name&#96;,age,sex) VALUES (11,&#39;张三&#39;,10,&#39;男&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>给全部列添加数据</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 给全部列添加数据</span><br><span class="line">&gt;-- 给所有列添加数据，列名的列表可以省略的</span><br><span class="line">&gt;INSERT INTO tb_user (id,&#96;name&#96;,sex,birthday,sroce,emile,tell,state) VALUES (2,&#39;李四&#39;,&#39;男&#39;,&#39;1999-11-11&#39;,88.88,&#39;lisi@itcast.cn&#39;,&#39;13888888888&#39;,1);</span><br><span class="line"></span><br><span class="line">&gt;INSERT INTO tb_user VALUES (2,&#39;李四&#39;,&#39;男&#39;,&#39;1999-11-11&#39;,88.88,&#39;lisi@itcast.cn&#39;,&#39;13888888888&#39;,1);</span><br></pre></td></tr></table></figure>

<p><strong>批量添加数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 批量添加数据</span><br><span class="line">&gt;INSERT INTO tb_user VALUES </span><br><span class="line">(4,&#39;李四&#39;,&#39;男&#39;,&#39;1999-11-11&#39;,88.88,&#39;lisi@itcast.cn&#39;,&#39;13888888888&#39;,1),</span><br><span class="line">(5,&#39;李四&#39;,&#39;男&#39;,&#39;1999-11-11&#39;,88.88,&#39;lisi@itcast.cn&#39;,&#39;13888888888&#39;,1),</span><br><span class="line">(6,&#39;李四&#39;,&#39;男&#39;,&#39;1999-11-11&#39;,88.88,&#39;lisi@itcast.cn&#39;,&#39;13888888888&#39;,1);</span><br></pre></td></tr></table></figure>

<p><strong>删除数据</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 	删除表内数据</span><br><span class="line">&gt;DELETE FROM tb_user WHERE (条件)id &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p><strong>删除表中所有的数据</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;delete from 表名;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-5-DQL的语句"><a href="#1-5-DQL的语句" class="headerlink" title="1.5 DQL的语句"></a>1.5 DQL的语句</h4><blockquote>
<p>基础语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT </span><br><span class="line">   字段列表</span><br><span class="line">&gt;FROM </span><br><span class="line">   表名列表 </span><br><span class="line">&gt;WHERE </span><br><span class="line">   条件列表</span><br><span class="line">&gt;GROUP BY</span><br><span class="line">   分组字段</span><br><span class="line">&gt;HAVING</span><br><span class="line">   分组后条件</span><br><span class="line">&gt;ORDER BY</span><br><span class="line">   排序字段</span><br><span class="line">&gt;LIMIT</span><br><span class="line">   分页限定</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="1-5-1-分组查询"><a href="#1-5-1-分组查询" class="headerlink" title="1.5.1 分组查询"></a>1.5.1 分组查询</h5><blockquote>
<p><strong>查询多个字段：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 查询多个字段</span><br><span class="line">&gt;SELECT * FROM tb_user;</span><br></pre></td></tr></table></figure>

<p> <strong>去除重复记录：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 去除重复记录</span><br><span class="line">&gt;SELECT DISTINCT &#96;name&#96; FROM tb_user;</span><br></pre></td></tr></table></figure>

<p><strong>起别名  as可以省略：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 起别名  as可以省略</span><br><span class="line">&gt;SELECT id as 学号,&#96;name&#96; as 姓名,sex AS 性别,birthday 出生月份 FROM tb_user;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="1-5-2-条件查询"><a href="#1-5-2-条件查询" class="headerlink" title="1.5.2 条件查询"></a>1.5.2 条件查询</h5><blockquote>
<p>基本格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT 字段列表 FROM 表名 WHERE 条件列表;</span><br></pre></td></tr></table></figure>

<p><strong>条件</strong>：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; 或!=</td>
<td>不等于</td>
</tr>
<tr>
<td>BETWEEN..AND..</td>
<td>在某个范围之内</td>
</tr>
<tr>
<td>IN(..)</td>
<td>多选一</td>
</tr>
<tr>
<td>LIKE 占位符</td>
<td>模糊查询 %是多个任意字符</td>
</tr>
<tr>
<td>IS NULL</td>
<td>是null</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>不是null</td>
</tr>
<tr>
<td>AND 或 &amp;&amp;</td>
<td>并且</td>
</tr>
<tr>
<td>OR 或 ||</td>
<td>或者</td>
</tr>
<tr>
<td>NOT或！</td>
<td>非，不是</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 条件查询</span><br><span class="line"></span><br><span class="line">&gt;-- 1. 查询年龄大于20岁的学院信息</span><br><span class="line">&gt;select id,name,age,sex,address,math,english,hire_date from stu where age &gt; 20;</span><br><span class="line"></span><br><span class="line">&gt;-- 2. 查询年龄大于等于20岁的学院信息</span><br><span class="line">&gt;select id,name,age,sex,address,math,english,hire_date from stu where age &gt;&#x3D; 20;</span><br><span class="line"></span><br><span class="line">&gt;-- 3. 查询年龄大于等于30 并且 年龄小于等于30的学员信息</span><br><span class="line">&gt;select id,name,age,sex,address,math,english,hire_date from stu where age &gt;&#x3D; 20 and age &lt;&#x3D; 30;</span><br><span class="line"></span><br><span class="line">&gt;-- 4. 查询入学日期</span><br><span class="line">&gt;select id,name,age,sex,address,math,english,hire_date from stu where hire_date between &#39;1998-09-01&#39; and &#39;1999-09-01&#39;;</span><br><span class="line"></span><br><span class="line">&gt;-- 5. 查询年龄等于20岁的学员信息</span><br><span class="line">&gt;select * from stu where age &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&gt;-- 6. 查询年龄不等于20岁的学员信息</span><br><span class="line">&gt;select * from stu where age !&#x3D; 20;</span><br><span class="line">&gt;select * from stu where age &lt;&gt; 20;</span><br><span class="line"></span><br><span class="line">&gt;-- 7. 查询20岁，45岁，55岁的学员信息</span><br><span class="line">&gt;select * from stu where age &#x3D; 20 or age &#x3D; 45 or age &#x3D; 55;</span><br><span class="line">&gt;select * from stu where age in (20,45,55);</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="1-5-3-糊查询"><a href="#1-5-3-糊查询" class="headerlink" title="1.5.3 糊查询"></a>1.5.3 糊查询</h5><blockquote>
<p>使用LIKE关键字，使用通配符进行占位</p>
<ul>
<li>_：表示单个字符</li>
<li>%：表示任意字符</li>
</ul>
<ul>
<li>查询姓’马’的学员信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 查询姓&#39;马&#39;的学员信息</span><br><span class="line">&gt;select * from stu where name like &#39;马%&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询姓第二个字是’化’的学员信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 查询姓第二个字是&#39;化&#39;的学员信息</span><br><span class="line">&gt;select * from stu where name like &#39;_化%&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询名字中包含’徳’的学员信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 查询名字中包含&#39;徳&#39;的学员信息</span><br><span class="line">&gt;select * from stu where name like &#39;%德%&#39;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="1-5-4-排序查询"><a href="#1-5-4-排序查询" class="headerlink" title="1.5.4 排序查询"></a>1.5.4 排序查询</h5><blockquote>
<p>排序方式：</p>
<ul>
<li>ASC 升序排列</li>
<li>DESC 降序排列</li>
</ul>
<p><strong>按照升序排列:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 1. 年龄按照升序排列</span><br><span class="line">&gt;select * from stu order by age ASC;</span><br></pre></td></tr></table></figure>

<p><strong>数学成绩按照降序排列：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 2. 数学成绩按照降序排列</span><br><span class="line">&gt;select * from stu order by math DEsc;</span><br></pre></td></tr></table></figure>

<p><strong>数学成绩按照降排列,如果数学成绩一样 英语成绩按照降序排列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;-- 4. 数学成绩按照降排列,如果数学成绩一样 英语成绩按照降序排列</span><br><span class="line">&gt;SELECT * FROM stu ORDER BY math DESC , english DESC;</span><br></pre></td></tr></table></figure>

<p>注意：如果第一个条件一样，执行第二个条件</p>
</blockquote>
<h5 id="1-5-5-聚合查询"><a href="#1-5-5-聚合查询" class="headerlink" title="1.5.5 聚合查询"></a>1.5.5 聚合查询</h5><blockquote>
<p>函数分类：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count(列名)</td>
<td>统计数量（一般选用不为null的列）</td>
</tr>
<tr>
<td>max(列名)</td>
<td>最大值</td>
</tr>
<tr>
<td>min(列名)</td>
<td>最小值</td>
</tr>
<tr>
<td>sum(列名)</td>
<td>求和</td>
</tr>
<tr>
<td>avg(列名)</td>
<td>平均值</td>
</tr>
</tbody></table>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT 聚合函数名（列名） FROM 表名；</span><br></pre></td></tr></table></figure>

<p>​    ==null值不参与所有聚合函数运算==</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&#x2F;*</span><br><span class="line">&gt;取值：</span><br><span class="line">主键</span><br><span class="line">*</span><br><span class="line">&gt;*&#x2F;</span><br><span class="line"></span><br><span class="line">&gt;-- 1. 统计班级一共有多少学生</span><br><span class="line">&gt;select count(*) from stu;</span><br><span class="line"></span><br><span class="line">&gt;-- 2. 查询数学成绩的最高分</span><br><span class="line">&gt;select max(math) from stu;</span><br><span class="line"></span><br><span class="line">&gt;-- 3. 查询数学成绩的最低分</span><br><span class="line">&gt;select min(math) from stu;</span><br><span class="line"></span><br><span class="line">&gt;-- 4. 查询数学成绩的总分</span><br><span class="line">&gt;select sum(math) from stu;</span><br><span class="line"></span><br><span class="line">&gt;-- 5. 查询数学成绩的平均分</span><br><span class="line">&gt;select avg(math) from stu;</span><br><span class="line"></span><br><span class="line">&gt;-- 6. 查询英语成绩的最低分</span><br><span class="line">&gt;select min(english) from stu;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>file和IO流</title>
    <url>/2021/10/06/DAY20_file%E5%92%8CIO%E6%B5%81/</url>
    <content><![CDATA[<h3 id="35-file的概述"><a href="#35-file的概述" class="headerlink" title="35. file的概述"></a>35. file的概述</h3><h4 id="35-1-file的基本概念"><a href="#35-1-file的基本概念" class="headerlink" title="35.1 file的基本概念"></a>35.1 file的基本概念</h4><blockquote>
<p>表示要读写的文件在哪里，也可以对文件进行创建，删除等操作</p>
<p>概念：是文件和目录路径名的抽象表达</p>
<ul>
<li>文件和目录可以通过File封装成对象</li>
<li>File封装的对象仅仅是一个路径名。他可以是存在的，也可以是不存在的</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>File(String pathname)</td>
<td>将给定的路径字符串转换成抽象路径名来创建File实例</td>
</tr>
<tr>
<td>File(String parent,String child)</td>
<td>用父路径名字符串和子路径创建File实例</td>
</tr>
<tr>
<td>File(File parent,String child)</td>
<td>用户父类抽象路径名和子类路径字符串创建</td>
</tr>
</tbody></table>
<p><strong>File的路径划分</strong></p>
<ul>
<li>绝对路径<ul>
<li>盘符下的路径</li>
</ul>
</li>
<li>相对路径<ul>
<li>相对当前项目下的路径</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="35-1-1-File类创建功能"><a href="#35-1-1-File类创建功能" class="headerlink" title="35.1.1 File类创建功能"></a>35.1.1 File类创建功能</h5><blockquote>
<p>基本创建功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>注意点</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean createFile()</td>
<td>创建一个新的空的文件夹</td>
<td>存在-失败-false；不存在-成功-true；只能创建文件</td>
</tr>
<tr>
<td>public boolean mkdir()</td>
<td>创建一个单级文件夹</td>
<td>只能创建单级文件夹</td>
</tr>
<tr>
<td>public boolean mkdirs()</td>
<td>创建一个多级文件夹</td>
<td>可以创建单级或者多级文件夹；只能创建文件夹</td>
</tr>
</tbody></table>
</blockquote>
<h5 id="35-1-2-File的删除功能"><a href="#35-1-2-File的删除功能" class="headerlink" title="35.1.2 File的删除功能"></a>35.1.2 File的删除功能</h5><blockquote>
<p>删除功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>注意点</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean delete()</td>
<td>删除由此抽象路径名表示的文件或者目录</td>
<td>不会到回收站；只能删除文件或空文件夹</td>
</tr>
</tbody></table>
</blockquote>
<h5 id="35-1-3-File的判断和获取功能"><a href="#35-1-3-File的判断和获取功能" class="headerlink" title="35.1.3 File的判断和获取功能"></a>35.1.3 File的判断和获取功能</h5><blockquote>
<p>判断和获取功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean isDirectroy()</td>
<td>测试抽象路径表示File是否为目录</td>
</tr>
<tr>
<td>public boolean isFile()</td>
<td>测试抽象路径表示File是否为文件</td>
</tr>
<tr>
<td>public boolean exists()</td>
<td>测试抽象路径表示File是否存在</td>
</tr>
<tr>
<td>public String getName()</td>
<td>返回抽象路径表示的文件或目录的名称</td>
</tr>
<tr>
<td>public File[]  listFiles()</td>
<td>返回路径下表示的目录中的文件和目录的File对象数组</td>
</tr>
</tbody></table>
<p>listFiles注意事项</p>
<ul>
<li>当调用者不存在，返回null</li>
<li>作为文件时，返回null</li>
<li>空文件夹，返回长度为0的数组</li>
<li>文件夹会将隐藏文件夹也返回</li>
<li>文件夹有访问权限，返回null</li>
</ul>
</blockquote>
<h5 id="35-1-4-File的遍历"><a href="#35-1-4-File的遍历" class="headerlink" title="35.1.4 File的遍历"></a>35.1.4 File的遍历</h5><blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//        创建文件夹</span></span><br><span class="line">       String path = <span class="keyword">new</span> String(<span class="string">"..\\..\\HEIMA\\aa\\ddd\\cc"</span>);</span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">&gt;<span class="comment">//        创建对应文件，确保文件夹必须存在</span></span><br><span class="line">       <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">           file.mkdirs();</span><br><span class="line">           System.out.println(<span class="string">"heiheihei"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"hahahaha"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&gt;<span class="comment">//        创建文件</span></span><br><span class="line">       File file1 = <span class="keyword">new</span> File(file, <span class="string">"aaa.txt"</span>);</span><br><span class="line">       <span class="keyword">if</span> (!file1.isFile()) &#123;</span><br><span class="line">           <span class="keyword">boolean</span> newFile = file1.createNewFile();</span><br><span class="line">           System.out.println(<span class="string">"heiheihei"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"hahahaha"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       File file2 = <span class="keyword">new</span> File(<span class="string">"..\\..\\HEIMA\\aa"</span>);</span><br><span class="line">&gt;<span class="comment">//        遍历删除</span></span><br><span class="line">        Deleter(file2);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Deleter</span><span class="params">(File file2)</span> </span>&#123;</span><br><span class="line">       File[] f1 = file2.listFiles();</span><br><span class="line">       <span class="keyword">for</span> (File f3 : f1) &#123;</span><br><span class="line">           <span class="keyword">if</span> (f3.isFile()) &#123;</span><br><span class="line">               <span class="keyword">boolean</span> delete = f3.delete();</span><br><span class="line">&gt;<span class="comment">//                System.out.println(delete);</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               Deleter(f3);</span><br><span class="line">&gt;<span class="comment">//                System.out.println(d1);</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       file2.delete();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="36-IO流"><a href="#36-IO流" class="headerlink" title="36. IO流"></a>36. IO流</h3><h4 id="36-1-IO的基础"><a href="#36-1-IO的基础" class="headerlink" title="36.1 IO的基础"></a>36.1 IO的基础</h4><h5 id="36-1-1-IO的基础概念"><a href="#36-1-1-IO的基础概念" class="headerlink" title="36.1.1 IO的基础概念"></a>36.1.1 IO的基础概念</h5><blockquote>
<p>概念：对文件的读写</p>
<ul>
<li>数据写入文件，实现数据永久存储</li>
<li>读取存储的文件</li>
</ul>
<p>IO</p>
<p>I：表示input，输入，是数据从硬盘进内存的过程，称之为读</p>
<p>O：表示output，输出，是数据从内存到硬盘的过程，称之为写</p>
<p>IO的区分</p>
<p>IO体系</p>
<p>数据类型分类：</p>
<ul>
<li>字节流（不分类型）<ul>
<li>输入流：InputStream</li>
<li>输出流：OutputStream</li>
</ul>
</li>
<li>字符流（只能读取文本文件）<ul>
<li>Reader</li>
<li>Writer</li>
</ul>
</li>
</ul>
<p>按流向分类</p>
<ul>
<li>输入</li>
<li>输出</li>
</ul>
<p>纯文本文件：用记事本打开能看的懂的</p>
</blockquote>
<h4 id="36-2-IO的读写规则"><a href="#36-2-IO的读写规则" class="headerlink" title="36.2 IO的读写规则"></a>36.2 IO的读写规则</h4><blockquote>
<ol>
<li><p>创建字节流输出对象</p>
<ul>
<li><p>如果文件不存在，会自动创建</p>
</li>
<li><p>如果文件存在会把文件清空</p>
</li>
<li><pre><code>//         创建输出流
//            第二个参数，true：不会覆盖，继续追加；不修改默认是false
FileOutputStream fos = new FileOutputStream(&quot;E:\\HEIMA\\HEIMA\\aaa.txt&quot;,true);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;2. 写数据</span><br><span class="line"></span><br><span class="line">  - 写出一个整数，实际上写出是整数在码表上面的数值</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;java</span><br><span class="line">    &#x2F;&#x2F;        写数据</span><br><span class="line">    fos.write(&quot;ABC&quot;.getBytes());&#x2F;&#x2F;如果是int，输入SCALL码表值</span><br></pre></td></tr></table></figure></code></pre></li>
<li><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void write(int b)</td>
<td>把指定的字节写入子文件输出流，一次写一个字节数据</td>
</tr>
<tr>
<td>void write(byte[]  b)</td>
<td>将b.length字节从指定的字节数组写入此文件输出流，一次写一个字节数据数组</td>
</tr>
<tr>
<td>void write(byte[]  b,int off,int len)</td>
<td>将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流，一次写一个自己饿饿数据的部分数据</td>
</tr>
</tbody></table>
</li>
<li><p>换行符号：\r\n</p>
</li>
</ul>
</li>
<li><p>释放资源，关闭流</p>
<ul>
<li><p>使用IO流必须写关闭</p>
</li>
<li><pre><code class="java"><span class="comment">//        关闭流</span>
fos.close();
&lt;!--￼<span class="number">2</span>--&gt;</code></pre>
</li>
</ul>
</li>
</ol>
</blockquote>
<h4 id="36-4-字节流遍历输出所有字节"><a href="#36-4-字节流遍历输出所有字节" class="headerlink" title="36.4 字节流遍历输出所有字节"></a>36.4 字节流遍历输出所有字节</h4><blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//如果文件不存在，报异常</span></span><br><span class="line">       FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\HEIMA\\HEIMA\\aaa.txt"</span>);</span><br><span class="line">&gt;<span class="comment">//        方式一</span></span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> ( (b =fos.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.print((<span class="keyword">char</span>) b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println( );</span><br><span class="line">       System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">       </span><br><span class="line">&gt;<span class="comment">//        方式二</span></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">           <span class="keyword">int</span> read1 = fos.read();</span><br><span class="line">           <span class="keyword">if</span>(read1 == -<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.print((<span class="keyword">char</span>) read1);</span><br><span class="line">       &#125;</span><br><span class="line">       fos.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="36-4-IO的文件复制操作"><a href="#36-4-IO的文件复制操作" class="headerlink" title="36.4 IO的文件复制操作"></a>36.4 IO的文件复制操作</h4><blockquote>
<ul>
<li>void write(int b)  效率很低   逐一复制</li>
<li>返回的是读入缓冲区的总字节数，也就是实际的读取字节个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//       创建字节输入流</span></span><br><span class="line">      FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\HEIMA\\HEIMA\\aaa.txt"</span>);</span><br><span class="line">&gt;<span class="comment">//        创建字节输出流</span></span><br><span class="line">      FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\HEIMA\\HEIMA\\aaa-副本.txt"</span>);</span><br><span class="line">&gt;<span class="comment">//        遍历复制</span></span><br><span class="line">      <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((b = fis.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">          fos.write(b);</span><br><span class="line">      &#125;</span><br><span class="line">&gt;<span class="comment">//        关闭字节流</span></span><br><span class="line">      fis.close();</span><br><span class="line">      fos.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>字节流可以创建字节数组，可以一次读写多个数据</p>
</li>
<li><pre><code class="java"><span class="comment">//        创建字节数组批量写入</span>
     <span class="keyword">long</span> start = System.currentTimeMillis();
      <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];
      <span class="keyword">int</span> len;
      <span class="keyword">while</span>((len = fis.read()) != -<span class="number">1</span>){
          fos.write(bytes,<span class="number">0</span>,len);
      }
      <span class="keyword">long</span> end = System.currentTimeMillis();
      System.out.println(end - start);
&lt;!--￼<span class="number">5</span>--&gt;
<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{
    FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\HEIMA\\HEIMA\\aaa.txt"</span>);
    <span class="comment">// 遍历的元素，会覆盖旧的元素</span>
    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];
    <span class="comment">//长度，控制输出的长度，避免出现多出的输出元素</span>
    <span class="keyword">int</span> len;   
    <span class="keyword">while</span> ((len = fos.read(bytes)) != -<span class="number">1</span>) {
        System.out.println(Arrays.toString(bytes));
    }
    fos.close();
}
&lt;!--￼<span class="number">6</span>--&gt;</code></pre>
</li>
</ul>
</blockquote>
<h5 id="36-7-3-关流的两种方式"><a href="#36-7-3-关流的两种方式" class="headerlink" title="36.7.3 关流的两种方式"></a>36.7.3 关流的两种方式</h5><blockquote>
<table>
<thead>
<tr>
<th>说明</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>flush()</td>
<td align="center">刷新流，还可以在该路径读写数据</td>
</tr>
<tr>
<td>close()</td>
<td align="center">关闭流，释放资源，但是在关闭之前会先刷新流，一旦关闭，就不能再写数据</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 注意事项：</span></span><br><span class="line"><span class="comment">      * 1.文件不存在，会生成，保证父级路径存在</span></span><br><span class="line"><span class="comment">      * 2.如果文件存在，会清空文件内容</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="string">"src\\Day21\\test.txt"</span>);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//      写的是字符串</span></span><br><span class="line">      String line = <span class="string">"程序员"</span>;</span><br><span class="line">      fileWriter.write(line);</span><br><span class="line">      fileWriter.write(line,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">      fileWriter.write(<span class="string">"\r\n"</span>);</span><br><span class="line">&gt;<span class="comment">//        结束必须关流</span></span><br><span class="line">      fileWriter.close();  <span class="comment">// 之后不能再写数据，自带flsuh的功能</span></span><br><span class="line">      fileWriter.flush();	<span class="comment">// 还能再写数据，把流中的数据，直接写入文件中</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="36-7-4-字符流的读操作"><a href="#36-7-4-字符流的读操作" class="headerlink" title="36.7.4 字符流的读操作"></a>36.7.4 字符流的读操作</h5><blockquote>
<p>和字节流没有多大差别</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"src\\Day21\\test.txt"</span>);</span><br><span class="line">       <span class="comment">// 单个字符输出</span></span><br><span class="line">       <span class="keyword">int</span> chars;</span><br><span class="line">       <span class="keyword">while</span> ((chars = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.print((<span class="keyword">char</span>) chars);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建数组形式输出</span></span><br><span class="line">       <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> len;</span><br><span class="line">       <span class="comment">// read方法还是读取，但是一次读取多个字符</span></span><br><span class="line">       <span class="comment">//把读到的字符存入到chs数组中</span></span><br><span class="line">       <span class="comment">//返回值;表示本次读到了多少个字符</span></span><br><span class="line">       <span class="keyword">while</span> ((len = fileReader.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.print((<span class="keyword">char</span>) len);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       fileReader.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="36-8-字符缓冲流"><a href="#36-8-字符缓冲流" class="headerlink" title="36.8 字符缓冲流"></a>36.8 字符缓冲流</h4><blockquote>
<p>字符缓冲流</p>
<ul>
<li>BufferedReader</li>
<li>BufferedWriter</li>
</ul>
<p>特有方法：</p>
<ul>
<li>void newline()    换行</li>
<li>void readLine()   读取一整行，当读不到数据返回为null，不会读取回车换行符</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//字符缓冲流</span></span><br><span class="line">       BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"src\\Day21\\test.txt"</span>));</span><br><span class="line"></span><br><span class="line">       bw.write(<span class="number">97</span>);</span><br><span class="line">       <span class="comment">//跨平台换行</span></span><br><span class="line">       bw.newLine();</span><br><span class="line">       bw.write(<span class="string">"盒马"</span>);</span><br><span class="line">       <span class="comment">//闭流</span></span><br><span class="line">       bw.close();</span><br><span class="line">       BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"src\\Day21\\test.txt"</span>));</span><br><span class="line">       <span class="comment">//查看整行</span></span><br><span class="line">       String len;</span><br><span class="line">       <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">while</span> ((len = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           System.out.println(len);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//关流</span></span><br><span class="line">       br.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="36-8-1-字符缓冲流读取排序后写入"><a href="#36-8-1-字符缓冲流读取排序后写入" class="headerlink" title="36.8.1 字符缓冲流读取排序后写入"></a>36.8.1 字符缓冲流读取排序后写入</h5><blockquote>
<p>使用字符缓冲流读取文件中的数据，排序后再次写在本地文件</p>
<p>示例：数组和集合的两种排序方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"src\\Day21\\test.txt"</span>));</span><br><span class="line">       <span class="comment">//查看整行</span></span><br><span class="line">       String line = br.readLine();</span><br><span class="line">       <span class="comment">//关流</span></span><br><span class="line">       br.close();</span><br><span class="line">       <span class="comment">//空格切割</span></span><br><span class="line">       String[] split = line.split(<span class="string">" "</span>);</span><br><span class="line">       <span class="comment">//存入数组</span></span><br><span class="line">       <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[split.length];</span><br><span class="line">       <span class="comment">//存入集合</span></span><br><span class="line">       TreeSet&lt;Integer&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">       <span class="comment">//遍历  字符串转换整数类型</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">           <span class="keyword">int</span> num = Integer.parseInt(split[i]);</span><br><span class="line">           arr[i] = num;</span><br><span class="line">           treeSet.add(num);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//数组排序 Arrays</span></span><br><span class="line">       Arrays.sort(arr);</span><br><span class="line">       System.out.println(Arrays.toString(arr));</span><br><span class="line">       <span class="comment">//字符缓冲流   请勿将写入书写在第一行，在使用的时候创建即可</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"src\\Day21\\test.txt"</span>));</span><br><span class="line">       <span class="comment">//遍历数组写入本地文件</span></span><br><span class="line">       <span class="comment">/*for (int i : arr) &#123;</span></span><br><span class="line"><span class="comment">           bw.write(i + " ");</span></span><br><span class="line"><span class="comment">           bw.flush();</span></span><br><span class="line"><span class="comment">       &#125;*/</span></span><br><span class="line">       <span class="comment">//遍历集合写入本地文件</span></span><br><span class="line">       <span class="keyword">for</span> (Integer integer : treeSet) &#123;</span><br><span class="line">           bw.write(integer + <span class="string">" "</span>);</span><br><span class="line">           bw.flush();</span><br><span class="line">       &#125;</span><br><span class="line">       bw.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="37-转换流"><a href="#37-转换流" class="headerlink" title="37. 转换流"></a>37. 转换流</h3><h4 id="37-1-转换流的基本概念"><a href="#37-1-转换流的基本概念" class="headerlink" title="37.1 转换流的基本概念"></a>37.1 转换流的基本概念</h4><h5 id="37-1-1-转换流的分类"><a href="#37-1-1-转换流的分类" class="headerlink" title="37.1.1 转换流的分类"></a>37.1.1 转换流的分类</h5><blockquote>
<p>输出流</p>
<ul>
<li>OutputStreamWirter</li>
</ul>
<p>输入流</p>
<ul>
<li>IntputStreamReader</li>
</ul>
</blockquote>
<h5 id="37-1-2-转换流的作用"><a href="#37-1-2-转换流的作用" class="headerlink" title="37.1.2 转换流的作用"></a>37.1.2 转换流的作用</h5><blockquote>
<ul>
<li>指定编码表读写数据</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;InputStreamReader isr &#x3D; new InputStreamReader(new FileInputStream(&quot;src\\Day21\\test.txt&quot;),&quot;GBK&quot;);</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="38-对象操作流"><a href="#38-对象操作流" class="headerlink" title="38. 对象操作流"></a>38. 对象操作流</h3><h4 id="38-1-对象操作流的作用"><a href="#38-1-对象操作流的作用" class="headerlink" title="38.1 对象操作流的作用"></a>38.1 对象操作流的作用</h4><blockquote>
<p>概念：可以把对象以字节的形式写到本地文件。直接打开文件，是读不懂的，需要再次用对象操作流读到内存中</p>
<p>输入流（序列化流）</p>
<ul>
<li>ObjectIntputStream          把对象写到本地文件中，或者在网络中传输对象</li>
</ul>
<p>输出流（反序列化流）</p>
<ul>
<li>ObjectOutputStream        把写到文件中的对象读到内存中，或者接受网络中传输的对象</li>
</ul>
<p>示例;</p>
<figure class="highlight java"><figcaption><span>232</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//        method();</span></span><br><span class="line">       method01();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//反序列化</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\Day21\\test.txt"</span>));</span><br><span class="line">       user o = (user) ois.readObject();</span><br><span class="line">       System.out.println(o);</span><br><span class="line">       ois.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//序列化</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       user us = <span class="keyword">new</span> user(<span class="string">"zhaans"</span>, <span class="string">"mima"</span>);</span><br><span class="line">       ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"src\\Day21\\test.txt"</span>));</span><br><span class="line">       oos.writeObject(us);</span><br><span class="line">       oos.close();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//Serializable称之为标记性接口，里面没有任何的抽象方法</span></span><br><span class="line">&gt;<span class="comment">//实现了接口，说明这个对象可以被序列化</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">user</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   <span class="comment">//serialVersionUID 序列号</span></span><br><span class="line">   <span class="comment">// 如果没有定义，虚拟机会自动生成一个序列号</span></span><br><span class="line">   <span class="comment">// 修改类中信息，虚拟机会再次计算</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//这个不会被序列化</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> String password;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"user&#123;"</span> +</span><br><span class="line">               <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">'&#125;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> password;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.password = password;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">user</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.password = password;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>配置文件和枚举、注解</title>
    <url>/2021/10/15/DAY24_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h3 id="45-XML"><a href="#45-XML" class="headerlink" title="45. XML"></a>45. XML</h3><h4 id="45-1-XML的概述"><a href="#45-1-XML的概述" class="headerlink" title="45.1 XML的概述"></a>45.1 XML的概述</h4><blockquote>
<p><strong>1.xml作为配置文件的优势</strong></p>
<ul>
<li>可读性好</li>
<li>可维护性高</li>
</ul>
<p><strong>2.什么是XML?</strong></p>
<p>XML的全称为(Extensible Markup Language)，是一种可扩展的标记语言<br>标记语言: 通过标签来描述数据的一门语言(标签有时我们也将其称之为元素)<br>可扩展：标签的名字是可以自定义的</p>
<p>XML文件是由很多标签组成的,而标签名是可以自定义的</p>
<p>3.作用</p>
<ul>
<li>​    用于进行数据存储和数据交换</li>
<li>​    作为软件的配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//格式抬头</span></span><br><span class="line">&gt;&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&gt;&lt;web-app &gt; <span class="comment">//首尾不能缺</span></span><br><span class="line"> &lt;welcome-file-list&gt;</span><br><span class="line">   &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">   &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">   &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">   &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</span><br><span class="line">   &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</span><br><span class="line">   &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</span><br><span class="line"> &lt;/welcome-file-list&gt;</span><br><span class="line">&gt;&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="45-2-XMl的定义规则"><a href="#45-2-XMl的定义规则" class="headerlink" title="45.2 XMl的定义规则"></a>45.2 XMl的定义规则</h4><blockquote>
<ul>
<li>标签必须有关闭标签</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;&lt;student&gt; &lt;/student&gt;</span><br><span class="line"> 前边的是开始标签，后边的是结束标签</span><br><span class="line">&gt;&lt;address/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>XML标签对大小写敏感</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt;&lt;Student&gt;这是错误的&lt;/student&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>标签中可以定义属性,属性和标签名空格隔开,属性值必须用引号引起来</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt;&lt;student id="1"&gt; &lt;/student&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>标签需要正确的嵌套</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt;这是正确的: &lt;student id="1"&gt; &lt;name&gt;张三&lt;/name&gt; &lt;/student&gt;</span><br><span class="line">&gt;这是错误的: &lt;student id="1"&gt;&lt;name&gt;张三&lt;/student&gt;&lt;/name&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="45-3-xml语法规则"><a href="#45-3-xml语法规则" class="headerlink" title="45.3 xml语法规则"></a>45.3 xml语法规则</h4><blockquote>
<p>XML文件中可以存在以下特殊字符</p>
<ul>
<li><pre><code class="java">&amp;lt; &lt; 小于
&amp;gt; &gt; 大于
&amp;amp; &amp; 和号
&amp;apos; <span class="string">' 单引号</span>
<span class="string">&amp;quot; " 引号</span>
<span class="string"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></span>
<span class="string"></span></code></pre>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;XML文件中可以存在CDATA区</span><br><span class="line"></span><br><span class="line">&gt;- &#96;&#96;&#96;java</span><br><span class="line"> &#x2F;&#x2F;中括号里可以输入任意内容</span><br><span class="line"> &lt;![CDATA[ …内容… ]]&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;文档声明必须是第一行第一列</span><br><span class="line"></span><br><span class="line">&gt;- &#96;&#96;&#96;java</span><br><span class="line">&gt;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; standalone&#x3D;&quot;yes”?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;- version：该属性是必须存在的</span><br><span class="line">&gt;encoding：该属性不是必须的</span><br><span class="line"></span><br><span class="line">&gt;​	打开当前xml文件的时候应该是使用什么字符编码表(一般取值都是UTF-8)</span><br><span class="line"></span><br><span class="line">&gt;standalone: 该属性不是必须的，描述XML文件是否依赖其他的xml文件，取值为yes&#x2F;no</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="45-4-xml解析"><a href="#45-4-xml解析" class="headerlink" title="45.4 xml解析"></a>45.4 xml解析</h4><blockquote>
<p>XML解析:从xml中获取到数据</p>
<p>数据结构：</p>
<p>Node对象：Dom结构中最基本的对象，代表每一个标签节点</p>
<ul>
<li>Element对象：所有的标签</li>
<li>Attrubute对象：所有的属性</li>
<li>Text对象：所有的文本内容</li>
</ul>
</blockquote>
<h4 id="45-5-XML的使用"><a href="#45-5-XML的使用" class="headerlink" title="45.5 XML的使用"></a>45.5 XML的使用</h4><blockquote>
<p>需求</p>
<ul>
<li>解析提供好的xml文件</li>
<li>将解析到的数据封装到学生对象中</li>
<li>并将学生对象存储到ArrayList集合中</li>
<li>遍历集合</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&gt;&lt;!--注释的内容--&gt;</span><br><span class="line">&gt;&lt;!--本xml文件用来描述多个学生信息--&gt;</span><br><span class="line">&gt;&lt;students&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--第一个学生信息--&gt;</span><br><span class="line">   &lt;student id=<span class="string">"1"</span>&gt;</span><br><span class="line">       &lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">       &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">   &lt;/student&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--第二个学生信息--&gt;</span><br><span class="line">   &lt;student id=<span class="string">"2"</span>&gt;</span><br><span class="line">       &lt;name&gt;李四&lt;/name&gt;</span><br><span class="line">       &lt;age&gt;24&lt;/age&gt;</span><br><span class="line">   &lt;/student&gt;</span><br><span class="line"></span><br><span class="line">&gt;&lt;/students&gt;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 上边是已经准备好的student.xml文件</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">               <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", age="</span> + age +</span><br><span class="line">               <span class="string">'&#125;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 利用dom4j解析xml文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlParse</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">       <span class="comment">//1.获取一个解析器对象</span></span><br><span class="line">       SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">       <span class="comment">//2.利用解析器把xml文件加载到内存中,并返回一个文档对象</span></span><br><span class="line">       Document document = saxReader.read(<span class="keyword">new</span> File(<span class="string">"myxml\\xml\\student.xml"</span>));</span><br><span class="line">       <span class="comment">//3.获取到根标签</span></span><br><span class="line">       Element rootElement = document.getRootElement();</span><br><span class="line">       <span class="comment">//4.通过根标签来获取student标签</span></span><br><span class="line">       <span class="comment">//elements():可以获取调用者所有的子标签.会把这些子标签放到一个集合中返回.</span></span><br><span class="line">       <span class="comment">//elements("标签名"):可以获取调用者所有的指定的子标签,会把这些子标签放到一个集合中并返回</span></span><br><span class="line">       <span class="comment">//List list = rootElement.elements();</span></span><br><span class="line">       List&lt;Element&gt; studentElements = rootElement.elements(<span class="string">"student"</span>);</span><br><span class="line">       <span class="comment">//System.out.println(list.size());</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//用来装学生对象</span></span><br><span class="line">       ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.遍历集合,得到每一个student标签</span></span><br><span class="line">       <span class="keyword">for</span> (Element element : studentElements) &#123;</span><br><span class="line">           <span class="comment">//element依次表示每一个student标签</span></span><br><span class="line"> </span><br><span class="line">           <span class="comment">//获取id这个属性</span></span><br><span class="line">           Attribute attribute = element.attribute(<span class="string">"id"</span>);</span><br><span class="line">           <span class="comment">//获取id的属性值</span></span><br><span class="line">           String id = attribute.getValue();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取name标签</span></span><br><span class="line">           <span class="comment">//element("标签名"):获取调用者指定的子标签</span></span><br><span class="line">           Element nameElement = element.element(<span class="string">"name"</span>);</span><br><span class="line">           <span class="comment">//获取这个标签的标签体内容</span></span><br><span class="line">           String name = nameElement.getText();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取age标签</span></span><br><span class="line">           Element ageElement = element.element(<span class="string">"age"</span>);</span><br><span class="line">           <span class="comment">//获取age标签的标签体内容</span></span><br><span class="line">           String age = ageElement.getText();</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//            System.out.println(id);</span></span><br><span class="line">&gt;<span class="comment">//            System.out.println(name);</span></span><br><span class="line">&gt;<span class="comment">//            System.out.println(age);</span></span><br><span class="line"></span><br><span class="line">           Student s = <span class="keyword">new</span> Student(id,name,Integer.parseInt(age));</span><br><span class="line">           list.add(s);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//遍历操作</span></span><br><span class="line">       <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">           System.out.println(student);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="45-6-DTD是XML约束"><a href="#45-6-DTD是XML约束" class="headerlink" title="45.6 DTD是XML约束"></a>45.6 DTD是XML约束</h4><blockquote>
<p>XML约束:限定xml文件中可使用的标签以及属性</p>
<p>约束的分类:</p>
<ul>
<li>DTD</li>
<li>schema</li>
</ul>
<p>简单元素：没有子元素。<br>复杂元素：有子元素的元素</p>
<p>DTD的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--&lt;!ELEMENT&gt; 可以定义元素--&gt;</span><br><span class="line"> &lt;!<span class="function">ELEMENT <span class="title">persong</span> <span class="params">(person)</span>&gt;</span></span><br><span class="line"><span class="function"> &lt;!--限制person标签下只能有name和age--&gt;</span></span><br><span class="line"><span class="function"> &lt;!ELEMENT <span class="title">person</span> <span class="params">(name,age)</span>&gt;</span></span><br><span class="line"><span class="function"> &lt;!ELEMENT <span class="title">name</span> <span class="params">(#PCDATA)</span>&gt;</span></span><br><span class="line"><span class="function"> &lt;!ELEMENT <span class="title">age</span> <span class="params">(#PCDATA)</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在xml中导入：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&gt;&lt;!--导入本地dtd文件--&gt;</span><br><span class="line">&gt;&lt;!--！DOCTYPE 根元素名称 SYSTEM <span class="string">'dtd文件路径'</span>--&gt;</span><br><span class="line">&gt;&lt;!--！DOCTYPE 根元素名称 dtd文件名字 <span class="string">'dtd的url'</span>--&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE persong SYSTEM <span class="string">'aa.dtd'</span>&gt;</span><br><span class="line">&gt;&lt;persong&gt;</span><br><span class="line">   &lt;person&gt;</span><br><span class="line">       &lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">       &lt;age&gt;19&lt;/age&gt;</span><br><span class="line">   &lt;/person&gt;</span><br><span class="line">&gt;&lt;/persong&gt;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 利用dom4j解析xml文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlParse</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">       <span class="comment">//1.获取一个解析器对象</span></span><br><span class="line">       SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">       <span class="comment">//2.利用解析器把xml文件加载到内存中,并返回一个文档对象</span></span><br><span class="line">       Document document = saxReader.read(<span class="keyword">new</span> File(<span class="string">"myxml\\xml\\student.xml"</span>));</span><br><span class="line">       <span class="comment">//3.获取到根标签</span></span><br><span class="line">       Element rootElement = document.getRootElement();</span><br><span class="line">       <span class="comment">//4.通过根标签来获取student标签</span></span><br><span class="line">       <span class="comment">//elements():可以获取调用者所有的子标签.会把这些子标签放到一个集合中返回.</span></span><br><span class="line">       <span class="comment">//elements("标签名"):可以获取调用者所有的指定的子标签,会把这些子标签放到一个集合中并返回</span></span><br><span class="line">       <span class="comment">//List list = rootElement.elements();</span></span><br><span class="line">       List&lt;Element&gt; studentElements = rootElement.elements(<span class="string">"student"</span>);</span><br><span class="line">       <span class="comment">//System.out.println(list.size());</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//用来装学生对象</span></span><br><span class="line">       ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.遍历集合,得到每一个student标签</span></span><br><span class="line">       <span class="keyword">for</span> (Element element : studentElements) &#123;</span><br><span class="line">           <span class="comment">//element依次表示每一个student标签</span></span><br><span class="line"> </span><br><span class="line">           <span class="comment">//获取id这个属性</span></span><br><span class="line">           Attribute attribute = element.attribute(<span class="string">"id"</span>);</span><br><span class="line">           <span class="comment">//获取id的属性值</span></span><br><span class="line">           String id = attribute.getValue();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取name标签</span></span><br><span class="line">           <span class="comment">//element("标签名"):获取调用者指定的子标签</span></span><br><span class="line">           Element nameElement = element.element(<span class="string">"name"</span>);</span><br><span class="line">           <span class="comment">//获取这个标签的标签体内容</span></span><br><span class="line">           String name = nameElement.getText();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取age标签</span></span><br><span class="line">           Element ageElement = element.element(<span class="string">"age"</span>);</span><br><span class="line">           <span class="comment">//获取age标签的标签体内容</span></span><br><span class="line">           String age = ageElement.getText();</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//            System.out.println(id);</span></span><br><span class="line">&gt;<span class="comment">//            System.out.println(name);</span></span><br><span class="line">&gt;<span class="comment">//            System.out.println(age);</span></span><br><span class="line"></span><br><span class="line">           Student s = <span class="keyword">new</span> Student(id,name,Integer.parseInt(age));</span><br><span class="line">           list.add(s);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//遍历操作</span></span><br><span class="line">       <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">           System.out.println(student);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="45-7-DTD的语法规则"><a href="#45-7-DTD的语法规则" class="headerlink" title="45.7 DTD的语法规则"></a>45.7 DTD的语法规则</h4><blockquote>
<p>简单元素：</p>
<ul>
<li><p>EMPTY: 表示标签体为空</p>
</li>
<li><p>ANY: 表示标签体可以为空也可以不为空</p>
</li>
<li><p>PCDATA: 表示该元素的内容部分为字符串</p>
</li>
</ul>
<p>复杂元素：</p>
<ul>
<li>直接写子元素名称. 多个子元素可以使用”,”或者”|”隔开</li>
<li>“,”表示定义子元素的顺序 ; “|”: 表示子元素只能出现任意一个</li>
<li>“?”零次或一次, “+”一次或多次, “*”零次或多次;如果不写则表示出现一次</li>
</ul>
</blockquote>
<h4 id="45-8-schema的概述"><a href="#45-8-schema的概述" class="headerlink" title="45.8 schema的概述"></a>45.8 schema的概述</h4><blockquote>
<ul>
<li><p>步骤</p>
<p>1，在根标签上定义属性xmlns=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a><br>2，通过xmlns引入约束文件的名称空间<br>3，给某一个xmlns属性添加一个标识，用于区分不同的名称空间<br>​    格式为: xmlns:标识=“名称空间地址” ,标识可以是任意的，但是一般取值都是xsi<br>4，通过xsi:schemaLocation指定名称空间所对应的约束文件路径<br>​    格式为：xsi:schemaLocation = “名称空间url 文件路径“</p>
</li>
<li><p>代码实现</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&gt;&lt;persons</span><br><span class="line">   xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">   xmlns=<span class="string">"http://www.itheima.cn/javase"</span></span><br><span class="line">   xsi:schemaLocation=<span class="string">"http://www.itheima.cn/javase person.xsd"</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">   &lt;person id=<span class="string">"001"</span>&gt;</span><br><span class="line">       &lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">       &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">   &lt;/person&gt;</span><br><span class="line">&gt;&lt;/persons&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="46-枚举"><a href="#46-枚举" class="headerlink" title="46.枚举"></a>46.枚举</h3><blockquote>
<p>枚举：限制元素的范围</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">enum</span> s &#123;   </span><br><span class="line">枚举项<span class="number">1</span>,枚举项<span class="number">2</span>,枚举项<span class="number">3</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li><p>所有枚举类都是Enum的子类</p>
</li>
<li><p>我们可以通过”枚举类名.枚举项名称”去访问指定的枚举项</p>
</li>
<li><p>每一个枚举项其实就是该枚举的一个对象</p>
</li>
<li><p>枚举也是一个类，也可以去定义成员变量</p>
</li>
<li><p>枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其他的东西，这个分号就不能省略。建议不要省略</p>
</li>
<li><p>枚举类可以有构造器，但必须是private的，它默认的也是private的。</p>
<p>枚举项的用法比较特殊：枚举(“”);</p>
</li>
<li><p>枚举类也可以有抽象方法，但是枚举项必须重写该方法</p>
</li>
</ul>
</blockquote>
<h4 id="46-1-枚举的方法"><a href="#46-1-枚举的方法" class="headerlink" title="46.1 枚举的方法"></a>46.1 枚举的方法</h4><blockquote>
<p>枚举中的常见方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String name()</td>
<td>获取枚举项的名称</td>
</tr>
<tr>
<td>int ordinal()</td>
<td>返回枚举项在枚举类中的索引值</td>
</tr>
<tr>
<td>int compareTo(E  o)</td>
<td>比较两个枚举项，返回的是索引值的差值</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回枚举常量的名称</td>
</tr>
<tr>
<td>static <T> T  valueOf(Class<T> type,String  name)</td>
<td>获取指定枚举类中的指定名称的枚举值</td>
</tr>
<tr>
<td>values()</td>
<td>获得所有的枚举项</td>
</tr>
</tbody></table>
<p>枚举的应用场景是什么？</p>
<p>  在java中，通常使用枚举表示一组有限的值，实现对输入的约束(例如Month，DayofWeek等)</p>
<p>3.使用枚举有什么好处？</p>
<ul>
<li>枚举可认使代码更易于维护，有助于确保为变量指定合法的值，期望的值</li>
<li>枚举更易于输入，使用枚举赋值，只需要输入枚举名，然后输入.就能将所有值显示出来</li>
<li>枚举使代码更清晰，允许用描述性的名称表示数据，使用时直观方便</li>
</ul>
</blockquote>
<h3 id="47-注解"><a href="#47-注解" class="headerlink" title="47. 注解"></a>47. 注解</h3><h4 id="47-1-注解的概念"><a href="#47-1-注解的概念" class="headerlink" title="47.1 注解的概念"></a>47.1 注解的概念</h4><blockquote>
<p>注解：</p>
<p>对我们的程序进行标注和解释</p>
<p>常见注解？</p>
<table>
<thead>
<tr>
<th>注解名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Override</td>
<td>描述子类重写父类的方法</td>
</tr>
<tr>
<td>@Deprecated</td>
<td>描述方法过时</td>
</tr>
<tr>
<td>@SuppressWarnings</td>
<td>压制警告</td>
</tr>
</tbody></table>
<p>注解和注释的区别</p>
<ul>
<li>注释: 给程序员看的</li>
<li>注解: 给JVM看的</li>
</ul>
</blockquote>
<h4 id="47-2-自定义注解"><a href="#47-2-自定义注解" class="headerlink" title="47.2 自定义注解"></a>47.2 自定义注解</h4><blockquote>
<p>定义注解的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值 ;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>属性类型</p>
<ul>
<li>基本数据类型</li>
<li>String</li>
<li>Class</li>
<li>注解</li>
<li>枚举</li>
<li>以上类型的一维数组</li>
</ul>
<p>属性类型示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="meta">@interface</span> Anno1 &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个基本类型的属性</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">a</span> <span class="params">()</span> <span class="keyword">default</span> 23</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个String类型的属性</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "itheima"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个Class类型的属性</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Class <span class="title">clazz</span><span class="params">()</span> <span class="keyword">default</span> Anno2.class</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个注解类型的属性</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Anno2 <span class="title">anno</span><span class="params">()</span> <span class="keyword">default</span> @Anno2</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个枚举类型的属性</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Season <span class="title">season</span><span class="params">()</span> <span class="keyword">default</span> Season.SPRING</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//以上类型的一维数组</span></span><br><span class="line">   <span class="comment">//int数组</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] arr() <span class="keyword">default</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//枚举数组</span></span><br><span class="line">   <span class="keyword">public</span> Season[] seasons() <span class="keyword">default</span> &#123;Season.SPRING,Season.SUMMER&#125;;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<p>自定义注解示例：</p>
<p>使用反射：</p>
<p>注解使用条件：</p>
<ul>
<li>是public</li>
<li>不能有返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//表示Test这个注解的存活时间</span></span><br><span class="line">&gt;<span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">package</span> com.itheima.myanno3;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//没有使用Test注解</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"UseTest....show...."</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用Test注解</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"UseTest....method...."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//没有使用Test注解</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"UseTest....function...."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">       <span class="comment">//1.通过反射获取UseTest类的字节码文件对象</span></span><br><span class="line">       Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.itheima.myanno3.UseTest"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       UseTest useTest = (UseTest) clazz.newInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.通过反射获取这个类里面所有的方法对象</span></span><br><span class="line">       Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.遍历数组，得到每一个方法对象</span></span><br><span class="line">       <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">           <span class="comment">//method依次表示每一个方法对象。</span></span><br><span class="line">           <span class="comment">//isAnnotationPresent​(Class&lt;? extends Annotation&gt; annotationClass)</span></span><br><span class="line">           <span class="comment">//判断当前方法上是否有指定的注解。</span></span><br><span class="line">           <span class="comment">//参数：注解的字节码文件对象</span></span><br><span class="line">           <span class="comment">//返回值：布尔结果。  true 存在  false 不存在</span></span><br><span class="line">           <span class="keyword">if</span>(method.isAnnotationPresent(Test<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">               method.invoke(useTest);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="47-3-元注解"><a href="#47-3-元注解" class="headerlink" title="47.3 元注解"></a>47.3 元注解</h4><blockquote>
<p>什么是元注解？</p>
<p>元注解就是描述注解的注解</p>
<p>2.常用的元注解介绍</p>
<table>
<thead>
<tr>
<th>元注解名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Target</td>
<td>指定了注解能在哪里使用</td>
</tr>
<tr>
<td>@Retention</td>
<td>可以理解为保留时间(生命周期)</td>
</tr>
<tr>
<td>@Inherited</td>
<td>表示修饰的自定义注解可以被子类继承</td>
</tr>
<tr>
<td>@Documented</td>
<td>表示该自定义注解，会出现在API文档里面。</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//表示Test这个注解的存活时间</span></span><br><span class="line">&gt;<span class="comment">//注解括号里面的注释是元注解</span></span><br><span class="line">&gt;<span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">package</span> com.itheima.myanno3;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试和日志</title>
    <url>/2021/10/15/DAY25_%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="48-单元测试"><a href="#48-单元测试" class="headerlink" title="48. 单元测试"></a>48. 单元测试</h3><h4 id="48-1-单元测试的概念"><a href="#48-1-单元测试的概念" class="headerlink" title="48.1 单元测试的概念"></a>48.1 单元测试的概念</h4><blockquote>
<p>单元测试:对软件最小单元的测试</p>
<p>步骤：</p>
<p>1.将junit4J添加项目中</p>
<p>2.编写测试类</p>
<p>3.编写测试方法</p>
<p>@Test  :表示一个方法为测试方法</p>
<p>@Before: 表示一个测试方法执行前要执行的方法</p>
<p>@After: 表示一个测试方法执行之后要执行的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseAnno</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试执行之前执行</span></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"method"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//Before 和After一定会执行</span></span><br><span class="line"><span class="comment">//可以单独运行  </span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fountion</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"fountion"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//可以单独运行</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fountion1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"HELLO"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//测试执行之后执行</span></span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aethod01</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="number">2</span> / <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="49-日志"><a href="#49-日志" class="headerlink" title="49. 日志"></a>49. 日志</h3><blockquote>
<p>日志：对方法执行过程的记录</p>
<p>步骤：</p>
<p>1.将log4j-1.2.17.jar、slf4j-log4j12-1.7.26.jar、slf4j-api-1.7.30.jar添加项目中</p>
<p>2.导入log4j.properties配置文件到src目录下</p>
<p>3.配置测试文件</p>
<p>4.在代码中获取日志的对象</p>
<p>5.按照级别设置记录日志信息</p>
<p>日志类别分类</p>
<ul>
<li>debug</li>
<li>info</li>
<li>warn</li>
<li>error</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jDemo</span> </span>&#123;</span><br><span class="line">   <span class="comment">//必须先导入Logger对象 </span></span><br><span class="line">   <span class="comment">//参数写本类字节码文件</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Log4jDemo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       log.debug(<span class="string">"debug日志"</span>);</span><br><span class="line">       log.info(<span class="string">"info日志"</span>);</span><br><span class="line">       log.warn(<span class="string">"warn日志"</span>);</span><br><span class="line">       log.error(<span class="string">"error日志"</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


<p>配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&gt;#debug日志需要修改debug,my,fileAppender</span></span><br><span class="line"><span class="attr">&gt;#通常使用info,my,fileAppender</span></span><br><span class="line"><span class="meta">&gt;log4j.rootLogger</span>=<span class="string">debug,my,fileAppender</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;###</span> <span class="string">direct log messages to my ###</span></span><br><span class="line"><span class="attr">&gt;#输出到控制台</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">&gt;##表示所有的消息都会被立刻输出</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">&gt;#使用System.out方式输出</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="attr">&gt;#使用pattenlayout布局输出日志</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d %t %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;#</span> <span class="string">fileAppender演示</span></span><br><span class="line"><span class="attr">&gt;#输出到地方文件夹</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">&gt;#表示所有的消息都会被立刻输出</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">&gt;#表示输出的内容，会从结尾输出，不会重置</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">&gt;#输出文件，存储地址</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.fileAppender.File</span>=<span class="string">./log4j-log.log</span></span><br><span class="line"><span class="attr">&gt;#输出文件指定格式</span></span><br><span class="line"><span class="meta">&gt;#</span> <span class="string">灵活使用指定布局</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.fileAppender.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">&gt;log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="string">%d %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="49-1-日志技术-三个核心"><a href="#49-1-日志技术-三个核心" class="headerlink" title="49.1 日志技术-三个核心"></a>49.1 日志技术-三个核心</h4><blockquote>
<p>三个核心</p>
<ul>
<li><p>Loggers(记录器)       日志的级别</p>
<p>Loggers组件在此系统中常见的五个级别：DEBUG、INFO、WARN、ERROR 和 FATAL。</p>
<p>==DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL。==</p>
<p>==Log4j有一个规则：只输出级别不低于设定级别的日志信息。==</p>
</li>
<li><p>Appenders(输出源)   日志要输出的地方</p>
<p>把日志输出到不同的地方，如控制台==（Console）、文件（Files）==等。</p>
<ul>
<li>org.apache.log4j.ConsoleAppender（控制台）</li>
<li>org.apache.log4j.FileAppender（文件）</li>
</ul>
</li>
<li><p>Layouts(布局)             日志输出的格式</p>
<p>可以根据自己的喜好规定日志输出的格式</p>
<p>常用的布局管理器：</p>
<p>==org.apache.log4j.PatternLayout（可以灵活地指定布局模式）==</p>
<p>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</p>
<p>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）  </p>
</li>
</ul>
</blockquote>
<h4 id="49-2-配置文件的详细配置"><a href="#49-2-配置文件的详细配置" class="headerlink" title="49.2 配置文件的详细配置"></a>49.2 配置文件的详细配置</h4><blockquote>
<p>1.配置根Logger</p>
<ul>
<li><p>格式</p>
<p>==log4j.rootLogger=日志级别，appenderName1，appenderName2，…==</p>
<p>日志级别</p>
<p>OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。</p>
</li>
<li><p>appenderName1</p>
<p>就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。</p>
<p>例如：log4j.rootLogger＝INFO，ca，fa</p>
</li>
</ul>
<p>2.ConsoleAppender常用的选项</p>
<ul>
<li><p>ImmediateFlush=true</p>
<p>表示所有消息都会被立即输出，设为false则不输出，默认值是true。</p>
</li>
<li><p>Target=System.err</p>
<p>默认值是System.out。</p>
</li>
</ul>
<p>3.FileAppender常用的选项</p>
<ul>
<li><p>ImmediateFlush=true</p>
<p>表示所有消息都会被立即输出。设为false则不输出，默认值是true</p>
</li>
<li><p>Append=false</p>
<p>true表示将消息添加到指定文件中，原来的消息不覆盖。</p>
<p>false则将消息覆盖指定的文件内容，默认值是true。</p>
</li>
<li><p>File=D:/logs/logging.log4j</p>
<p>指定消息输出到logging.log4j文件中</p>
</li>
</ul>
<p>4.PatternLayout常用的选项</p>
<p>​    ConversionPattern=%m%n</p>
<p>​    设定以怎样的格式显示消息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;#########</span> <span class="string">常见参数 #########</span></span><br><span class="line"><span class="attr">&gt;//</span></span><br><span class="line"><span class="meta">&gt;%c&#123;参数&#125;</span> <span class="string">或 %logger&#123;参数&#125;  ##输出日志名称</span></span><br><span class="line"><span class="meta">&gt;%C&#123;参数&#125;</span> <span class="string">或 %class&#123;参数    ##输出类型</span></span><br><span class="line"><span class="meta">&gt;%d&#123;参数&#125;&#123;时区te&#123;参数&#125;&#123;时区&#125;</span> <span class="string">##输出时间</span></span><br><span class="line"><span class="meta">&gt;%F|%file</span>                  <span class="string">##输出文件名</span></span><br><span class="line"><span class="meta">&gt;highlight&#123;pattern&#125;&#123;style&#125;</span> <span class="string">##高亮显示</span></span><br><span class="line"><span class="meta">&gt;%l</span>  <span class="string">##输出错误的完整位置</span></span><br><span class="line"><span class="meta">&gt;%L</span>  <span class="string">##输出错误行号</span></span><br><span class="line"><span class="meta">&gt;%m</span> <span class="string">或 %msg 或 %message ##输出错误信息</span></span><br><span class="line"><span class="meta">&gt;%M</span> <span class="string">或 %method ##输出方法名</span></span><br><span class="line"><span class="meta">&gt;%n</span>            <span class="string">##输出换行符</span></span><br><span class="line"><span class="meta">&gt;%level&#123;参数1&#125;&#123;参数2&#125;&#123;参数3&#125;</span> <span class="string">##输出日志的级别</span></span><br><span class="line"><span class="meta">&gt;%t</span> <span class="string">或 %thread              ##创建logging事件的线程名</span></span><br><span class="line"><span class="attr">&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;#########</span> <span class="string">特殊符号 ############</span></span><br><span class="line"><span class="attr">&gt;#有些特殊符号不能直接打印，需要使用实体名称或者编号</span></span><br><span class="line"><span class="attr">&gt;//</span></span><br><span class="line"><span class="meta">&gt;&amp;</span> <span class="string">—— &amp;amp; 或者 &amp;#38;</span></span><br><span class="line"><span class="meta">&gt;&lt;</span> <span class="string">—— &amp;lt;  或者 &amp;#60;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span> <span class="string">—— &amp;gt;  或者 &amp;#62;</span></span><br><span class="line"><span class="meta">&gt;“</span> <span class="string">—— &amp;quot; 或者 &amp;#34;</span></span><br><span class="line"><span class="meta">&gt;‘</span> <span class="string">—— &amp;apos; 或者 &amp;#39;</span></span><br><span class="line"><span class="attr">&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;########</span> <span class="string">pattern对齐修饰 ##########</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;//</span> <span class="string">对齐修饰，可以指定信息的输出格式，如是否左对齐，是否留空格等。</span></span><br><span class="line"><span class="meta">&gt;##</span> <span class="string">编写格式为在任何pattern和%之间加入一个小数，可以是正数，也可以是负数。</span></span><br><span class="line"><span class="meta">&gt;##</span> <span class="string">整数表示右对齐，负数表示左对齐；</span></span><br><span class="line"><span class="meta">&gt;##</span> <span class="string">整数位表示输出信息的最小n个字符，如果输出信息不够n个字符，将用空格补齐；</span></span><br><span class="line"><span class="meta">&gt;##</span> <span class="string">小数位表示输出信息的最大字符数，如果超过n个字符，则只保留最后n个字符的信息</span></span><br><span class="line"><span class="meta">&gt;##</span> <span class="string">（注意：保留的是后20个字符，而不是前20个字符）</span></span><br><span class="line"><span class="attr">&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&gt;#示例如下</span></span><br><span class="line"><span class="attr">&gt;//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;%20</span> <span class="string">—— 右对齐，不足20个字符则在信息前面用空格补足，超过20个字符则保留原信息</span></span><br><span class="line"><span class="meta">&gt;%-20</span> <span class="string">—— 左对齐，不足20个字符则在信息后面用空格补足，超过20个字符则保留原信息</span></span><br><span class="line"><span class="meta">&gt;%.30</span> <span class="string">—— 如果信息超过30个字符，则只保留最后30个字符</span></span><br><span class="line"><span class="meta">&gt;%20.30</span> <span class="string">—— 右对齐，不足20个字符则在信息前面用空格补足，超过30个字符则只保留最后30个字符</span></span><br><span class="line"><span class="meta">&gt;%-20.30</span> <span class="string">—— 左对齐，不足20个字符则在信息后面用空格补足，超过30个字符则只保留最后30个字符</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven和MyBatis</title>
    <url>/2021/10/20/Day04_Maven%E5%92%8CMyBatis/</url>
    <content><![CDATA[<h3 id="1-Maven"><a href="#1-Maven" class="headerlink" title="1. Maven"></a>1. Maven</h3><h4 id="1-1-Maven概述"><a href="#1-1-Maven概述" class="headerlink" title="1.1 Maven概述"></a>1.1 Maven概述</h4><blockquote>
<p>Maven是专门用于管理好构建Java的项目的工具</p>
<p>管理依赖</p>
<p>主要功能：</p>
<ul>
<li>提供了一套标准haul的项目机构</li>
<li>提供了一套标准化的构建流程（编译、测试、打包、发布。。）</li>
<li>提供了一套依赖管理机制</li>
</ul>
<p>界面详情：</p>
<p><img src="E:%5CHEIMA%5CNOTE/MySQL/image/Maven-%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>仓库分类：</p>
<ul>
<li>本地仓库：自己计算机上的目录</li>
<li>中央仓库：Maven团队维护的全球唯一仓库  <a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/</a></li>
<li>远程仓库（私服）：公司团队搭建的私有仓库</li>
</ul>
<p>本地项目导入驱动jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!--mysql服务--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-2-Maven的使用"><a href="#1-2-Maven的使用" class="headerlink" title="1.2 Maven的使用"></a>1.2 Maven的使用</h4><blockquote>
<p>maven生命周期</p>
<ul>
<li>Maven构建项目生命周期描述的是一次构建过程经历多少事件</li>
<li>Maven对项目构建的生命周期划分为3套</li>
<li>clean：清理工作</li>
<li>default：核心工作，例如编译、测试、打包、安装等</li>
<li>site：产生报告，发布站点</li>
</ul>
<p>==同一生命周期内，执行后边的命令，前面的所有命令会自动执行==</p>
<p>Maven坐标详解</p>
<p>坐标：</p>
<ul>
<li>Maven中的坐标是资源的唯一标识</li>
<li>使用坐标来定义项目或引用项目中需要的依赖</li>
</ul>
<p>坐标组成：</p>
<ul>
<li>grould：当前Maven项目隶属组织名称</li>
<li>artifactId：当前项目名称</li>
<li>version：定义当前项目版本号</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 驱动名称 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 驱动目录地址 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--驱动版本号  --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="2-Mybatis"><a href="#2-Mybatis" class="headerlink" title="2. Mybatis"></a>2. Mybatis</h3><h5 id="2-1-基本概述"><a href="#2-1-基本概述" class="headerlink" title="2.1 基本概述"></a>2.1 基本概述</h5><blockquote>
<ul>
<li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发</li>
</ul>
<p><strong>持久层</strong></p>
<ul>
<li>负责将数据保存到数据库的那一层代码</li>
<li>JavaEE三层架构：表现层、业务层、持久层</li>
</ul>
<h5 id="JavaEE三层"><a href="#JavaEE三层" class="headerlink" title="JavaEE三层"></a>JavaEE三层</h5><ul>
<li>表现层</li>
<li>业务层</li>
<li>持久层</li>
</ul>
<h5 id="框架："><a href="#框架：" class="headerlink" title="框架："></a>框架：</h5><ul>
<li>框架是一个半成品软件，是一套可重用，通用的、软件基础代码模型</li>
<li>在框架的基础之上构建软件编写更加高效、规范、通用、可拓展</li>
</ul>
<h5 id="MyBatis简化"><a href="#MyBatis简化" class="headerlink" title="MyBatis简化"></a>MyBatis简化</h5><ul>
<li><p>硬编码</p>
<ul>
<li>注册驱动，获取连接</li>
<li>SQL语句</li>
</ul>
</li>
<li><p>操作繁琐</p>
<ul>
<li>手动设置参数</li>
<li>手动封装对象</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="2-1-MyBatis的使用"><a href="#2-1-MyBatis的使用" class="headerlink" title="2.1 MyBatis的使用"></a>2.1 MyBatis的使用</h5><blockquote>
<h4 id="1-创建数据表，导入驱动jar包，定义POJO类"><a href="#1-创建数据表，导入驱动jar包，定义POJO类" class="headerlink" title="1. 创建数据表，导入驱动jar包，定义POJO类"></a>1. 创建数据表，导入驱动jar包，定义POJO类</h4><h4 id="2-配置MyBatis的配置文件"><a href="#2-配置MyBatis的配置文件" class="headerlink" title="2. 配置MyBatis的配置文件"></a>2. 配置MyBatis的配置文件</h4><ul>
<li><strong>第一步</strong> ： 创建 mybatis-config.xml 核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--mybatis-config.xml --&gt;</span></span><br><span class="line">&gt;<span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--连接信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--数据库地址--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///day04_mybatis?useSSL = false"</span>/&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--用户名密码--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--加载sql的映射文件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>第二步</strong>   创建 UserMapper.xml 映射文件  命名：表名+Mapper</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--UserMapper.xml  映射文件 --&gt;</span> </span><br><span class="line">&gt;<span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&gt;namepace:名称空间</span></span><br><span class="line"><span class="comment">&gt;--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"pojo.User"</span>&gt;</span></span><br><span class="line">   select * from tb_user ;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第三部   创建 logback.xml   日志配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level] %blue(%d&#123;HH:mm:ss.SSS&#125;) %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.itheima"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">    ， 默认debug</span></span><br><span class="line"><span class="comment">     &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-测试代码-配置文件导入"><a href="#3-测试代码-配置文件导入" class="headerlink" title="3. 测试代码- 配置文件导入"></a>3. 测试代码- 配置文件导入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">&gt;<span class="comment">//      构建 SqlSessionFactory  Mybatis实现配置好的，直接复制即可</span></span><br><span class="line">    <span class="comment">//  导入配置文件 创建对象</span></span><br><span class="line">       String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">       InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">       SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    </span><br><span class="line">&gt;<span class="comment">//        获取SqlSession对象 执行sql</span></span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">&gt;<span class="comment">//        执行sql  SQL映射文件的名称空间地址</span></span><br><span class="line">       List&lt;User&gt; users = sqlSession.selectList(<span class="string">"test.selectAll"</span>);</span><br><span class="line">       </span><br><span class="line">       System.out.println(users);</span><br><span class="line">       </span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2021/10/07/Day21_%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="40-多线程"><a href="#40-多线程" class="headerlink" title="40. 多线程"></a>40. 多线程</h3><h4 id="40-1-多线程的基本概念"><a href="#40-1-多线程的基本概念" class="headerlink" title="40.1 多线程的基本概念"></a>40.1 多线程的基本概念</h4><h5 id="40-1-1-多线程的认识"><a href="#40-1-1-多线程的认识" class="headerlink" title="40.1.1 多线程的认识"></a>40.1.1 多线程的认识</h5><blockquote>
<p>多线程：</p>
<ul>
<li>采用多线程技术可以同时执行多个任务。多线程需要硬件支持</li>
</ul>
</blockquote>
<h5 id="40-1-2-并发和并行"><a href="#40-1-2-并发和并行" class="headerlink" title="40.1.2 并发和并行"></a>40.1.2 并发和并行</h5><blockquote>
<p>并行：</p>
<ul>
<li>在同一时刻，有多个指令在多个CPU上<font color= "red">同时</font>执行（多个服务器同时做相同的事情）</li>
</ul>
<p>并发：</p>
<ul>
<li>在同一时刻，有多个指令在单个个CPU上<font color= "red">交替</font>执行（单台服务器交替执行多个任务）</li>
</ul>
</blockquote>
<h5 id="40-1-3-进程和线程"><a href="#40-1-3-进程和线程" class="headerlink" title="40.1.3 进程和线程"></a>40.1.3 进程和线程</h5><blockquote>
<p>进程：是正在运行的软件，是操作系统的分配和调度的最小单元</p>
<ul>
<li>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位。</li>
<li>动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡的。</li>
<li>并发性：任何进程都可以同其他进程一起并发执行</li>
</ul>
<p>线程：是进程中的单个顺序控制流，是一条执行路程。是CPU调度的最小单元</p>
<ul>
<li>单线程：一个进程如果只有一条执行路径，则称之为单线程程序</li>
<li>多线程：一个程序如果有多条执行路径，则称之为多线程程序</li>
</ul>
</blockquote>
<h4 id="40-2-多线程的实现方法"><a href="#40-2-多线程的实现方法" class="headerlink" title="40.2 多线程的实现方法"></a>40.2 多线程的实现方法</h4><h5 id="40-2-1-Thread类实现方法"><a href="#40-2-1-Thread类实现方法" class="headerlink" title="40.2.1 Thread类实现方法"></a>40.2.1 Thread类实现方法</h5><blockquote>
<ul>
<li>需要重写run（）方法<ul>
<li>因为run()是用来封装被线程执行的代码</li>
</ul>
</li>
<li>run()和start()方法的区别<ul>
<li>run():封装线程执行的代码，直接调用，相当于普通方法的调用，并没有开启现场。</li>
<li>start()：启动现场；然后由JVM调用此线程的run()方法</li>
</ul>
</li>
</ul>
<p>实现步骤：</p>
<ul>
<li>定义一个MyThread继承Thread</li>
<li>在MyThread类中重写run()方法</li>
<li>在主方法创建对象</li>
<li>启动线程</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//main方法也是一个线程，称之为主线程</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">       <span class="comment">//创建现场</span></span><br><span class="line">       MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">       MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">       MyThrea t3 = <span class="keyword">new</span> MyThrea();</span><br><span class="line">       MyThrea t4 = <span class="keyword">new</span> MyThrea();</span><br><span class="line">       <span class="comment">//开启线程</span></span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       t3.start();</span><br><span class="line">       t4.start();</span><br><span class="line">   	<span class="comment">//开启了进程，但是没有开启线程</span></span><br><span class="line">   	t3.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">//重写run方法</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">MyThrea</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">           System.out.println(getName() + <span class="string">"--"</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="40-2-2-Runable类实现方法"><a href="#40-2-2-Runable类实现方法" class="headerlink" title="40.2.2 Runable类实现方法"></a>40.2.2 Runable类实现方法</h5><blockquote>
<p>实现步骤：</p>
<ul>
<li>定义一个MyRunable实现Runable接口</li>
<li>在MyRunable类中重写run()方法</li>
<li>在主方法创建Thread对象把MyRunable作为构造方法的参数</li>
<li>启动线程</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创建了一个参数对象</span></span><br><span class="line">       MyRunable mr = <span class="keyword">new</span> MyRunable();</span><br><span class="line">       <span class="comment">//创建了一个线程对象，并把参数传递给了这个线程</span></span><br><span class="line">       <span class="comment">//在线程启动之后，执行的就是参数里面的run方法</span></span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(mr);</span><br><span class="line">       <span class="comment">//开启线程</span></span><br><span class="line">       t1.start();</span><br><span class="line"></span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(mr);</span><br><span class="line">       t2.start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">//创建MyRunable的实现类实现Runable接口</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">MyRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">"第二种线程实现"</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p>Thread和Runable的区别</p>
<ul>
<li>Thread是继承，Runable是实现接口，由于不能多继承，因此Runable更加灵活</li>
</ul>
</blockquote>
<h5 id="40-2-3-Callable和Future实现方法"><a href="#40-2-3-Callable和Future实现方法" class="headerlink" title="40.2.3 Callable和Future实现方法"></a>40.2.3 Callable和Future实现方法</h5><blockquote>
<p>实现步骤：</p>
<ul>
<li><p>定义一个MyCallable实现Callable接口</p>
</li>
<li><p>在MyCallable类中重写run()方法</p>
</li>
<li><p>创建MyCallable类的对象</p>
</li>
<li><p>创建Future的实现类FutureTake对象，把MyCallable作为构造方法的参数</p>
</li>
<li><p>创建Thread类的对象，把FutureTake作为构造方法的参数</p>
</li>
<li><p>启动线程</p>
</li>
</ul>
<ul>
<li>再次调用get方法，可以获取线程结束之后的结果</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">       <span class="comment">//线程开启之后需要执行里面的Call方法</span></span><br><span class="line">       MyCallable mc = <span class="keyword">new</span> MyCallable();</span><br><span class="line">       <span class="comment">//可以获取现场执行完毕之后的结果，也可以作为参数传递给Thread对象</span></span><br><span class="line">       FutureTask&lt;String&gt; sf = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">       FutureTask&lt;String&gt; sf1 = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">       <span class="comment">//创建线程对象</span></span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(sf);</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(sf1);</span><br><span class="line">       <span class="comment">//开启线程</span></span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       <span class="comment">//获取返回值</span></span><br><span class="line">       String s = sf.get();</span><br><span class="line">       System.out.println(s);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//泛型表示返回值的数据类型</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回值表示线程运行完毕之后的结果</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">           System.out.println(<span class="string">"和女孩表白"</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">&gt;<span class="comment">// 返回值  执行之后的结果</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"答应"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="40-2-4-三种实现方法的应用场景"><a href="#40-2-4-三种实现方法的应用场景" class="headerlink" title="40.2.4 三种实现方法的应用场景"></a>40.2.4 三种实现方法的应用场景</h5><blockquote>
<p>区别：</p>
<table>
<thead>
<tr>
<th>实现方法</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>实现Runable、Callable接口（有返回值）</td>
<td>拓展性强，实现该接口的同时，还可以继承其他的类</td>
<td>编程相对复杂，不能直接使用Thread类中的方法</td>
</tr>
<tr>
<td>继承Thread类</td>
<td>编程比较简单，可以直接使用Thread类中的方法</td>
<td>可以扩展性比较差，不能继承其他的类</td>
</tr>
</tbody></table>
</blockquote>
<h4 id="40-3-多线程的常见方法"><a href="#40-3-多线程的常见方法" class="headerlink" title="40.3 多线程的常见方法"></a>40.3 多线程的常见方法</h4><h5 id="40-3-1-获取和设置线程的名称"><a href="#40-3-1-获取和设置线程的名称" class="headerlink" title="40.3.1 获取和设置线程的名称"></a>40.3.1 获取和设置线程的名称</h5><blockquote>
<h4 id="设置线程名称："><a href="#设置线程名称：" class="headerlink" title="设置线程名称："></a>设置线程名称：</h4><ul>
<li>void setName</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//线程有默认名称 --  Thread--编号</span></span><br><span class="line">     <span class="comment">//创建线程</span></span><br><span class="line">     <span class="comment">//实现有参，需要在类中构造有参</span></span><br><span class="line">     MyThread t1 = <span class="keyword">new</span> MyThread(<span class="string">"小吴"</span>);</span><br><span class="line">     MyThread t2 = <span class="keyword">new</span> MyThread(<span class="string">"小王"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//设置线程名称</span></span><br><span class="line">     <span class="comment">//一般放在开启线程之前</span></span><br><span class="line">    <span class="comment">/* t1.setName("你好");</span></span><br><span class="line"><span class="comment">     t2.setName("我不好");*/</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//开启线程</span></span><br><span class="line">     t1.start();</span><br><span class="line">     t2.start();</span><br><span class="line"> &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> <span class="comment">//需要构造无参和有参</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(name);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         System.out.println(getName() + <span class="string">"@@"</span> + i);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="获取线程名称："><a href="#获取线程名称：" class="headerlink" title="获取线程名称："></a>获取线程名称：</h4><ul>
<li><p>public static Thread currentThread() : 返回对当前正在执行的线程对象的名称</p>
</li>
<li><pre><code class="java">Thread.currentThread().getName()
&lt;!--￼<span class="number">4</span>--&gt;
</code></pre>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 40.3.2 线程休眠</span><br><span class="line"></span><br><span class="line">&gt;- void sleep(long time): 让线程休眠指定时间，单位是毫秒</span><br><span class="line"></span><br><span class="line">&gt;&#96;&#96;&#96;java</span><br><span class="line">&gt;public class test &#123;</span><br><span class="line">   public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">      &#x2F;* System.out.println(&quot;睡觉前&quot;);</span><br><span class="line">       Thread.sleep(3000);</span><br><span class="line">       System.out.println(&quot;睡觉后&quot;);*&#x2F;</span><br><span class="line">       MyThread t1 &#x3D; new MyThread();</span><br><span class="line">       MyThread t2 &#x3D; new MyThread();</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;class MyThread extends Thread &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line"></span><br><span class="line">       for (int i &#x3D; 0; i &lt; 50; i++) &#123;</span><br><span class="line"></span><br><span class="line">           try &#123;</span><br><span class="line">               Thread.sleep(100);</span><br><span class="line">           &#125; catch (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           System.out.println(Thread.currentThread().getName() + &quot;!^!&quot; + i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="40-3-3-线程调度"><a href="#40-3-3-线程调度" class="headerlink" title="40.3.3 线程调度"></a>40.3.3 线程调度</h5><blockquote>
<p>两种调度模型</p>
<ul>
<li>分时调度模型<ul>
<li>所有线程<font color = "red">轮流</font>使用CPU的使用权，平均分配每个线程占用CPU的时间片</li>
</ul>
</li>
<li>抢占式调度模型<ul>
<li>优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会<font color = "red">随机</font>选择一个，优先级高的线程获取的时间片相对多一些</li>
<li>void setPriority（int new Priority） 设置优先级</li>
<li>int getPriority()   获取线程优先级</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="comment">//优先级  ：  1 - 10  默认是 5</span></span><br><span class="line">       <span class="comment">//优先级越高，能够抢到CPU的执行越大，并不是优先级高的，会先执行完</span></span><br><span class="line">       <span class="comment">//没有任何方法可以决定线程的执行顺序</span></span><br><span class="line">       MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">       MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">       t1.setName(<span class="string">"飞机"</span>);</span><br><span class="line">       t1.setPriority(<span class="number">9</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.setName(<span class="string">"坦克"</span>);</span><br><span class="line">       t2.setPriority(<span class="number">1</span>);</span><br><span class="line">       t2.start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">           <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">               Thread.sleep(100);</span></span><br><span class="line"><span class="comment">           &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">               e.printStackTrace();</span></span><br><span class="line"><span class="comment">           &#125;*/</span></span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">"---"</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="40-3-4-守护线程-后台线程"><a href="#40-3-4-守护线程-后台线程" class="headerlink" title="40.3.4 守护线程/后台线程"></a>40.3.4 守护线程/后台线程</h5><blockquote>
<p>守护普通的线程</p>
<ul>
<li>void setDaemon(boolean on):可以设置成为守护线程</li>
</ul>
<ul>
<li>普通线程结束后，守护线程就不会执行完毕</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">       MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">       t1.setName(<span class="string">"女神"</span>);</span><br><span class="line">       t2.setName(<span class="string">"备胎"</span>);</span><br><span class="line">       <span class="comment">//把第二个线程设置成为守护线程</span></span><br><span class="line">       <span class="comment">//普通线程结束后，守护线程就不会执行完毕</span></span><br><span class="line">       t2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">           System.out.println(getName()+<span class="string">"---"</span>+i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="40-4-多线程的安全问题"><a href="#40-4-多线程的安全问题" class="headerlink" title="40.4 多线程的安全问题"></a>40.4 多线程的安全问题</h4><blockquote>
<p>存在的问题：</p>
<ul>
<li>多线程操作共享数据  - - 语句之间有时间差</li>
</ul>
</blockquote>
<h5 id="40-4-1-同步代码块"><a href="#40-4-1-同步代码块" class="headerlink" title="40.4.1 同步代码块"></a>40.4.1 同步代码块</h5><blockquote>
<p>概念：</p>
<ul>
<li><p>锁多条语句操作共享数据</p>
</li>
<li><p>格式：</p>
</li>
<li><pre><code class="java"><span class="keyword">synchronized</span>(任意对象){
   操作共享数据的代码
}
&lt;!--￼<span class="number">9</span>--&gt;
</code></pre>
</li>
</ul>
<p>线程实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"> <span class="comment">//创建一个任意对象，作为锁</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Object a = <span class="keyword">new</span> Object();</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">         <span class="comment">//需要一个任意对象</span></span><br><span class="line">         <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">             <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*  try &#123;</span></span><br><span class="line"><span class="comment">                     Thread.sleep(50);</span></span><br><span class="line"><span class="comment">                 &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                     e.printStackTrace();</span></span><br><span class="line"><span class="comment">                 &#125;*/</span></span><br><span class="line"></span><br><span class="line">                 ticket--;</span><br><span class="line">                 <span class="comment">//时间差</span></span><br><span class="line">                 System.out.println(Thread.currentThread().getName() + <span class="string">"在卖票，还剩下"</span> + ticket);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="40-4-2-同步方法"><a href="#40-4-2-同步方法" class="headerlink" title="40.4.2 同步方法"></a>40.4.2 同步方法</h5><blockquote>
<p>同步方法：就是把synchronized返回值加到方法上</p>
<p>格式：</p>
<ul>
<li>```java<br>synchronized(this){<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><pre><code>修饰符  static synchronized 返回值类型 方法名（方法参数）{  }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;同步代码块和同步方法的区别：</span><br><span class="line"></span><br><span class="line">&gt;- 同步代码块可以锁住指定代码，同步方法是锁住方法中的所有代码</span><br><span class="line">&gt;- 同步代码块可以指定锁对象，同步方法不能指定锁对象</span><br><span class="line"></span><br><span class="line">&gt;同步方法的锁对象：</span><br><span class="line"></span><br><span class="line">&gt;- this</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;示例：</span><br><span class="line"></span><br><span class="line">&gt;&#96;&#96;&#96;java</span><br><span class="line">&gt;public class MyRunnable implements Runnable &#123;</span><br><span class="line">  private int a &#x3D;100;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void run() &#123;</span><br><span class="line">      while (true)&#123;</span><br><span class="line">          if (&quot;窗口一&quot;.equals(Thread.currentThread().getName())) &#123;</span><br><span class="line">              &#x2F;&#x2F;同步方法</span><br><span class="line">              boolean result &#x3D; synchronizedMthod();</span><br><span class="line">              if(result)&#123;</span><br><span class="line">                  break;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          if(&quot;窗口二&quot;.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">             &#x2F;&#x2F;同步代码块</span><br><span class="line">              synchronized (this)&#123;</span><br><span class="line">                  if(a &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                      break;</span><br><span class="line">                  &#125;else &#123;</span><br><span class="line">                      try &#123;</span><br><span class="line">                          Thread.sleep(50);</span><br><span class="line">                      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                      a--;</span><br><span class="line">                      &#x2F;&#x2F;时间差</span><br><span class="line">                      System.out.println(Thread.currentThread().getName() + &quot;在卖票，还剩下&quot; + a);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private synchronized boolean synchronizedMthod() &#123;</span><br><span class="line">      if (a &#x3D;&#x3D; 0)&#123;</span><br><span class="line">          return true;</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              Thread.sleep(10);</span><br><span class="line">          &#125; catch (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          a--;</span><br><span class="line">          System.out.println(Thread.currentThread().getName()+&quot;卖票，剩下&quot;+a);</span><br><span class="line">      &#125;</span><br><span class="line">      return false;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</code></pre></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MyRunnable ticket1 = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">      Thread t1 = <span class="keyword">new</span> Thread(ticket1);</span><br><span class="line">      Thread t2 = <span class="keyword">new</span> Thread(ticket1);</span><br><span class="line"></span><br><span class="line">      t1.setName(<span class="string">"窗口一"</span>);</span><br><span class="line">      t2.setName(<span class="string">"窗口二"</span>);</span><br><span class="line"></span><br><span class="line">      t1.start();</span><br><span class="line"></span><br><span class="line">      t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="40-4-3-Lock锁"><a href="#40-4-3-Lock锁" class="headerlink" title="40.4.3 Lock锁"></a>40.4.3 Lock锁</h5><blockquote>
<p>方法:</p>
<ul>
<li>void lock():  获取锁</li>
<li>void unlock: 释放锁</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object a = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ReentrantLock a = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="comment">//需要一个任意对象</span></span><br><span class="line">&gt;<span class="comment">//            synchronized (a) &#123;</span></span><br><span class="line">          a.lock();</span><br><span class="line">          <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                  ticket--;</span><br><span class="line">                  <span class="comment">//时间差</span></span><br><span class="line">                  System.out.println(Thread.currentThread().getName() + <span class="string">"在卖票，还剩下"</span> + ticket);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  a.unlock();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&gt;<span class="comment">//            &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="40-4-4-死锁"><a href="#40-4-4-死锁" class="headerlink" title="40.4.4 死锁"></a>40.4.4 死锁</h5><blockquote>
<p>产生情况:</p>
<ul>
<li>线程死锁：由于两个或者多个线程互相持有对方需要的资源，导致这些线程处在等待状态，无法前往执行</li>
<li>锁嵌套</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Object A = <span class="keyword">new</span> Object();</span><br><span class="line">      Object B = <span class="keyword">new</span> Object();</span><br><span class="line">      <span class="comment">//线程锁嵌套</span></span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">             <span class="keyword">synchronized</span> (A)&#123;</span><br><span class="line">                 <span class="keyword">synchronized</span> (B)&#123;</span><br><span class="line">                     System.out.println(<span class="string">"吃"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">              <span class="keyword">synchronized</span> (B)&#123;</span><br><span class="line">                  <span class="keyword">synchronized</span> (A)&#123;</span><br><span class="line">                      System.out.println(<span class="string">"喝"</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li>治标：干掉一个线程    </li>
<li>治本： 大锁套小锁 （性能降低）</li>
<li>治标治本：避免锁嵌套（比较难）</li>
</ul>
</blockquote>
<h4 id="40-5-生产者消费者"><a href="#40-5-生产者消费者" class="headerlink" title="40.5 生产者消费者"></a>40.5 生产者消费者</h4><h5 id="40-5-1-生产者消费者机制"><a href="#40-5-1-生产者消费者机制" class="headerlink" title="40.5.1 生产者消费者机制"></a>40.5.1 生产者消费者机制</h5><blockquote>
<p>生产者消费者模式：</p>
<ul>
<li>多线程协作的模式</li>
</ul>
<h4 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h4><p>方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void wait()</td>
<td>导致当前线程等待，直到另一个线程调用该对象的notify()方法或者notifyAll()方法</td>
</tr>
<tr>
<td>void notify()</td>
<td>唤醒正在等待对象监视器的单个线程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>唤醒正在等待对象监视器的所有线程</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>客人：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foodie</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="comment">//上锁，单次只有一个</span></span><br><span class="line">          <span class="keyword">synchronized</span> (Desk.lock) &#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (Desk.count == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//判断是否有食物 false</span></span><br><span class="line">                  <span class="keyword">if</span> (Desk.flag) &#123;</span><br><span class="line">                      <span class="comment">//吃食物</span></span><br><span class="line">                      System.out.println(<span class="string">"正在吃"</span>);</span><br><span class="line">                      Desk.flag = <span class="keyword">false</span>;</span><br><span class="line">                      Desk.lock.notifyAll();</span><br><span class="line">                      Desk.count--;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="comment">//如果没有食物就等待</span></span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                          <span class="comment">//使用什么对象当锁，就必须使用这个对象调用等待和唤醒的方法</span></span><br><span class="line">                          Desk.lock.wait();</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>厨师：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cooker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="comment">//上锁，单次只有一个</span></span><br><span class="line">          <span class="keyword">synchronized</span> (Desk.lock) &#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (Desk.count == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//判断是否有食物 false</span></span><br><span class="line">                  <span class="keyword">if</span> (!Desk.flag) &#123;</span><br><span class="line">                      System.out.println(<span class="string">"生成食物"</span>);</span><br><span class="line">                      Desk.flag = <span class="keyword">true</span>;</span><br><span class="line">                      Desk.lock.notifyAll();</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="comment">//如果有食物就等待</span></span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                          <span class="comment">//使用什么对象当锁，就必须使用这个对象调用等待和唤醒的方法</span></span><br><span class="line">                          Desk.lock.wait();</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>桌子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Desk</span> </span>&#123;</span><br><span class="line">  <span class="comment">//标记默认没有</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//食物数量</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">//锁</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(<span class="keyword">new</span> Cooker()).start();</span><br><span class="line">      <span class="keyword">new</span> Thread(<span class="keyword">new</span> Foodie()).start();</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="阻塞队列唤醒机制"><a href="#阻塞队列唤醒机制" class="headerlink" title="阻塞队列唤醒机制"></a>阻塞队列唤醒机制</h4><p>BlockingQueue的核心方法：</p>
<ul>
<li>put(anObject)：将参数放入队列，如果放不进去会阻塞</li>
<li>take():取出第一个数据，取不到会阻塞</li>
</ul>
<p>常见的BolckQueue：</p>
<ul>
<li>ArrayBolckQueue：底层是数组，有界</li>
<li>LinkedBolckQueue：底层是链表，无界，最大为int的最大值</li>
</ul>
</blockquote>
<h3 id="41-多线程高级"><a href="#41-多线程高级" class="headerlink" title="41. 多线程高级"></a>41. 多线程高级</h3><h4 id="41-1-线程状态"><a href="#41-1-线程状态" class="headerlink" title="41.1 线程状态"></a>41.1 线程状态</h4><h5 id="41-1-1线程状态的基础概念"><a href="#41-1-1线程状态的基础概念" class="headerlink" title="41.1.1线程状态的基础概念"></a>41.1.1线程状态的基础概念</h5><blockquote>
<h5 id="线程状态的流程："><a href="#线程状态的流程：" class="headerlink" title="线程状态的流程："></a><strong>线程状态的流程：</strong></h5><p>新建:创建线程对象</p>
<p>:arrow_down:       <code>start()</code></p>
<p>就绪：有执行资格，没有执行权</p>
<p>​            <code>sleep(10)</code>    :arrow_right:    到时间了</p>
<p>:arrows_clockwise:         <code>wait()</code>        :arrow_right:        notify</p>
<p>​              无法获取锁    :arrow_right:    获取到锁      </p>
<p>运行：有执行资格，有执行权</p>
<p>:arrow_down:        <code>run()</code></p>
<p>死亡：线程死亡</p>
<p>虚拟机中线程的六种状态：</p>
<ul>
<li>新建状态(NEW) ——  创建线程对象</li>
<li>就绪状态(RUNNABLE) ——  start方法</li>
<li>阻塞状态(BLOCKED) —— 无法获得锁对象</li>
<li>等待状态(WAITING) —— wait() 方法</li>
<li>计时等待(TIMED_WAITING) —— sleep方法</li>
<li>结束状态(TERMINATED) —— 全部代码运行完毕</li>
</ul>
</blockquote>
<h4 id="41-2-线程池"><a href="#41-2-线程池" class="headerlink" title="41.2 线程池"></a>41.2 线程池</h4><h5 id="41-2-1-线程池的基础概念"><a href="#41-2-1-线程池的基础概念" class="headerlink" title="41.2.1 线程池的基础概念"></a>41.2.1 线程池的基础概念</h5><blockquote>
<p>基础概念：</p>
<ul>
<li>存储线程的容器</li>
</ul>
<p>运行原理：</p>
<ul>
<li>有任务交给线程池的时候，线程池中有空闲线程就执行任务，如果没有就创建新的线程来执行任务</li>
</ul>
<p>优点：</p>
<ul>
<li>可以用少量的线程提高运行效率</li>
</ul>
</blockquote>
<h5 id="41-2-2-线程池的实现方法"><a href="#41-2-2-线程池的实现方法" class="headerlink" title="41.2.2 线程池的实现方法"></a>41.2.2 线程池的实现方法</h5><blockquote>
<p>实现步骤：</p>
<ul>
<li><p>创建Executors中的静态线程池</p>
</li>
<li><p>Executors.newCachedThreadPool        //无界线程池</p>
</li>
<li><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{
        <span class="comment">//创建线程池对象，默认是空的</span>
        <span class="comment">//  内置线程池   newCachedThreadPool   缓存线程池（无界线程池）  Integer.max()  21亿</span>
        ExecutorService executorService = Executors.newCachedThreadPool();
        <span class="comment">//  Executors--创建对象</span>
        <span class="comment">//  ExecutorService -- 控制线程池</span>
        <span class="comment">//开启线程池</span>
        executorService.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"在持续了"</span>));

        Thread.sleep(<span class="number">200</span>);

        executorService.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"在持续了"</span>));
        <span class="comment">// 关闭线程池</span>
        executorService.shutdown();
    }
}
&lt;!--￼<span class="number">20</span>--&gt;</code></pre>
</li>
<li><p>Executors.newSingleThreadExecutor() </p>
<p>//单列线程池  只有一个线程容量</p>
</li>
<li><p>Executors.newScheduledThreadPool(10);</p>
<p>//延迟线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  执行需求   时间    单位</span></span><br><span class="line">       executorService.schedule(()-&gt; System.out.println(<span class="string">"你好"</span>),<span class="number">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
</li>
<li><p>submit方法</p>
</li>
<li><p>shutdown()关闭线程池</p>
</li>
</ul>
<p>四大内置线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;Executors.newCachedThreadPool		  //无界线程池</span></span><br><span class="line"><span class="comment">&gt;Executors.newFixedThreadPool(10); 	  //固定线程池</span></span><br><span class="line"><span class="comment">&gt;Executors.newSingleThreadExecutor()   //单列线程池</span></span><br><span class="line"><span class="comment">&gt;Executors.newScheduledThreadPool(10); //延迟线程池</span></span><br><span class="line"><span class="comment">&gt;*/</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="41-2-3-手动创建线程池"><a href="#41-2-3-手动创建线程池" class="headerlink" title="41.2.3 手动创建线程池"></a>41.2.3 手动创建线程池</h5><blockquote>
<p>手动创建参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;* 核心线程数量</span></span><br><span class="line"><span class="comment">&gt;* 线程最大线程数量</span></span><br><span class="line"><span class="comment">&gt;* 空闲时间</span></span><br><span class="line"><span class="comment">&gt;* 空闲时间单位</span></span><br><span class="line"><span class="comment">&gt;* 阻塞队列</span></span><br><span class="line"><span class="comment">&gt;* 创建线程方式</span></span><br><span class="line"><span class="comment">&gt;* 执行过多任务方案</span></span><br><span class="line"><span class="comment">&gt;* */</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ThreadPoolExecutor tpe = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line"><span class="number">2</span>,      <span class="comment">// 核心线程数量</span></span><br><span class="line"><span class="number">5</span>,  <span class="comment">// 线程最大线程数量</span></span><br><span class="line"><span class="number">4</span>,  <span class="comment">// 空闲时间</span></span><br><span class="line">TimeUnit.SECONDS,   <span class="comment">// 空闲时间单位</span></span><br><span class="line"><span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>),    <span class="comment">// 阻塞队列</span></span><br><span class="line">Executors.defaultThreadFactory(),   <span class="comment">// 创建线程方式</span></span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());             <span class="comment">// 执行过多任务方案  抛出异常</span></span><br><span class="line">      <span class="comment">//开启线程池</span></span><br><span class="line">      tpe.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"在持续了"</span>));</span><br><span class="line">      tpe.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"在持续了"</span>));</span><br><span class="line">      <span class="comment">//关闭线程池</span></span><br><span class="line">      tpe.shutdown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<p>任务拒绝四个策略：</p>
<ul>
<li>ThreadPoolExecutor.AbortPolicy  // 丢弃任务， 抛出异常</li>
<li>ThreadPoolExecutor.CallerRunsPolicy  //调用任务的run()</li>
<li>ThreadPoolExecutor.DiscardPolicy     // 丢弃任务，不抛出</li>
<li>ThreadPoolExecutor.DiscardOldestPolicy  //丢弃最久的任务</li>
</ul>
</blockquote>
<h5 id="41-3-volatole"><a href="#41-3-volatole" class="headerlink" title="41.3 volatole"></a>41.3 volatole</h5><blockquote>
<p>问题：</p>
<ul>
<li>一个线程不能同步了一个线程修改了的共享数据的值</li>
</ul>
<p>解决关键字：</p>
<ul>
<li>volatole</li>
<li>只能保证线程每次执行都是最新的数据</li>
</ul>
<p>在共享数据前添加关键字</p>
<p>缺点：</p>
<p>不能保证原子性</p>
</blockquote>
<h5 id="41-4-原子性"><a href="#41-4-原子性" class="headerlink" title="41.4 原子性"></a>41.4 原子性</h5><blockquote>
<p>概念：</p>
<ul>
<li><p>在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有操作都不执行，<font color="red">多个操作是一个不可分割的整体</font></p>
</li>
<li><p>synchronized可以保障数据的原子性</p>
</li>
</ul>
</blockquote>
<h6 id="41-4-1-原子类"><a href="#41-4-1-原子类" class="headerlink" title="41.4.1 原子类"></a>41.4.1 原子类</h6><blockquote>
<p>原子类 Atomic-数据类型</p>
<p>构造方法</p>
<ul>
<li>public AtomicInteger();  初始化默认值为0的原子型Integer</li>
<li>public AtomicInteger(int initiaValue);  初始化指定值为原子型</li>
</ul>
<p>方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int get();</td>
<td>获取值</td>
</tr>
<tr>
<td>int getAndIncrement</td>
<td>自增前的值</td>
</tr>
<tr>
<td>int intcrementAndGet</td>
<td>自增后的值</td>
</tr>
<tr>
<td>int addAndGet(int date)</td>
<td>和参数相加，返回结果</td>
</tr>
<tr>
<td>int getAndSet(int value)</td>
<td>将原子型设置为参数值，并返回旧值</td>
</tr>
</tbody></table>
</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级</title>
    <url>/2021/10/17/Day02_MySQL%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h3 id="1-MySQL高级"><a href="#1-MySQL高级" class="headerlink" title="1. MySQL高级"></a>1. MySQL高级</h3><h4 id="1-1约束"><a href="#1-1约束" class="headerlink" title="1.1约束"></a>1.1约束</h4><h5 id="1-1-1-基础概念"><a href="#1-1-1-基础概念" class="headerlink" title="1.1.1 基础概念"></a>1.1.1 基础概念</h5><blockquote>
<p>约束：</p>
<ul>
<li>约束是作用于表中列上的规则，用于限定加入表的数据</li>
<li>约束的存在保存数据库中数据的正确性、有效性和完整性</li>
</ul>
<p>约束的分类：</p>
<table>
<thead>
<tr>
<th>约束名称</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>保证列中所有数据不能有null值</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证列中所有数据各不相同</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一表示，要求非空白且唯一</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>检查约束</td>
<td>保障列中的值满足某一条件</td>
<td>CHECK</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，未指定值则采用默认值</td>
<td>DEFAULT</td>
</tr>
<tr>
<td>外键约束</td>
<td>外键用来让两个表的数据之间建立连接，保证数据的一致性和完整性</td>
<td>FOREIGN KEY</td>
</tr>
</tbody></table>
<p>Tips：MySQL不支持检查约束</p>
</blockquote>
<h5 id="1-2-外键约束"><a href="#1-2-外键约束" class="headerlink" title="1.2 外键约束"></a>1.2 外键约束</h5><blockquote>
<p>概念：</p>
<ul>
<li>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性</li>
</ul>
<p>语法：</p>
<p>（1）添加外键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;CREATE TABLE 表名（</span><br><span class="line">列名 数据类型；</span><br><span class="line">..</span><br><span class="line">##小括号不要忘记</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY (外键列名) REFERENCES 主表（主表列名）</span><br><span class="line">&gt;）</span><br></pre></td></tr></table></figure>

<p>（2）建表后添加外键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主列表名称);</span><br></pre></td></tr></table></figure>

<p>（3）删除约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;alter table 表名 drop FOREIGN key 外键名;</span><br></pre></td></tr></table></figure>



<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;-- 删除表</span><br><span class="line">&gt;DROP TABLE IF EXISTS emp;</span><br><span class="line">&gt;DROP TABLE IF EXISTS dept;</span><br><span class="line"></span><br><span class="line">&gt;-- 部门表</span><br><span class="line">&gt;CREATE TABLE dept(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">dep_name varchar(20),</span><br><span class="line">addr varchar(20)</span><br><span class="line">&gt;);</span><br><span class="line">&gt;-- 员工表 </span><br><span class="line">&gt;CREATE TABLE emp(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">age int,</span><br><span class="line">dep_id int,</span><br><span class="line"></span><br><span class="line">-- 添加外键 dep_id,关联 dept 表的id主键</span><br><span class="line">	CONSTRAINT fk_emp_dept FOREIGN KEY (dep_id) REFERENCES dept(id)</span><br><span class="line">&gt;);</span><br><span class="line"></span><br><span class="line">&gt;-- 添加 2 个部门</span><br><span class="line">&gt;insert into dept(dep_name,addr) values</span><br><span class="line">&gt;(&#39;研发部&#39;,&#39;广州&#39;),(&#39;销售部&#39;, &#39;深圳&#39;);</span><br><span class="line"></span><br><span class="line">&gt;-- 添加员工,dep_id 表示员工所在的部门</span><br><span class="line">&gt;INSERT INTO emp (NAME, age, dep_id) VALUES </span><br><span class="line">&gt;(&#39;张三&#39;, 20, 1),</span><br><span class="line">&gt;(&#39;李四&#39;, 20, 1),</span><br><span class="line">&gt;(&#39;王五&#39;, 20, 1),</span><br><span class="line">&gt;(&#39;赵六&#39;, 20, 2),</span><br><span class="line">&gt;(&#39;孙七&#39;, 22, 2),</span><br><span class="line">&gt;(&#39;周八&#39;, 18, 2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;-- 删除外键</span><br><span class="line">&gt;alter table emp drop FOREIGN key fk_emp_dept;</span><br><span class="line"></span><br><span class="line">&gt;-- 添加外键</span><br><span class="line">&gt;ALTER TABLE emp ADD CONSTRAINT fk_emp_dept FOREIGN KEY (dep_id) REFERENCES dept(id);</span><br></pre></td></tr></table></figure>


</blockquote>
<h5 id="1-2-数据库设计"><a href="#1-2-数据库设计" class="headerlink" title="1.2 数据库设计"></a>1.2 数据库设计</h5><blockquote>
<p>概念：</p>
<ul>
<li>数据库设计就是根据业务系统的具体需求，结合我们所选的DBMS，为这个业务系统构造出最优的数据存储模型</li>
<li>建立数据库中的表结构以及表于表之间的关联关系的过程</li>
</ul>
<p>设计步骤：</p>
<ul>
<li><p>需求分析 ：数据是什么？数据具有哪些属性，属性和数据的特点是什么</p>
</li>
<li><p>逻辑分析：通过ER图对数据库进行裸机建模，不需要考虑所有选用的数据管理系统</p>
</li>
<li><p>物理设计：根据数据库自身的特点把裸机设计转换成物理设计</p>
</li>
<li><p>维护设计：对新的需求进行建模，表优化</p>
</li>
</ul>
<h5 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a><strong>表关系</strong></h5><ul>
<li>一对一<ul>
<li>用户和用户</li>
<li>一对一关系多用于表拆分</li>
<li>实现方式：在任意一方建立外键，关联对方主键，并设置外键唯一</li>
</ul>
</li>
<li>一对多（多对一）<ul>
<li>部门 和 员工</li>
<li>一个部门对应多个员工，一个员工对应一个部门</li>
<li>实现方式：在多的一方建立外键关联一的一方主键</li>
</ul>
</li>
<li>多对多<ul>
<li>商品 和 订单</li>
<li>一个商品对应多个订单，一个订单包含多个商品</li>
<li>实现方式：建立第三张中间表，中间表至少包含2个外键，分别关联双方主键</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="1-3-多表查询"><a href="#1-3-多表查询" class="headerlink" title="1.3 多表查询"></a>1.3 多表查询</h5><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT * FROM emp,dept;</span><br><span class="line">&gt;-- 笛卡尔积：有A、B两个集合，取A、B所有的组合情况</span><br></pre></td></tr></table></figure>



<p><strong>连接查询：</strong></p>
<ul>
<li>内连接：相当于查询AB交集数据</li>
<li>外连接<ul>
<li>左外连接：相当于查询A表所有数据和交际部分数据</li>
<li>右外连接：相当于查询B表所有数据和交际部分数据</li>
</ul>
</li>
</ul>
<p><strong>子查询：</strong></p>
</blockquote>
<h6 id="1-3-1-连接查询"><a href="#1-3-1-连接查询" class="headerlink" title="1.3.1 连接查询"></a>1.3.1 连接查询</h6><blockquote>
<p>内连接：</p>
<ul>
<li><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 隐式内连接</span><br><span class="line">SELECT 字段列表 FROM 表1,表2… WHERE 条件;</span><br><span class="line"></span><br><span class="line">-- 显示内连接</span><br><span class="line">SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 条件;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>外连接：</p>
<ul>
<li><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 左外连接</span><br><span class="line">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件;</span><br><span class="line"></span><br><span class="line">-- 右外连接</span><br><span class="line">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&#x2F;*</span><br><span class="line"></span><br><span class="line">&gt;-- 连接查询</span><br><span class="line">内连接</span><br><span class="line">外连接</span><br><span class="line">&gt;-- 	子查询</span><br><span class="line"></span><br><span class="line">&gt;*&#x2F;</span><br><span class="line"></span><br><span class="line">&gt;-- 内连接 隐式</span><br><span class="line"></span><br><span class="line">&gt;SELECT * FROM dept,emp WHERE emp.dep_id &#x3D; dept.id;</span><br><span class="line"></span><br><span class="line">&gt;-- 内连接 显式</span><br><span class="line"></span><br><span class="line">&gt;SELECT * FROM emp INNER JOIN dept on emp.dep_id &#x3D; dept.id;</span><br><span class="line"></span><br><span class="line">&gt;-- 外连接  左  查询左边的所有 以及交集</span><br><span class="line">&gt;SELECT *FROM emp LEFT JOIN dept ON emp.dep_id &#x3D; dept.id;</span><br><span class="line"></span><br><span class="line">&gt;-- 外连接  右		查询右边边的所有 以及交集</span><br><span class="line">&gt;SELECT *FROM emp RIGHT JOIN dept ON emp.dep_id &#x3D; dept.id;</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="1-3-2-子查询"><a href="#1-3-2-子查询" class="headerlink" title="1.3.2 子查询"></a>1.3.2 子查询</h6><blockquote>
<p>概念： 查询中嵌套查询</p>
<p>根据查询结果不同，作用不同：</p>
<ul>
<li>单行单列 ：作为条件值，使用= != &gt; &lt; 等进行条件判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT 字段列表 FROM 表 WHERE 字段名 &#x3D; (子查询)；</span><br></pre></td></tr></table></figure>

<ul>
<li>多行单列 ：作为条件值，使用in等关键字进行条件判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT 字段列表 FROM 表 WHERE 字段名 in (子查询)；</span><br></pre></td></tr></table></figure>

<ul>
<li>多行多列 ：作为虚拟表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SELECT 字段列表 FROM (子查询) WHERE 条件；</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1.4 事务</p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础知识</title>
    <url>/2021/08/30/day01-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="多看-多练-多查-多记"><a href="#多看-多练-多查-多记" class="headerlink" title="多看 多练 多查  多记"></a><strong>多看 多练 多查  多记</strong></h3><p>复用性  维护性  可读性</p>
<p>jdk：jre +开发工具</p>
<p>jre:运行环境； jvm+核心类库</p>
<p>jvm:虚拟机</p>
<hr>
<h3 id="1-java基础"><a href="#1-java基础" class="headerlink" title="1.java基础"></a>1.java基础</h3><h5 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h5><p>基本数据类型和引用数据类型（数组，类，接口）</p>
<p>关键字：被java特殊定义，编码工具特殊标识</p>
<p>基本数据类型：</p>
<p>整数型：byte(1)  short (2)  <strong>int(4)</strong>  long(8)  </p>
<p>byte的范围：-128~127</p>
<p>小数型：float(4) <strong>double(8)</strong></p>
<p>字符：char(2)</p>
<p>布尔：boolean(1)<br> <img src="/image/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4.png" alt="数据类型取值范围"></p>
<h5 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h5><p>​    格式 ： 数据类型 变量名=数据值；</p>
<p>数据类型 变量名1=数据值1,变量2=数据值2,…..；</p>
<ul>
<li>一个 变量不能在同一个大括号重复命名</li>
</ul>
<ul>
<li><p>一条语句可以定义多个变量，需要使用逗号进行分割，使用分号进行结束；</p>
</li>
<li><p>变量在使用之前一定要赋值</p>
<p>public static void main(String[] args){</p>
<pre><code>    int a = 10;
    System.out.println(a);    
}</code></pre></li>
<li><p>float后的数据值需要加F</p>
</li>
<li><p>long在使用的时候需要加L</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">	float a &#x3D; 1.6F;</span><br><span class="line">	long b &#x3D; 10000000000000000L;</span><br><span class="line">	System.out.println(a,b);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>变量的作用区域范围只在他所在的大括号中有效</p>
<h5 id="1-3-键盘录入"><a href="#1-3-键盘录入" class="headerlink" title="1.3 键盘录入"></a>1.3 键盘录入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;  &#x2F;&#x2F;导包，需要写在class的上面</span><br><span class="line">Scanner sc&#x3D;new Scanner(System.in);  &#x2F;&#x2F; 创建对象，只有sc可以改变，其他属于固定格式</span><br><span class="line">	int a &#x3D; sc.nextInt(); &#x2F;&#x2F; 接受对象；只有变量 a 可以改变，其他属于固定格式</span><br><span class="line">	System.out.println(a);  &#x2F;&#x2F; 打印变量 a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-4-标识符"><a href="#1-4-标识符" class="headerlink" title="1.4 标识符"></a>1.4 标识符</h5><p> 我们给程序内容自己起的名字</p>
<p>1.数字，下划线或美元</p>
<p>2.不能数字开头</p>
<p>3.不能是关键字</p>
<p>规范：小驼峰（方法）开头小写，其余开头大写<br>​        大驼峰（类）开头均大写</p>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>内部类和Lambda</title>
    <url>/2021/09/18/Day13_%E5%86%85%E9%83%A8%E5%92%8CLambda/</url>
    <content><![CDATA[<h3 id="22-内部类"><a href="#22-内部类" class="headerlink" title="22. 内部类"></a>22. 内部类</h3><h5 id="22-1-基础概述"><a href="#22-1-基础概述" class="headerlink" title="22.1 基础概述"></a>22.1 基础概述</h5><p>​    内部类：就是在一个类中定义的另一个类</p>
<p>​    根据内部类在类中定义的位置不同：</p>
<ul>
<li>在类的成员位置：成员内部类</li>
<li>在类中的局部位置：局部内部类</li>
</ul>
<hr>
<h5 id="22-1-1-成员内部类"><a href="#22-1-1-成员内部类" class="headerlink" title="22.1.1 成员内部类"></a>22.1.1 <strong>成员内部类</strong></h5><p>​    内部类的类型：外部类名.内部类名</p>
<p>​    成员内部类对象格式：</p>
<p>​    外部类名.内部类名 对象名 =  new 外部类对象（）.new 内部类对象（）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">out</span></span>&#123;</span><br><span class="line">	<span class="comment">// 内部类，定义在成员位置</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类访问特点</p>
<pre><code>1. 内部类可以直接使用外部类的成员（包括私有）
 2. 外部类访问内部类成员，需要创建内部类对象</code></pre><p>私有内部类</p>
<ul>
<li><p>被 <code>private</code> 修饰</p>
</li>
<li><p>在自己所在的外部类中创建对象访问</p>
</li>
</ul>
<p>静态内部类</p>
<ul>
<li><p>被 <code>static</code> 修饰</p>
</li>
<li><p>格式：外部类名.内部类名 对象名 =  new 外部类对象（）.内部类对象（）</p>
<p>静态成员类中的静态方法：外部类名.内部类名.方法名（）</p>
</li>
</ul>
<h5 id="22-1-2-局部内部类"><a href="#22-1-2-局部内部类" class="headerlink" title="22.1.2 局部内部类"></a>22.1.2 局部内部类</h5><p>​    局部内部类：是方法中定义的类，外接是无法直接使用</p>
<p>​    使用格式：需要在方法内部创建对象并使用，</p>
<p>​    特点：可以直接访问外部类的成员，也可以访问方法内的局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">out</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 内部类，定义在局部位置</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="22-1-3-匿名内部类"><a href="#22-1-3-匿名内部类" class="headerlink" title="22.1.3 匿名内部类"></a>22.1.3 匿名内部类</h5><p>​    概念：是一个特殊的局部内部类（定义在方法内部）</p>
<p>​    前提：需要存在一个接口或者类</p>
<p>​    定义：重写接口/类中方法时，就是在定义方法，也是在定义这个匿名内部类</p>
<p>​    格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名()&#123;</span><br><span class="line">	重写方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemonullClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Inter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类中的show方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>一个匿名内部类实现多个接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemonullClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//父类指向引用子类对象   多态</span></span><br><span class="line">        <span class="comment">//存在多个方法</span></span><br><span class="line">    Inter2 i =   <span class="keyword">new</span> Inter2()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"show1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"show2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//多次调用子类的方法</span></span><br><span class="line">      i.show1();</span><br><span class="line">      i.show2();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p><strong>分析：</strong></p>
<p>​    总结：编写一个接口/类的子类，重写所有的抽象方法，并直接new一个该子类的对象</p>
<p>​        子类是没有类名的，所以叫==匿名类==，因为是在类中定义的类，所以叫==内部类==：合起来一起就是==匿名内部类==</p>
<h5 id="22-1-4-匿名对象"><a href="#22-1-4-匿名对象" class="headerlink" title="22.1.4 匿名对象"></a>22.1.4 匿名对象</h5><p>​    概念：没有名字的对象，没有引用指向的对象</p>
<p>​    只能被引用一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;匿名内部类的对象可以被父接口类型接引用（接口多态）</span><br><span class="line">&#x2F;&#x2F; 方便多次使用该对象</span><br></pre></td></tr></table></figure>



<h5 id="22-1-5-使用场景"><a href="#22-1-5-使用场景" class="headerlink" title="22.1.5 使用场景"></a>22.1.5 使用场景</h5><pre><code>1. 接口，接口中有抽象方法
 2. 我们需要传递接口的实现类方法，这样在方法中可以通过对象调用实现好的方法
 3. 定义类并创建对象比较麻烦，就可以直接使用匿名内部类完成功能
 4. 两种方式做的内容基本一样，但是后者的代码书写简单</code></pre><h3 id="23-Lambda"><a href="#23-Lambda" class="headerlink" title="23. Lambda"></a>23. Lambda</h3><p>​        理解：对于Lambda表达式，对匿名内部类进行了优化</p>
<p>​                    但是又思想层面本质的区别</p>
<p><strong>面向对象思想</strong>：必须通过对象的形式来做事情</p>
<p><strong>函数式编程思想</strong>：则尽量忽略面向对象的复杂语法，强调做什么，而不是以什么形式去做</p>
<p><code>Lambda</code>就是函数式思想的体现</p>
<h5 id="23-1-Lambda表达式的标准格式"><a href="#23-1-Lambda表达式的标准格式" class="headerlink" title="23.1 Lambda表达式的标准格式"></a>23.1 <strong>Lambda表达式的标准格式</strong></h5><p>​    格式：（形式参数） -&gt; {代码块}</p>
<ul>
<li>（）：里面没有内容，可以看成是方法形式参数为空，多个参数之间使用<font color="orange"><code>“，”</code></font>分割，没有留空</li>
<li>-&gt; ：用箭头指向后面要做的事情</li>
<li>｛｝：包含一段代码，称为代码块</li>
</ul>
<p>Lambda组成三要素：</p>
<pre><code>使用前提：</code></pre><ul>
<li>有一个接口</li>
<li>接口中有且仅有一个抽象方法</li>
</ul>
<h5 id="23-2-不带参数案例："><a href="#23-2-不带参数案例：" class="headerlink" title="23.2 不带参数案例："></a>23.2 不带参数案例：</h5><p>格式：（）-&gt; { }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DemoLambda &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        GoSwimming(new Swimming() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            &#x2F;&#x2F;swim()里没有参数，Lambda内即不用填</span><br><span class="line">            public void swim() &#123;</span><br><span class="line">                System.out.println(&quot;去洗澡&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; Lambda表达式</span><br><span class="line">        GoSwimming(()-&gt;&#123; System.out.println(&quot;去洗澡&quot;);&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void GoSwimming(Swimming swimming)&#123;</span><br><span class="line">        swimming.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Swimming&#123;</span><br><span class="line">    void swim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="23-3-带参数无返回值案例："><a href="#23-3-带参数无返回值案例：" class="headerlink" title="23.3 带参数无返回值案例："></a>23.3 带参数无返回值案例：</h5><p>格式： （参数）-&gt; {  }</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoLambda01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useString(<span class="keyword">new</span> String01() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessag</span><span class="params">(String mes)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"你"</span> + mes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line">        useString(mes -&gt;</span><br><span class="line">                System.out.println(<span class="string">"我"</span> + mes)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useString</span><span class="params">(String01 string01)</span> </span>&#123;</span><br><span class="line">        string01.printMessag(<span class="string">"抠666"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">String01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMessag</span><span class="params">(String mes)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="23-4-无参数有返回值的案例："><a href="#23-4-无参数有返回值的案例：" class="headerlink" title="23.4 无参数有返回值的案例："></a>23.4 无参数有返回值的案例：</h5><p>格式： （ ）-&gt; {xxx; yyy;  return xxx;}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DemoLambd02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Random r &#x3D; new Random();</span><br><span class="line">        useRandomNumHandler(new RandomNumHandler() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int getNumber() &#123;</span><br><span class="line"></span><br><span class="line">                int num &#x3D; r.nextInt(10) + 1;</span><br><span class="line">                return num;</span><br><span class="line">                &#x2F;&#x2F; 如果操作的接口中的方法有返回值。，一定要通过return语句，将结果返回</span><br><span class="line">                &#x2F;&#x2F;否则会编译错误</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        useRandomNumHandler(() -&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;            Random r &#x3D; new Random();</span><br><span class="line">            int num &#x3D; r.nextInt(10) + 1;</span><br><span class="line">            return num;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void useRandomNumHandler(RandomNumHandler randomNumHandler) &#123;</span><br><span class="line">        int result &#x3D; randomNumHandler.getNumber();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface RandomNumHandler &#123;</span><br><span class="line">    int getNumber();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="23-5-有参数有返回值案例："><a href="#23-5-有参数有返回值案例：" class="headerlink" title="23.5 有参数有返回值案例："></a>23.5 有参数有返回值案例：</h5><p>格式：（int a, int b） -&gt; {xxx;yyy; return a,b }</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoLambd03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useCalculator(<span class="keyword">new</span> Calculator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a+b ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useCalculator((a,b) -&gt;  a+b );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useCalculator</span> <span class="params">(Calculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = calculator.calc(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="23-5-Lambda表达式的省略模式"><a href="#23-5-Lambda表达式的省略模式" class="headerlink" title="23.5 Lambda表达式的省略模式"></a>23.5 Lambda表达式的省略模式</h5><p>规则：</p>
<ul>
<li>参数类型可以省略，但是有多个参数的情况下，不能只能略一个</li>
<li>如果参数有且仅有一个，那么小括号可以省略</li>
<li>如果代码块的语句只有一条，可以省略大括号和分号，甚至是return</li>
</ul>
<h5 id="23-6-Lambda表达式好匿名内部类的区别"><a href="#23-6-Lambda表达式好匿名内部类的区别" class="headerlink" title="23.6 Lambda表达式好匿名内部类的区别"></a>23.6 Lambda表达式好匿名内部类的区别</h5><p>所需类型不同：</p>
<blockquote>
<ul>
<li>匿名内部类：可以是接口，也可以是抽象类，还可以是具体类</li>
<li>Lambda表达式：只能是接口<br>使用限制不同：</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类</li>
<li>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式</li>
</ul>
</blockquote>
<p>实现原理不同：</p>
<blockquote>
<ul>
<li>匿名内部类：编译之后，产生单独的一个.class字节码文件</li>
<li>Lambda表达式：编译之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时候动态生成</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC和连接池DUird</title>
    <url>/2021/10/19/day03_JDBC/</url>
    <content><![CDATA[<h3 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC"></a>1. JDBC</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><blockquote>
<ul>
<li>JDBC就是使用Java语言操作关系型数据库的一套API</li>
</ul>
<p>好处：</p>
<ul>
<li>各数据库厂商使用相同的接口，Java代码不需要针对不数据库分别开发</li>
<li>可随时替代底层数据库，访问数据库的Java代码基本不变</li>
</ul>
</blockquote>
<h5 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h5><blockquote>
<p>DML的使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        注册驱动</span></span><br><span class="line">       Class.forName(<span class="string">"mysql.JDBC"</span>);</span><br><span class="line">&gt;<span class="comment">//        获取连接</span></span><br><span class="line"> <span class="built_in">String</span> url = <span class="string">"jdbc:mysql://127.0.0.1:3306/demotest"</span>;</span><br><span class="line">       <span class="built_in">String</span> username = <span class="string">"root"</span>;</span><br><span class="line">       <span class="built_in">String</span> passwored = <span class="string">"root"</span>;</span><br><span class="line">       Connection conn = DriverManager.getConnection(url, username, passwored);</span><br><span class="line">&gt;<span class="comment">//        定义SQL语句</span></span><br><span class="line"> <span class="built_in">String</span> sql = <span class="string">"UPDATE stu set age = 22 WHERE id =1 "</span>;</span><br><span class="line">&gt;<span class="comment">//        获取执行SQL对象</span></span><br><span class="line">       Statement stmt = conn.createStatement();</span><br><span class="line">&gt;<span class="comment">//        执行SQL</span></span><br><span class="line">       int count = stmt.executeUpdate(sql);</span><br><span class="line">&gt;<span class="comment">//        返回结果</span></span><br><span class="line">       System.out.println(count);</span><br><span class="line">&gt;<span class="comment">//        结束资源</span></span><br><span class="line">       stmt.close();</span><br><span class="line">       conn.close();</span><br></pre></td></tr></table></figure>

<p>DQL的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//        注册驱动</span></span><br><span class="line">       Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&gt;<span class="comment">//        获取连接  </span></span><br><span class="line">&gt;<span class="comment">// 		默认本机端口 可以省略jdbc:mysql:///demotest</span></span><br><span class="line">       String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/demotest"</span>;</span><br><span class="line">       String username = <span class="string">"root"</span>;</span><br><span class="line">       String password = <span class="string">"root"</span>;</span><br><span class="line">       Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">&gt;<span class="comment">//        定义SQL语句  DML</span></span><br><span class="line">       String sql = <span class="string">"UPDATE stu set age = 44 WHERE id =1 "</span>;</span><br><span class="line">&gt;<span class="comment">//        DQL</span></span><br><span class="line">       String sql1 = <span class="string">"SELECT * FROM stu"</span>;</span><br><span class="line">&gt;<span class="comment">//        创建对象</span></span><br><span class="line">       Statement stmt = conn.createStatement();</span><br><span class="line">&gt;<span class="comment">//        执行语句</span></span><br><span class="line">       <span class="keyword">int</span> i = stmt.executeUpdate(sql);</span><br><span class="line">       ResultSet resultSet = stmt.executeQuery(sql1);</span><br><span class="line">&gt;<span class="comment">//        处理结果</span></span><br><span class="line">       <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">&gt;<span class="comment">//            设置参数</span></span><br><span class="line">           String id = resultSet.getString(<span class="number">1</span>);</span><br><span class="line">           String name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">           String age = resultSet.getString(<span class="number">3</span>);</span><br><span class="line">           String sex = resultSet.getString(<span class="number">4</span>);</span><br><span class="line">           String address = resultSet.getString(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">           System.out.println(id);</span><br><span class="line">           System.out.println(name);</span><br><span class="line">           System.out.println(age);</span><br><span class="line">           System.out.println(sex);</span><br><span class="line">           System.out.println(address);</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(i);</span><br><span class="line">&gt;<span class="comment">//        关闭资源</span></span><br><span class="line">       resultSet.close();</span><br><span class="line">       stmt.close();</span><br><span class="line">       conn.close();</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="1-3-JDBC-API"><a href="#1-3-JDBC-API" class="headerlink" title="1.3 JDBC API"></a>1.3 JDBC API</h4><blockquote>
<p>（1）DriverManager（驱动管理类）作用</p>
<ul>
<li><p>注册驱动</p>
</li>
<li><p>获取数据库连接</p>
<ul>
<li><pre><code class="java">jdbc:mysql:<span class="comment">//ip:端口/数据库名？自定义参数</span>
&lt;!--￼<span class="number">2</span>--&gt;</code></pre>
</li>
<li><p>预编译SQL的执行SQL对象：防止SQL注入</p>
</li>
<li><pre><code class="java"><span class="function">PrepareStatement <span class="title">prepareStatement</span><span class="params">(sql)</span> </span>
<span class="function"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 执行存储过程对象</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">  CallableStatement prepareCall(sql)</span><br></pre></td></tr></table></figure></span></code></pre>
</li>
</ul>
</li>
<li><p>事务管理</p>
<ul>
<li><p>MySQL事务管理</p>
</li>
<li><p>JDBC事务管理</p>
</li>
<li><pre><code>// true  自动提交 false 手动提交
开启事务：   conn.setAutoCommit(bolean autoCommit);
提交事务：    commit()
回滚事务：    rollback()
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">        try &#123;</span><br><span class="line">&#x2F;&#x2F;            开启事务  手动开启</span><br><span class="line">            conn.setAutoCommit(false);</span><br><span class="line">&#x2F;&#x2F;        执行SQL</span><br><span class="line">            int count &#x3D; stmt.executeUpdate(sql);</span><br><span class="line">&#x2F;&#x2F;        返回结果</span><br><span class="line">            System.out.println(count &gt; 0);</span><br><span class="line">&#x2F;&#x2F;            提交事务</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">&#x2F;&#x2F;            回滚事务</span><br><span class="line">            conn.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ul>
<p>（3）Statement</p>
<ul>
<li><p>执行DDL、DML</p>
<ul>
<li><pre><code class="java"><span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(sql)</span></span>
<span class="function"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 执行DQL</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;java</span><br><span class="line">    ResultSet  stmt.executeQuery(sql)</span><br></pre></td></tr></table></figure></span>
<span class="function"></span></code></pre>
</li>
</ul>
</li>
</ul>
<p>（4）ResultSet(结果集对象)</p>
<ul>
<li><p>ResultSet作用</p>
</li>
<li><p>获取查询结果</p>
<ul>
<li><pre><code class="javascript">boolean next():（<span class="number">1</span>）光标从当前位置向前移动一行 （<span class="number">2</span>）判断当前行是否为有效行
    返回值：
     - <span class="literal">true</span>：有效行，当前行有数据
     - <span class="literal">false</span>：无效行，当前没有数据
&lt;!--￼<span class="number">6</span>--&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<p>（5）PreparedStatement</p>
<p>sql注入：==’ ‘ or ‘1’ =  ‘ 1==</p>
<ul>
<li>PreparedStatament 作用<ul>
<li>预编译SQL并执行SQL</li>
<li>防止SQL注入：将铭感字符进行转义</li>
</ul>
</li>
<li>PreparedStatament  预编译功能开启：useServerPrepStmts = true；</li>
<li>PreparedStatament原理<ul>
<li>在获取PreparedStatament对象时，将sql语句发送给mysql服务器进行检查，编译（这些步骤耗时）</li>
<li>执行时就不用再进行步骤了，速度更快</li>
<li>如果sql模块一样，则只需要进行一次检查、编译</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="2-数据库连接池"><a href="#2-数据库连接池" class="headerlink" title="2.数据库连接池"></a>2.数据库连接池</h3><h5 id="2-1-数据库概述"><a href="#2-1-数据库概述" class="headerlink" title="2.1 数据库概述"></a>2.1 数据库概述</h5><blockquote>
<p>简介;</p>
<ul>
<li>数据库连接池是个容器，负责分配，管理数据库连接</li>
<li>她允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li>
<li>释放空间时间超过最大空闲时间的数据连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</li>
</ul>
<p>好处：</p>
<ul>
<li>资源再用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
</blockquote>
<h5 id="2-2-数据库实现"><a href="#2-2-数据库实现" class="headerlink" title="2.2 数据库实现"></a>2.2 数据库实现</h5><blockquote>
<p>标准接口：DataSource</p>
<ul>
<li><p>官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口</p>
</li>
<li><p>功能：获取连接</p>
<ul>
<li><pre><code class="java">Connection getDConnection
&lt;!--￼<span class="number">7</span>--&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符和分支语句</title>
    <url>/2021/08/31/day02-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="day02-Java基础语法"><a href="#day02-Java基础语法" class="headerlink" title="day02 - Java基础语法"></a>day02 - Java基础语法</h1><h2 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1 类型转换"></a>1 类型转换</h2><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。</p>
<h3 id="1-1-隐式转换-理解"><a href="#1-1-隐式转换-理解" class="headerlink" title="1.1 隐式转换(理解)"></a>1.1 隐式转换(理解)</h3><p>​    把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">10</span>; <span class="comment">// 将int类型的10直接赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">// 输出10.0</span></span><br></pre></td></tr></table></figure>

<p>​    类型从小到大关系图：</p>
<p>​    <img src="img%5C%E5%9B%BE%E7%89%871.png" alt=""></p>
<p>说明：</p>
<ol>
<li>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2; </span><br><span class="line"><span class="comment">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为:</span></span><br><span class="line"><span class="keyword">int</span> num = b1 + b2;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2);</span><br></pre></td></tr></table></figure>

<ol>
<li>boolean类型不能与其他基本数据类型相互转换。</li>
</ol>
<h3 id="1-2-强制转换-理解"><a href="#1-2-强制转换-理解" class="headerlink" title="1.2 强制转换(理解)"></a>1.2 强制转换(理解)</h3><p>​    把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。</p>
<p>​    强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p>
<p>​    例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = (<span class="keyword">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br><span class="line">System.out.println(num2); <span class="comment">// 输出5（小数位直接舍弃）</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-类型转换案例-理解"><a href="#1-3-类型转换案例-理解" class="headerlink" title="1.3 类型转换案例(理解)"></a>1.3 类型转换案例(理解)</h3><p>案例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">byte</span> c = a + b; <span class="comment">//错误。因为两个byte变量相加，会先提升为int类型</span></span><br><span class="line"><span class="keyword">byte</span> d = <span class="number">3</span> + <span class="number">4</span>; <span class="comment">//正确。常量优化机制</span></span><br></pre></td></tr></table></figure>

<p>常量优化机制：</p>
<p>​    在编译时，整数常量的计算会直接算出结果，并且会自动判断该结果是否在byte取值范围内，</p>
<p>​        在：编译通过</p>
<pre><code>不在：编译失败</code></pre><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><h3 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h3><h4 id="2-1-1-运算符和表达式（了解）"><a href="#2-1-1-运算符和表达式（了解）" class="headerlink" title="2.1.1 运算符和表达式（了解）"></a>2.1.1 运算符和表达式（了解）</h4><p>运算符：对常量或者变量进行操作的符号</p>
<p>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</p>
<p>​                    不同运算符连接的表达式体现的是不同类型的表达式。</p>
<p>举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure>

<p>  +：是运算符，并且是算术运算符。</p>
<p>  a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p>
<h4 id="2-1-2-算术运算符-应用"><a href="#2-1-2-算术运算符-应用" class="headerlink" title="2.1.2 算术运算符(应用)"></a>2.1.2 算术运算符(应用)</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>参看小学一年级</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>参看小学一年级</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>参看小学二年级，与“×”相同</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>参看小学二年级，与“÷”相同</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>获取的是两个数据做除法的余数</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</li>
<li>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a / b); <span class="comment">// 输出结果3</span></span><br><span class="line">System.out.println(a % b); <span class="comment">// 输出结果1</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-字符的“-”操作（理解）"><a href="#2-1-3-字符的“-”操作（理解）" class="headerlink" title="2.1.3 字符的“+”操作（理解）"></a>2.1.3 字符的“+”操作（理解）</h4><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p>
<p>‘a’  –  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p>
<p>‘A’  –  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p>
<p>‘0’  –  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">'a'</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">'A'</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">'0'</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure>

<p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p>
<p>提升规则：</p>
<p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p>
<p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p>
<p>​       等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度</span></span><br><span class="line"><span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收</span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型</span></span><br><span class="line">-------------------------------</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-4-字符串的“-”操作（理解）"><a href="#2-1-4-字符串的“-”操作（理解）" class="headerlink" title="2.1.4 字符串的“+”操作（理解）"></a>2.1.4 字符串的“+”操作（理解）</h4><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"itheima"</span>+ <span class="number">666</span>); <span class="comment">// 输出：itheima666</span></span><br></pre></td></tr></table></figure>

<p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">"年黑马"</span>);            <span class="comment">// 输出：100年黑马</span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">"itheima"</span> + <span class="number">3</span> + <span class="number">4</span>);   <span class="comment">// 输出：3itheima34</span></span><br><span class="line"><span class="comment">// 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">"itheima"</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3itheima7</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-5-数值拆分（应用）"><a href="#2-1-5-数值拆分（应用）" class="headerlink" title="2.1.5 数值拆分（应用）"></a>2.1.5 数值拆分（应用）</h4><p>需求：</p>
<p>​    键盘录入一个三位数，将其拆分为个位，十位，百位，打印在控制台</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1：使用Scanner键盘录入一个三位数</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">"请输入一个三位数"</span>);</span><br><span class="line">		<span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">		<span class="comment">// 2：个位的计算：数值 % 10</span></span><br><span class="line">		<span class="keyword">int</span> ge = num % <span class="number">10</span>;		</span><br><span class="line">		<span class="comment">// 3：十位的计算：数值 / 10 % 10</span></span><br><span class="line">		<span class="keyword">int</span> shi = num / <span class="number">10</span> % <span class="number">10</span>;	</span><br><span class="line">		<span class="comment">// 4：百位的计算：数值 / 100</span></span><br><span class="line">		<span class="keyword">int</span> bai = num / <span class="number">100</span>;</span><br><span class="line">		<span class="comment">// 5：将个位, 十位, 百位拼接上正确的字符串, 打印即可</span></span><br><span class="line">		System.out.println(<span class="string">"整数"</span>+num+<span class="string">"个位为:"</span> + ge);</span><br><span class="line">		System.out.println(<span class="string">"整数"</span>+num+<span class="string">"十位为:"</span> + shi);</span><br><span class="line">		System.out.println(<span class="string">"整数"</span>+num+<span class="string">"百位为:"</span> + bai);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-自增自减运算符（理解）"><a href="#2-2-自增自减运算符（理解）" class="headerlink" title="2.2 自增自减运算符（理解）"></a>2.2 自增自减运算符（理解）</h3><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>++</td>
<td>自增</td>
<td>变量的值加1</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>变量的值减1</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<p>​    ++和– 既可以放在变量的后边，也可以放在变量的前边。</p>
<p>​    单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。</p>
<p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。</p>
<p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。</p>
<p>​    最常见的用法：单独使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">i++; <span class="comment">// 单独使用</span></span><br><span class="line">System.out.println(<span class="string">"i:"</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">++j; <span class="comment">// 单独使用</span></span><br><span class="line">System.out.println(<span class="string">"j:"</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">System.out.println(<span class="string">"x:"</span> + x + <span class="string">", y:"</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">System.out.println(<span class="string">"m:"</span> + m + <span class="string">", m:"</span> + m); <span class="comment">// m:11，m:11</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = x++ + x++ + x++;</span><br><span class="line">System.out.println(y); <span class="comment">// y的值是多少？</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。</span></span><br><span class="line"><span class="comment">所以整个式子应该是：int y = 10 + 11 + 12;</span></span><br><span class="line"><span class="comment">输出结果为33。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</span><br></pre></td></tr></table></figure>

<h3 id="2-3-赋值运算符（应用）"><a href="#2-3-赋值运算符（应用）" class="headerlink" title="2.3 赋值运算符（应用）"></a>2.3 赋值运算符（应用）</h3><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=10，将10赋值给变量a</td>
</tr>
<tr>
<td>+=</td>
<td>加后赋值</td>
<td>a+=b，将a+b的值给a</td>
</tr>
<tr>
<td>-=</td>
<td>减后赋值</td>
<td>a-=b，将a-b的值给a</td>
</tr>
<tr>
<td>*=</td>
<td>乘后赋值</td>
<td>a*=b，将a×b的值给a</td>
</tr>
<tr>
<td>/=</td>
<td>除后赋值</td>
<td>a/=b，将a÷b的商给a</td>
</tr>
<tr>
<td>%=</td>
<td>取余后赋值</td>
<td>a%=b，将a÷b的余数给a</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>扩展的赋值运算符隐含了强制类型转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span></span><br><span class="line"></span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-关系运算符（应用）"><a href="#2-4-关系运算符（应用）" class="headerlink" title="2.4 关系运算符（应用）"></a>2.4 关系运算符（应用）</h3><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>!=</td>
<td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;</td>
<td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;=</td>
<td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&lt;</td>
<td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&lt;=</td>
<td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p>
<p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量</span></span><br><span class="line"><span class="keyword">boolean</span> flag = a &gt; b;</span><br><span class="line">System.out.println(flag); <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-逻辑运算符（应用）"><a href="#2-5-逻辑运算符（应用）" class="headerlink" title="2.5 逻辑运算符（应用）"></a>2.5 逻辑运算符（应用）</h3><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>逻辑与</td>
<td>a&amp;b，a和b都是true，结果为true，否则为false</td>
</tr>
<tr>
<td>|</td>
<td>逻辑或</td>
<td>a|b，a和b都是false，结果为false，否则为true</td>
</tr>
<tr>
<td>^</td>
<td>逻辑异或</td>
<td>a^b，a和b结果不同为true，相同为false</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>!a，结果和a的结果正好相反</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false</span></span><br><span class="line">System.out.println((i &gt; j) &amp; (i &gt; k)); <span class="comment">//false &amp; false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) &amp; (i &gt; k)); <span class="comment">//true &amp; false,输出false</span></span><br><span class="line">System.out.println((i &gt; j) &amp; (i &lt; k)); <span class="comment">//false &amp; true,输出false</span></span><br><span class="line">System.out.println((i &lt; j) &amp; (i &lt; k)); <span class="comment">//true &amp; true,输出true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true</span></span><br><span class="line">System.out.println((i &gt; j) | (i &gt; k)); <span class="comment">//false | false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) | (i &gt; k)); <span class="comment">//true | false,输出true</span></span><br><span class="line">System.out.println((i &gt; j) | (i &lt; k)); <span class="comment">//false | true,输出true</span></span><br><span class="line">System.out.println((i &lt; j) | (i &lt; k)); <span class="comment">//true | true,输出true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//^ “异或”，相同为false，不同为true</span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &gt; k)); <span class="comment">//false ^ false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) ^ (i &gt; k)); <span class="comment">//true ^ false,输出true</span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &lt; k)); <span class="comment">//false ^ true,输出true</span></span><br><span class="line">System.out.println((i &lt; j) ^ (i &lt; k)); <span class="comment">//true ^ true,输出false</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//! “非”，取反</span></span><br><span class="line">System.out.println((i &gt; j)); <span class="comment">//false</span></span><br><span class="line">System.out.println(!(i &gt; j)); <span class="comment">//!false，,输出true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-6-短路逻辑运算符（理解）"><a href="#2-6-短路逻辑运算符（理解）" class="headerlink" title="2.6 短路逻辑运算符（理解）"></a>2.6 短路逻辑运算符（理解）</h3><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>短路与</td>
<td>作用和&amp;相同，但是有短路效果</td>
</tr>
<tr>
<td>||</td>
<td>短路或</td>
<td>作用和|相同，但是有短路效果</td>
</tr>
</tbody></table>
<p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p>
<ul>
<li>逻辑与&amp;，无论左边真假，右边都要执行。</li>
<li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</li>
<li>逻辑或|，无论左边真假，右边都要执行。</li>
<li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算</span></span><br><span class="line">System.out.println(x); <span class="comment">// 4</span></span><br><span class="line">System.out.println(y); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp;&amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 左边已经可以确定结果为false，右边不参与运算</span></span><br><span class="line">System.out.println(x); <span class="comment">// 4</span></span><br><span class="line">System.out.println(y); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="2-7-三元运算符（理解）"><a href="#2-7-三元运算符（理解）" class="headerlink" title="2.7 三元运算符（理解）"></a>2.7 三元运算符（理解）</h3><p>三元运算符语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br></pre></td></tr></table></figure>

<h3 id="2-8-三元运算符案例-应用"><a href="#2-8-三元运算符案例-应用" class="headerlink" title="2.8 三元运算符案例(应用)"></a>2.8 三元运算符案例(应用)</h3><p>需求：</p>
<p>​    一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。</span></span><br><span class="line">		<span class="keyword">int</span> height1 = <span class="number">150</span>;</span><br><span class="line">		<span class="keyword">int</span> height2 = <span class="number">210</span>;</span><br><span class="line">		<span class="keyword">int</span> height3 = <span class="number">165</span>;	</span><br><span class="line">		<span class="comment">//2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span></span><br><span class="line">		<span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;		</span><br><span class="line">		<span class="comment">//3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span></span><br><span class="line">		<span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;	</span><br><span class="line">		<span class="comment">//4：输出结果</span></span><br><span class="line">		System.out.println(<span class="string">"maxHeight:"</span> + maxHeight);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3. 流程控制语句"></a>3. 流程控制语句</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>
<h3 id="3-1-流程控制语句分类-了解"><a href="#3-1-流程控制语句分类-了解" class="headerlink" title="3.1 流程控制语句分类(了解)"></a>3.1 流程控制语句分类(了解)</h3><p>​    顺序结构</p>
<p>​    分支结构(if, switch)</p>
<p>​    循环结构(for, while, do…while)</p>
<h3 id="3-2-顺序结构-了解"><a href="#3-2-顺序结构-了解" class="headerlink" title="3.2 顺序结构(了解)"></a>3.2 顺序结构(了解)</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>
<p>顺序结构执行流程图：</p>
<p><img src="img/%E5%9B%BE%E7%89%872.png" alt="1545615769372"></p>
<h3 id="3-3-分支结构之if语句"><a href="#3-3-分支结构之if语句" class="headerlink" title="3.3 分支结构之if语句"></a>3.3 分支结构之if语句</h3><h4 id="3-3-1-if语句格式1（理解）"><a href="#3-3-1-if语句格式1（理解）" class="headerlink" title="3.3.1 if语句格式1（理解）"></a>3.3.1 if语句格式1（理解）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式的值</p>
<p>②如果关系表达式的值为true就执行语句体</p>
<p>③如果关系表达式的值为false就不执行语句体</p>
<p>④继续执行后面的语句内容</p>
<p><img src="img/%E5%9B%BE%E7%89%873.png" alt="1545616039363"></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 如果年龄大于18岁, 就可以上网吧</span></span><br><span class="line">		<span class="keyword">int</span> age = <span class="number">17</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">			<span class="comment">// int a = 10;</span></span><br><span class="line">			System.out.println(<span class="string">"可以上网吧"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-if语句格式2（理解）"><a href="#3-3-2-if语句格式2（理解）" class="headerlink" title="3.3.2 if语句格式2（理解）"></a>3.3.2 if语句格式2（理解）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;	</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式的值</p>
<p>②如果关系表达式的值为true就执行语句体1</p>
<p>③如果关系表达式的值为false就执行语句体2</p>
<p>④继续执行后面的语句内容</p>
<p><img src="img/%E5%9B%BE%E7%89%874.png" alt="1545616221283"></p>
<p>示例：奇偶数</p>
<p>​    任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2If</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 程序判断一个数, 是奇数还是偶数</span></span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">9</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"偶数"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"奇数"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-if语句格式3（理解）"><a href="#3-3-3-if语句格式3（理解）" class="headerlink" title="3.3.3 if语句格式3（理解）"></a>3.3.3 if语句格式3（理解）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;	</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;	</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式1的值</p>
<p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p>
<p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p>
<p>④…</p>
<p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p>
<p><img src="img%5C%E5%9B%BE%E7%89%875.png" alt="1545616667104"></p>
<p>示例：</p>
<p>​    定义一个在0<del>100之间的变量a, 90</del>100优秀，80<del>89良好，70</del>79中等，60<del>69及格，0</del>59请努力加油！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3If</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> score = <span class="number">65</span>;</span><br><span class="line">		<span class="keyword">if</span>(score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">89</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">79</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"中等"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">69</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">59</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"请努力加油"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"成绩有误!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-4-if语句格式3案例（应用）"><a href="#3-3-4-if语句格式3案例（应用）" class="headerlink" title="3.3.4 if语句格式3案例（应用）"></a>3.3.4 if语句格式3案例（应用）</h4><p>需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p>
<p>分析：</p>
<p>​    ①小明的考试成绩未知，可以使用键盘录入的方式获取值</p>
<p>​    ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p>
<p>​    ③为每种判断设置对应的条件</p>
<p>​    ④为每种判断设置对应的奖励</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 1. 使用Scanner录入考试成绩</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">"请输入您的成绩:"</span>);</span><br><span class="line">		<span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line">		<span class="comment">// 2. 判断成绩是否在合法范围内 0~100</span></span><br><span class="line">		<span class="keyword">if</span>(score &gt;=<span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">			<span class="comment">// 合法成绩</span></span><br><span class="line">			<span class="comment">// 3. 在合法的语句块中判断成绩范围符合哪一个奖励</span></span><br><span class="line">			<span class="keyword">if</span>(score &gt;= <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">"自行车一辆"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">94</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">"游乐场一次"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">89</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">"变形金刚一个"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">"挨顿揍, 这座城市又多了一个伤心的人~"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 非法的话, 给出错误提示</span></span><br><span class="line">			System.out.println(<span class="string">"您的成绩输入有误!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>接口和多态</title>
    <url>/2021/09/17/Day12_%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h3 id="20-接口"><a href="#20-接口" class="headerlink" title="20. 接口"></a>20. 接口</h3><h5 id="20-1-接口概念"><a href="#20-1-接口概念" class="headerlink" title="20.1 接口概念"></a>20.1 接口概念</h5><p>​    概念：</p>
<p>​        当一个类中的所有方法都是抽象方法的时候，可以定义为==接口==</p>
<p>​        接口是一种的抽象类，比抽象类更抽象</p>
<p>​    存在的意义：</p>
<ul>
<li>定义规则</li>
<li>程序的拓展性</li>
</ul>
<p>​    格式：</p>
<ul>
<li>接口用关键字==interface==来定义</li>
</ul>
<p>​            public interface 接口名｛｝</p>
<ul>
<li>接口不能实例化</li>
</ul>
<ul>
<li><p>类实现接口格式</p>
<p>​    public class 类名 inplements 接口名｛｝</p>
</li>
<li><p>接口的子类（实现类）</p>
<p>​    要么重写接口的所有抽象方法</p>
<p>​    要么是抽象类</p>
</li>
<li><p>多接口的实现</p>
</li>
</ul>
<p>public class 类名 inplements 接口名1，接口名2｛｝</p>
<h5 id="20-2-接头的成员特点"><a href="#20-2-接头的成员特点" class="headerlink" title="20.2 接头的成员特点"></a>20.2 接头的成员特点</h5><ul>
<li><p>成员变量</p>
<ul>
<li>默认是公共静态变量</li>
<li>只能是常量，系统会默认加入“public”、”static”、”final”</li>
<li>不可被修改</li>
</ul>
</li>
<li><p>成员方法</p>
<ul>
<li>默认是公共抽象变量</li>
<li>只能是抽象方法(JDK7之前)</li>
<li>会被系统默认加入“public”、”abstract”</li>
</ul>
</li>
<li><p>构造方法</p>
<ul>
<li>没有构造方法</li>
</ul>
</li>
</ul>
<h5 id="20-2-1-新特性（JDK8之后的）默认和静态方法"><a href="#20-2-1-新特性（JDK8之后的）默认和静态方法" class="headerlink" title="==20.2.1 新特性（JDK8之后的）默认和静态方法=="></a>==20.2.1 新特性（JDK8之后的）默认和静态方法==</h5><p>​    1. <strong>允许在接口中定义非抽象方法，但是需要使用关键字default关键字，这些方法就是默认方法</strong></p>
<p>​        作用：解决接口升级的问题    </p>
<p>默认方法的定义格式:</p>
<ul>
<li>pubic default 返回值类型 方法名（参数列表）｛｝</li>
<li>案例：public default void show(){ }</li>
</ul>
<p>注意事项：</p>
<ul>
<li><p>默认方法不是抽象方法，所以不强制被重写。当时可以别重写，重写的时候去掉default关键字</p>
</li>
<li><p>public可以省略，default不能省略</p>
</li>
<li><p>如果实现了多个接口，多个接口存在相同的方法声明，子类就必须对该方法进行重写</p>
</li>
<li><p>实现类中可以通过==接口名.super==调用对应的父接口中的方法</p>
</li>
</ul>
<ol start="2">
<li><p><strong>接口中允许定义static静态方法</strong></p>
<p>​    作用：拓展接口，方便通过接口名直接调用</p>
</li>
</ol>
<p>格式：</p>
<p>​    public static 返回值类型 方法名（参数列表）｛｝</p>
<p>注意事项：</p>
<ul>
<li>public可以省略,static不会被省略</li>
<li>只能通过接口名直接调用，不能使用实现类名或者实现类对象调用</li>
<li>多实现时，多个接口中有相同的静态方法；实现类不会报错<ul>
<li>实现类无法调用父接口的静态方法</li>
<li>实现类中定义的同名静态方法与静态无关</li>
</ul>
</li>
</ul>
<h5 id="20-2-2-新特性（JDK9之后的）私有方法"><a href="#20-2-2-新特性（JDK9之后的）私有方法" class="headerlink" title="==20.2.2 新特性（JDK9之后的）私有方法=="></a>==20.2.2 新特性（JDK9之后的）私有方法==</h5><p>可以在方法中定义私有方法</p>
<h5 id="20-3-接口的整体使用思路"><a href="#20-3-接口的整体使用思路" class="headerlink" title="20.3 接口的整体使用思路"></a>20.3 接口的整体使用思路</h5><ol>
<li><p>基本使用：</p>
<ol>
<li>如果发现一个类中的所有方法都是抽象方法，就可以定义为一个接口</li>
</ol>
</li>
<li><p>拓展使用：</p>
<ol>
<li>改进为一个接口涉及到了接口大面积更新方法，而不想去修改每一个实现类，就可以将更新方法，定义为歹友方法体的默认方法</li>
<li>希望默认方法调用的更简洁，可以考虑设计为static静态方法（需要去除default）；</li>
<li>默认/静态方法中出现重复的代码，可以考虑抽取出一个私有/静态方法（需要去除default）;</li>
</ol>
</li>
</ol>
<h5 id="20-4-类和接口的关系"><a href="#20-4-类和接口的关系" class="headerlink" title="20.4 类和接口的关系"></a>20.4 类和接口的关系</h5><ul>
<li>类和接口的关系<ul>
<li>实现关系，可以单实现，也可以多实现，还可以继承一个类的同时实现多个接口</li>
<li>如果父类和父接口中初心相同的方法声明，优先是使用父类的方法</li>
</ul>
</li>
<li>类和类的关系<ul>
<li>继承关系，只能单继承，但是可以多层继承</li>
</ul>
</li>
<li>接口和接口的关系<ul>
<li>继承关系，可以单继承，也可以多继承</li>
<li>多个父接口中出现相同的默认方法，子接口需要重写该默认方法</li>
</ul>
</li>
</ul>
<h5 id="20-5-抽象类和接口的关系"><a href="#20-5-抽象类和接口的关系" class="headerlink" title="20.5 抽象类和接口的关系"></a>20.5 抽象类和接口的关系</h5><ul>
<li>对事物本质的抽象用抽象类</li>
<li>对拓展功能的抽象用接口</li>
</ul>
<h3 id="21-多态"><a href="#21-多态" class="headerlink" title="21. 多态"></a>21. 多态</h3><h5 id="21-1-多态概述"><a href="#21-1-多态概述" class="headerlink" title="21.1 多态概述"></a>21.1 多态概述</h5><p>​        概述: 同一个对象，在不同时刻表现出来的不同形态；一个对象可以让不同类型的引用指向他</p>
<p>​        <strong>多态的前提和体现</strong></p>
<ul>
<li>有继承/实现关系</li>
<li>有方法重写</li>
<li>有父类引用指向子类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  父类成员引用子类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//  父类成员引用子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();</span><br><span class="line"></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        Animal b = <span class="keyword">new</span> Animal();</span><br><span class="line">        b.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="21-2-多态特点"><a href="#21-2-多态特点" class="headerlink" title="21.2 多态特点"></a>21.2 多态特点</h5><p>成员变量</p>
<ul>
<li>编译看左边（父类），运行看左边（父类）</li>
</ul>
<p>成员方法</p>
<ul>
<li>编译看左边（父类），运行看右边（子类）</li>
</ul>
<p>构造方法</p>
<ul>
<li>同继承一样，子类会通过super访问父类构造方法</li>
</ul>
<p>成员变量和成员方法的不同</p>
<ul>
<li>成员方法有重写，成员变量没有重写</li>
</ul>
<h5 id="21-3-好处和弊端"><a href="#21-3-好处和弊端" class="headerlink" title="21.3 好处和弊端"></a>21.3 好处和弊端</h5><p>好处：提高了程序的拓展性</p>
<p>​            定义方法的时候，使用父类型作为参数，该方法就可以接受这父类的任意子类对象</p>
<p>弊端：父类/父接口不能使用子类的特有功能</p>
<h5 id="21-4-多态中的类型转换"><a href="#21-4-多态中的类型转换" class="headerlink" title="21.4 多态中的类型转换"></a>21.4 多态中的类型转换</h5><p>​    类型转换：</p>
<ul>
<li><p>向上转型：父类引用指向子类对象   父类对象 =  子类对象</p>
<p>​        解决：</p>
<ul>
<li>重新创建子类对象</li>
<li>向下转型</li>
</ul>
</li>
<li><p>向下转型：从父类类型，转换回子类类型</p>
<ul>
<li>被转换的引用，本身是目标类型</li>
</ul>
</li>
</ul>
<p><strong>存在的风险</strong></p>
<ul>
<li>概述：如果被转的引用类型变量，对应的实际类型和目标类型不是同一个类型，那么在转换的时候就会出现ClassCastException(目标引用异常)</li>
</ul>
<p>解决：</p>
<ul>
<li><p>关键字:instanceof</p>
<p>使用格式：</p>
<p>变量名  instanceof 类型</p>
<p>通俗的理解：判断关键字左边的变量，是否是右边的类型，返回boolean类型结果</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>循环和switch</title>
    <url>/2021/09/01/day03_%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h5 id="4-2-switch语句"><a href="#4-2-switch语句" class="headerlink" title="4.2 switch语句"></a>4.2 switch语句</h5><p>​    格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">1</span>：</span><br><span class="line">	语句体 <span class="number">1</span>；</span><br><span class="line">	<span class="keyword">break</span>；</span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">2</span>：</span><br><span class="line">	语句体 <span class="number">2</span>；</span><br><span class="line">	<span class="keyword">break</span>；</span><br><span class="line">	……</span><br><span class="line">	<span class="keyword">case</span> 值n：</span><br><span class="line">	语句体 n；</span><br><span class="line">	<span class="keyword">break</span>；</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	语句体；</span><br><span class="line">     <span class="keyword">break</span>；</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>​    表达式的结果只能是：byte,short,int,char 字符串，枚举</p>
<p>​    先计算表达式的值，从上到下与case开始匹配,遇到相同的值，开始乡下执行对应的语句体，直到遇到break或者switch才结束，如果没有匹配到case，执行default语句，直到遇到break或switch语句结束才结束。</p>
<p>​    switch 一定能被if取代，能用if的尽量用if，但是有一种情况你可以选择switch，就是做选择的时候，这样的代码看起来比较清爽。</p>
<p>​    </p>
<p>​    case穿透：当语句出现break的时候，就会出现穿透现象</p>
<p>​    当省略break的时候，会继续执行，直到执行到break的时候才会结束；</p>
<p>​    出现多个重复的语句，可以考虑使用case穿透</p>
<h3 id="5-循环语句"><a href="#5-循环语句" class="headerlink" title="5.循环语句"></a>5.循环语句</h3><p>​    循环是可以钱傲的，但是不要去数；</p>
<p>​    嵌套不要超过两次，最多三次；</p>
<p>​    嵌套就要去找规律，然后拼接；</p>
<p>​    外层循环执行一次，内层循环执行一圈；</p>
<h5 id="5-1-for语句"><a href="#5-1-for语句" class="headerlink" title="5.1 for语句"></a>5.1 for语句</h5><p>​    格式： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(初始化；条件判断语句;条件控制语句)&#123;</span><br><span class="line">  循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.首先执行初始化语句；</p>
<p>2.执行条件判断语句</p>
<p>​    true：继续执行</p>
<p>​    false：结束执行</p>
<p>可以和if或者for语句继续嵌套使用</p>
<p>案例：水仙花数：每个位数的立方和等于原数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int num&#x3D;100;num&lt;&#x3D;999;num+&#x3D;1)&#123;</span><br><span class="line">			int a &#x3D; num % 10; </span><br><span class="line">			int b &#x3D; num &#x2F; 10 % 10; </span><br><span class="line">			int c &#x3D; num &#x2F; 10 &#x2F; 10 % 10;</span><br><span class="line">			if(a*a*a+b*b*b+c*c*c&#x3D;&#x3D;num)&#123;</span><br><span class="line">				System.out.println(num);</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>键盘输入：Scanner</p>
<p>求和：sum</p>
<p>统计数：count</p>
<p>随机：Random</p>
<p>案例二：每行打印两个水仙花数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> int count &#x3D; 0 ;</span><br><span class="line"> for(int num&#x3D;100;num&lt;&#x3D;999;num+&#x3D;1)&#123;</span><br><span class="line">			int a &#x3D; num % 10; </span><br><span class="line">			int b &#x3D; num &#x2F; 10 % 10; </span><br><span class="line">			int c &#x3D; num &#x2F; 10 &#x2F; 10 % 10;</span><br><span class="line">			if(a*a*a+b*b*b+c*c*c&#x3D;&#x3D;num)&#123;</span><br><span class="line">				System.out.println(num);</span><br><span class="line">				count++;</span><br><span class="line">				if(count%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-2-while-语句"><a href="#5-2-while-语句" class="headerlink" title="5.2 while 语句"></a>5.2 while 语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(条件判断语句)&#123;</span><br><span class="line">		循环体；</span><br><span class="line">		条件控制语句；</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>和for的操作一致；</p>
<h5 id="5-3-do-while-语句"><a href="#5-3-do-while-语句" class="headerlink" title="5.3 do-while 语句"></a>5.3 do-while 语句</h5><p>​    格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体；</span><br><span class="line">&#125;<span class="keyword">while</span>(判断语句)&#123;  &#125;</span><br></pre></td></tr></table></figure>

<p>​    特点：无论循环条件是否满足，至少会执行一次循环体</p>
<h5 id="5-4-三者的区别"><a href="#5-4-三者的区别" class="headerlink" title="5.4 三者的区别"></a>5.4 三者的区别</h5><p>​    for 和 while：</p>
<p>​    在for语句内的定义的变量，只能在语句内使用，之后就不能够使用了；</p>
<p>​    在while语句内定义的变量，可以在语句外使用，并且不能重复使用；</p>
<h5 id="5-5-死循环"><a href="#5-5-死循环" class="headerlink" title="5.5 死循环"></a>5.5 死循环</h5><p>​    格式：</p>
<p>​    while(true){}</p>
<p>​    for(;;){}</p>
<p>​    do{}while(true){}</p>
<p>应用场景：可以筛选符合对应条件的对象；</p>
<h5 id="5-6-跳转控制语句"><a href="#5-6-跳转控制语句" class="headerlink" title="5.6 跳转控制语句"></a>5.6 跳转控制语句</h5><p>​    countinue; 跳过这次循环</p>
<p>​    break;  结束当前循环</p>
<p>​    只能在循环或switch里面使用</p>
<h3 id="6-Random-产生随机数"><a href="#6-Random-产生随机数" class="headerlink" title="6.Random 产生随机数"></a>6.Random 产生随机数</h3><h5 id="6-1-Random"><a href="#6-1-Random" class="headerlink" title="6.1 Random"></a>6.1 Random</h5><p>​    格式：</p>
<p>​    1.导包 <code>import java.unitl.Random;</code></p>
<p>​    2.创建对象 <code>Random i = new Random();</code></p>
<p>​    3.接受随机数 <code>int num = i.nextInt(整数);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1-10</span></span><br><span class="line"><span class="keyword">int</span> num = i.nextInt((<span class="number">10</span>-<span class="number">1</span>))+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA和数组</title>
    <url>/2021/09/03/day04-IDEA%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="第一部分-IDEA开发工具"><a href="#第一部分-IDEA开发工具" class="headerlink" title="第一部分 : IDEA开发工具"></a>第一部分 : IDEA开发工具</h2><p><strong>参见 ：IEDA的安装请参考文件夹PPT中的 04_IDEA.ppt</strong></p>
<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><h3 id="1-1-数组介绍"><a href="#1-1-数组介绍" class="headerlink" title="1.1 数组介绍"></a>1.1 数组介绍</h3><p>​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p>
<h3 id="1-2-数组的定义格式"><a href="#1-2-数组的定义格式" class="headerlink" title="1.2 数组的定义格式"></a>1.2 数组的定义格式</h3><h4 id="1-2-1-第一种格式"><a href="#1-2-1-第一种格式" class="headerlink" title="1.2.1 第一种格式"></a>1.2.1 第一种格式</h4><p>​    数据类型[] 数组名</p>
<p>​    示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;        </span><br><span class="line"><span class="keyword">double</span>[] arr;      </span><br><span class="line"><span class="keyword">char</span>[] arr;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-第二种格式"><a href="#1-2-2-第二种格式" class="headerlink" title="1.2.2 第二种格式"></a>1.2.2 第二种格式</h4><p>​    数据类型 数组名[]</p>
<p>​    示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[];</span><br><span class="line"><span class="keyword">double</span> arr[];</span><br><span class="line"><span class="keyword">char</span> arr[];</span><br></pre></td></tr></table></figure>

<h3 id="1-3-数组的动态初始化"><a href="#1-3-数组的动态初始化" class="headerlink" title="1.3 数组的动态初始化"></a>1.3 数组的动态初始化</h3><h4 id="1-3-1-什么是动态初始化"><a href="#1-3-1-什么是动态初始化" class="headerlink" title="1.3.1 什么是动态初始化"></a>1.3.1 什么是动态初始化</h4><p>​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值</p>
<h4 id="1-3-2-动态初始化格式"><a href="#1-3-2-动态初始化格式" class="headerlink" title="1.3.2 动态初始化格式"></a>1.3.2 动态初始化格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-动态初始化格式详解"><a href="#1-3-3-动态初始化格式详解" class="headerlink" title="1.3.3 动态初始化格式详解"></a>1.3.3 动态初始化格式详解</h4><ul>
<li>等号左边：<ul>
<li>int:数组的数据类型</li>
<li>[]:代表这是一个数组</li>
<li>arr:代表数组的名称</li>
</ul>
</li>
<li>等号右边：<ul>
<li>new:为数组开辟内存空间</li>
<li>int:数组的数据类型</li>
<li>[]:代表这是一个数组</li>
<li>3:代表数组的长度</li>
</ul>
</li>
</ul>
<p><strong>代码 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Array</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        数组的动态初始化:</span></span><br><span class="line"><span class="comment">                        在初始化的时候, 需要手动指定数组的长度, 系统会为数组容器分配初始值.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        动态初始化格式:</span></span><br><span class="line"><span class="comment">                        数据类型[] 数组名 = new 数据类型[数组的长度];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">                        打印数组变量的时候, 会打印出数组的内存地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        [I@10f87f48 :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        @ : 分隔符</span></span><br><span class="line"><span class="comment">                        [ : 当前的空间是一个数组类型</span></span><br><span class="line"><span class="comment">                        I : 当前数组容器中所存储的数据类型</span></span><br><span class="line"><span class="comment">                        10f87f48 : 十六进制内存地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                                0 1 2 3 4 5 6 7 8 9 a b c d e f</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据类型[] 数组名 = new 数据类型[数组的长度];</span></span><br><span class="line">        <span class="comment">// 通过new关键字创建了一个int类型的数组容器, 该容器可以存储5个int类型的整数, 该容器被arr数组变量所记录</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// [I@10f87f48</span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">// [B@b4c966a</span></span><br><span class="line">        System.out.println(bArr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-数组元素访问"><a href="#1-4-数组元素访问" class="headerlink" title="1.4 数组元素访问"></a>1.4 数组元素访问</h3><h4 id="1-4-1-什么是索引"><a href="#1-4-1-什么是索引" class="headerlink" title="1.4.1 什么是索引"></a>1.4.1 什么是索引</h4><p>​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始,是连续的,不间断的,每次加1。</p>
<p>​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     </p>
<h4 id="1-4-2访问数组元素格式"><a href="#1-4-2访问数组元素格式" class="headerlink" title="1.4.2访问数组元素格式"></a>1.4.2访问数组元素格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组名[索引];</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3示例代码"><a href="#1-4-3示例代码" class="headerlink" title="1.4.3示例代码"></a>1.4.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3ArrayIndex</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        数组动态初始化:</span></span><br><span class="line"><span class="comment">                初始化的时候, 手动指定数组长度, 系统会为数组容器分配初始值.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        数组的元素访问格式:</span></span><br><span class="line"><span class="comment">                数组名[索引]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                索引: 数组中数据的编号方式, 编号从0开始</span></span><br><span class="line"><span class="comment">                作用: 访问数组容器中的空间位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">                数组在创建完毕后, 即使没有赋值, 也可以取出, 但取出的元素都是默认初始化值.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];         <span class="comment">// 0 1 2</span></span><br><span class="line">        System.out.println(arr);        <span class="comment">// 数组的内存地址  [I@10f87f48</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组名[索引]  访问数组容器中的空间位置</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);     <span class="comment">// 0  系统自动分配的默认初始化值</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组名[索引]</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-内存分配"><a href="#1-5-内存分配" class="headerlink" title="1.5 内存分配"></a>1.5 内存分配</h3><h4 id="1-5-1-内存概述"><a href="#1-5-1-内存概述" class="headerlink" title="1.5.1 内存概述"></a>1.5.1 内存概述</h4><p>​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p>
<p>​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p>
<p>​    必须放进内存中才能运行，运行完毕后会清空内存。 </p>
<p>​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p>
<h4 id="1-5-2-java中的内存分配"><a href="#1-5-2-java中的内存分配" class="headerlink" title="1.5.2 java中的内存分配"></a>1.5.2 java中的内存分配</h4><ul>
<li>目前我们只需要记住两个内存，分别是：栈内存和堆内存</li>
</ul>
<table>
<thead>
<tr>
<th>区域名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>寄存器</td>
<td>给CPU使用，和我们开发无关。</td>
</tr>
<tr>
<td>本地方法栈</td>
<td>JVM在使用操作系统功能的时候使用，和我们开发无关。</td>
</tr>
<tr>
<td>方法区</td>
<td>存储可以运行的class文件。</td>
</tr>
<tr>
<td>堆内存</td>
<td>存储对象或者数组，new来创建的，都存储在堆内存。</td>
</tr>
<tr>
<td>方法栈</td>
<td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td>
</tr>
</tbody></table>
<h3 id="1-6-Java内存分配-一个数组内存图"><a href="#1-6-Java内存分配-一个数组内存图" class="headerlink" title="1.6 Java内存分配-一个数组内存图"></a>1.6 Java内存分配-一个数组内存图</h3><p><img src=".%5Cimg%5C1591007817165.png" alt="1591007817165"></p>
<h3 id="1-7-两个数组内存图"><a href="#1-7-两个数组内存图" class="headerlink" title="1.7 两个数组内存图"></a>1.7 两个数组内存图</h3><p><img src=".%5Cimg%5C1591007925899.png" alt="1591007925899"></p>
<h3 id="1-8-多个数组指向相同内存图"><a href="#1-8-多个数组指向相同内存图" class="headerlink" title="1.8 多个数组指向相同内存图"></a>1.8 多个数组指向相同内存图</h3><p><img src=".%5Cimg%5C1591007957052.png" alt="1591007957052"></p>
<h3 id="1-9-数组的静态初始化"><a href="#1-9-数组的静态初始化" class="headerlink" title="1.9 数组的静态初始化"></a>1.9 数组的静态初始化</h3><h4 id="1-9-1-什么是静态初始化"><a href="#1-9-1-什么是静态初始化" class="headerlink" title="1.9.1 什么是静态初始化"></a>1.9.1 什么是静态初始化</h4><p>​    在创建数组时，直接将元素确定    </p>
<h4 id="1-9-2-静态初始化格式"><a href="#1-9-2-静态初始化格式" class="headerlink" title="1.9.2 静态初始化格式"></a>1.9.2 静态初始化格式</h4><ul>
<li><p>完整版格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>简化版格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-9-3示例代码"><a href="#1-9-3示例代码" class="headerlink" title="1.9.3示例代码"></a>1.9.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.array2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Array</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        数组静态初始化 : 初始化时指定每个数组元素的初始值，由系统决定数组长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        完整格式:</span></span><br><span class="line"><span class="comment">                    数据类型[] 数组名 = new 数据类型[]&#123;数据1,数据2,数据3...&#125;;</span></span><br><span class="line"><span class="comment">        简化格式:</span></span><br><span class="line"><span class="comment">                    数据类型[] 数组名 = &#123;数据1,数据2,数据3...&#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据类型[] 数组名 = new 数据类型[]&#123;数据1,数据2,数据3...&#125;;</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据类型[] 数组名 = &#123;数据1,数据2,数据3...&#125;;</span></span><br><span class="line">        <span class="keyword">int</span>[] arr2 = &#123;<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-10-数组操作的两个常见问题"><a href="#1-10-数组操作的两个常见问题" class="headerlink" title="1.10 数组操作的两个常见问题"></a>1.10 数组操作的两个常见问题</h3><h4 id="1-10-1-索引越界异常"><a href="#1-10-1-索引越界异常" class="headerlink" title="1.10.1 索引越界异常"></a>1.10.1 索引越界异常</h4><ul>
<li><p>出现原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</p>
<p>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p>
</li>
<li><p>解决方案</p>
<p>将错误的索引修改为正确的索引范围即可！</p>
</li>
</ul>
<h4 id="1-10-2-空指针异常"><a href="#1-10-2-空指针异常" class="headerlink" title="1.10.2 空指针异常"></a>1.10.2 空指针异常</h4><ul>
<li><p>出现原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把null赋值给数组</span></span><br><span class="line">        arr = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的空指针是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p>
</li>
<li><p>解决方案</p>
<p>给数组一个真正的堆内存空间引用即可！</p>
</li>
</ul>
<h3 id="1-11-数组遍历"><a href="#1-11-数组遍历" class="headerlink" title="1.11 数组遍历"></a>1.11 数组遍历</h3><ul>
<li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">		System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用通用的遍历格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            System.out.println(arr[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-12-数组获取最大值"><a href="#1-12-数组获取最大值" class="headerlink" title="1.12 数组获取最大值"></a>1.12 数组获取最大值</h3><ul>
<li><p>最大值获取：从数组的所有元素中找出最大值。</p>
</li>
<li><p>实现思路：</p>
<ul>
<li>定义变量，保存数组0索引上的元素</li>
<li>遍历数组，获取出数组中的每个元素</li>
<li>将遍历到的元素和保存数组0索引上值的变量进行比较</li>
<li>如果数组元素的值大于了变量的值，变量记录住新的值</li>
<li>数组循环遍历结束，变量保存的就是数组中的最大值 </li>
</ul>
</li>
<li><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2Array</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求: 从数组中查找最大值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                int[] arr = &#123;12,45,98,73,60&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        实现步骤:</span></span><br><span class="line"><span class="comment">                1. 假设数组中的第一个元素为最大值</span></span><br><span class="line"><span class="comment">                2. 遍历数组, 获取每一个元素, 准备进行比较</span></span><br><span class="line"><span class="comment">                3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值</span></span><br><span class="line"><span class="comment">                4. 循环结束后, 打印最大值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">45</span>,<span class="number">98</span>,<span class="number">73</span>,<span class="number">60</span>&#125;;</span><br><span class="line">        <span class="comment">// 1. 假设数组中的第一个元素为最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 2. 遍历数组, 获取每一个元素, 准备进行比较</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  4. 循环结束后, 打印最大值.</span></span><br><span class="line">        System.out.println(<span class="string">"max:"</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-13-数组元素求和"><a href="#1-13-数组元素求和" class="headerlink" title="1.13 数组元素求和"></a>1.13 数组元素求和</h3><ul>
<li><p>需求：键盘录入5个整数，存储到数组中，并对数组求和</p>
</li>
<li><p>思路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.创建键盘录入对象，准备键盘录入</span><br><span class="line">2.定义一个求和变量，准备记录累加后的结果</span><br><span class="line">3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值</span><br><span class="line">4.将键盘录入的数值存储到数组中</span><br><span class="line">5.遍历数组，取出每一个元素，并求和</span><br><span class="line">6.输出总和</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3Array</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求：键盘录入5个整数，存储到数组中，并对数组求和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        思路：</span></span><br><span class="line"><span class="comment">            1.创建键盘录入对象，准备键盘录入</span></span><br><span class="line"><span class="comment">            2.定义一个求和变量，准备记录累加后的结果</span></span><br><span class="line"><span class="comment">            3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值</span></span><br><span class="line"><span class="comment">            4.将键盘录入的数值存储到数组中</span></span><br><span class="line"><span class="comment">            5.遍历数组，取出每一个元素，并求和</span></span><br><span class="line"><span class="comment">            6.输出总和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建键盘录入对象，准备键盘录入</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 2.定义一个求和变量，准备记录累加后的结果</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 4.将键盘录入的数值存储到数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入第"</span> + (i+<span class="number">1</span>) + <span class="string">"个整数:"</span>);</span><br><span class="line">            <span class="comment">//arr[i] = 10;</span></span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.遍历数组，取出每一个元素，并求和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.输出总和</span></span><br><span class="line">        System.out.println(<span class="string">"sum:"</span> + sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-14-数组基本查找【应用】"><a href="#1-14-数组基本查找【应用】" class="headerlink" title="1.14 数组基本查找【应用】"></a>1.14 数组基本查找【应用】</h3><ul>
<li><p>需求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">已知一个数组 arr &#x3D; &#123;19, 28, 37, 46, 50&#125;; 键盘录入一个数据，查找该数据在数组中的索引，并在控</span><br><span class="line">制台输出找到的索引值。</span><br></pre></td></tr></table></figure>
</li>
<li><p>思路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.定义一个数组，用静态初始化完成数组元素的初始化</span><br><span class="line">2.键盘录入要查找的数据，用一个变量接收</span><br><span class="line">3.定义一个索引变量，初始值为-1</span><br><span class="line">4.遍历数组，获取到数组中的每一个元素</span><br><span class="line">5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环</span><br><span class="line">6.输出索引变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.键盘录入要查找的数据，用一个变量接收</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入您要查找的元素:"</span>);</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        <span class="comment">// 3.定义一个索引变量，初始值为-1</span></span><br><span class="line">        <span class="comment">// 假设要查找的数据, 在数组中就是不存在的</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 4.遍历数组，获取到数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环</span></span><br><span class="line">            <span class="keyword">if</span>(num == arr[i])&#123;</span><br><span class="line">                <span class="comment">// 如果值相同，就把该值对应的索引赋值给索引变量，并结束循环</span></span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  6.输出索引变量</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-15-评委打分【应用】"><a href="#1-15-评委打分【应用】" class="headerlink" title="1.15 评委打分【应用】"></a>1.15 评委打分【应用】</h3><ul>
<li><p>需求：在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。</span><br></pre></td></tr></table></figure>
</li>
<li><p>思路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.定义一个数组，用动态初始化完成数组元素的初始化，长度为6</span><br><span class="line">2.键盘录入评委分数</span><br><span class="line">3.由于是6个评委打分，所以，接收评委分数的操作，用循环</span><br><span class="line">4.求出数组最大值</span><br><span class="line">5.求出数组最小值</span><br><span class="line">6.求出数组总和</span><br><span class="line">7.按照计算规则进行计算得到平均分</span><br><span class="line">8.输出平均分</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义一个数组，用动态初始化完成数组元素的初始化，长度为6</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="comment">// 2.键盘录入评委分数</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//  3.由于是6个评委打分，所以，接收评委分数的操作，用循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入第"</span> + (i+<span class="number">1</span>) + <span class="string">"个评委的打分:"</span>);</span><br><span class="line">            <span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="comment">// 合法的分值</span></span><br><span class="line">                arr[i] = score;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 非法的分值</span></span><br><span class="line">                System.out.println(<span class="string">"您的打分输入有误, 请检查是否是0-100之间的"</span>);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.求出数组最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i])&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.求出数组最小值</span></span><br><span class="line">        <span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; arr[i])&#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.求出数组总和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.按照计算规则进行计算得到平均分</span></span><br><span class="line">        <span class="keyword">int</span> avg = (sum - max - min ) / (arr.length-<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8.输出平均分</span></span><br><span class="line">        System.out.println(avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="总结数组"><a href="#总结数组" class="headerlink" title="总结数组"></a>总结数组</h3><p>  第一种：动态初始化格式</p>
<p>  建议:数据类型 [] 数组名 = new 数据类型 [数组的长度];</p>
<p>  数据类型  数组名  []  =  new    数据类型 [数组的长度]; </p>
<p>  第二种：静态初始化格式</p>
<p>  数据类型 数组名 [] = new 数据类型 [] {元素1，元素2，元素3…..};—-&gt;简化   </p>
<p>  用的比较多的:数据类型  数组名 [] = {元素1，元素2，元素3…..};</p>
<p>  数组的好处：</p>
<p>  1.可以一次开辟多个空间</p>
<p>  2.可以对这多个空间进行统一管理</p>
<p>  3.数组定义好之后，每个数组空间都有一个唯一编号（索引，下标，角标），我们在操作数组的时候，都是对统一的数组名和对应的索引来操作数组的每一个空间。赋值:数组名[索引]=值;  拿值:数组名[索引]</p>
<p>  4.数组的索引是从0开始，到长度-1结束.</p>
<p>  5.我们可以通过数组名.length这个属性来获取数组的长度。</p>
<p>  6.获取数组对应索引空间上的数据：数组名[当前的索引]</p>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>java的方法的使用</title>
    <url>/2021/09/04/day05-%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="8-方法"><a href="#8-方法" class="headerlink" title="8.方法"></a>8.方法</h3><p>​    前提须知：</p>
<p>​    需要先定义，后使用</p>
<p>​    需要手动调用<br>​    方法不能嵌套定义；</p>
<p>​    方法的返回值类型为void的时候，表示该方法么有返回值</p>
<p>​    return语句下面，不能编译代码，和break类似</p>
<h5 id="8-1-基本概念"><a href="#8-1-基本概念" class="headerlink" title="8.1 基本概念"></a>8.1 基本概念</h5><p>​        概念：具有独立功能的代码块，不调用就不执行</p>
<p>​        作用：提高代码的复用性</p>
<h5 id="8-2-定义和使用"><a href="#8-2-定义和使用" class="headerlink" title="8.2 定义和使用"></a>8.2 定义和使用</h5><p>​        方法之间是平级关系，不能嵌套；</p>
<p>​        格式：</p>
<p>​    <code>public static void 方法名(){ 方法体 }</code></p>
<p>​        调用方法：</p>
<p>​        方法名();</p>
<h5 id="8-3-带参数的定义和使用"><a href="#8-3-带参数的定义和使用" class="headerlink" title="8.3 带参数的定义和使用"></a>8.3 带参数的定义和使用</h5><p>​        格式：<br>​             <code>public static void 方法名(数据类型 变量名 ){ 方法体 }</code></p>
<p>​        多个参数之间用逗号分隔</p>
<p>​        调用方法：</p>
<p>​        方法名(参数)；</p>
<h6 id="8-3-1-形参和实参"><a href="#8-3-1-形参和实参" class="headerlink" title="8.3.1 形参和实参"></a>8.3.1 形参和实参</h6><p>​        形式参数：方法定义中的参数</p>
<p>​        <code>方法名(数据类型 变量名 )</code>   // 这里面的变量名就是形参</p>
<p>​        实际参数： 方法的调用中的参数</p>
<p>​        <code>方法名(数据1)；</code> // 这里面调用的数据1就是实参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##### 	8.4 带返回值方法的定义和调用</span><br></pre></td></tr></table></figure>

<p>​    格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static 数据类型 方法名（参数）&#123; </span><br><span class="line">方法体 </span><br><span class="line">return 数据值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    调用：</p>
<p>​    <code>方法名（参数）；</code></p>
<p>​    <code>数据类型 变量名 = 方法名（变量名/常量值）；</code></p>
<ul>
<li>public static 修饰符</li>
</ul>
<ul>
<li>方法操作完毕之后，返回的结果数据，所对应的数据类型</li>
</ul>
<ul>
<li>如果方法结束后，没有数据返回，就是用void,而且方法体重一般不写return</li>
</ul>
<p>作用：把返回值返回给调用者</p>
<p>注意：只要执行了return语句，该方法就结束了</p>
<h5 id="8-5-方法的重载"><a href="#8-5-方法的重载" class="headerlink" title="8.5 方法的重载"></a>8.5 方法的重载</h5><p>​        </p>
<p>​        方法的重复定义：方法名相同，参数也相同   // 冲突性错误       </p>
<p>​        概述：同一个类中，方法名相同，参数不同的方法</p>
<p>​            参数不同；个数不听、类型不同、顺序不同</p>
<p>​        注意：识别方法之间是否是重载关系，只看方法名和参数，和返回值无关</p>
<p>​    优点：不用记忆过多的方法民资</p>
<h5 id="8-6-方法的参数传递"><a href="#8-6-方法的参数传递" class="headerlink" title="8.6 方法的参数传递"></a>8.6 方法的参数传递</h5><p>​        结论：</p>
<p>​        如果方法参数是基本数据类型，形参的改变，不会影响到实参</p>
<p>​        如果方法参数是引用数据类型，形参的改变，会影响到实参</p>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>java进制的学习</title>
    <url>/2021/09/06/day06-%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<h3 id="9-进制"><a href="#9-进制" class="headerlink" title="9. 进制"></a>9. 进制</h3><h5 id="9-1-基本概念"><a href="#9-1-基本概念" class="headerlink" title="9.1 基本概念"></a>9.1 基本概念</h5><p>​        进制： 二进制 、十进制、十六进制</p>
<p>​    计算机数据在底层运算的时候，都是<u>二进制的形式</u>的</p>
<p>​    进制：逢几进1，借1当几，就是几进制</p>
<p>​    二进制 ： 0和1构成   逢2 进 1</p>
<p>​    十进制：Java中，数值默认都是10进制，不需要加修饰</p>
<p>​    二进制：数值前面0b开头，b大小写都可以</p>
<p>​    八进制：数值前面以0开头</p>
<p>​    十六进制：数值前面以0x开头，x大小写都可以</p>
<p>​    注意：书写的时候，虽然加入了进制的表示，但是在控制台，都是十进制的形式输出</p>
<p>​     </p>
<h5 id="9-2-进制转换"><a href="#9-2-进制转换" class="headerlink" title="9.2 进制转换"></a>9.2 进制转换</h5><p>​    任意进制到十进制的转换</p>
<p>​    系数*基数的权次幂</p>
<p>​    系数：每一位上的数</p>
<p>​    基数：几进制就是几</p>
<p>​    权次幂：从右往左，从0开始依次加一</p>
<p>​    </p>
<p>​    十进制转任意进制的</p>
<p>​    公式： 除基取余，直到商为0，倒着把余数拼接起来</p>
<p>​    </p>
<p>​    二进制转任意进制的</p>
<p>​    0000 0000</p>
<p>​    8421 8421</p>
<p>​    几进制的就对位之和，转换为该进制的书写</p>
<p>​    八进制取三位，十六进制取四位</p>
<h5 id="9-3-原码-反码-补码"><a href="#9-3-原码-反码-补码" class="headerlink" title="9.3 原码 反码 补码"></a>9.3 原码 反码 补码</h5><p>​        计算机中的数据，都是以二进制补码的形式在运算，而补码则是通过反码和原码推算出来的。</p>
<p>​    原码：（看数据）</p>
<p>​    反码：（转数据）原码0变1，1变</p>
<p>​    补码：（运算数据）反码各位加1<br>​    </p>
<p>​    byte -128~127</p>
<p>​    (正数的原反补是一样的，负的的0和正的0没有意义，就把负数的0，成为-128)</p>
<h5 id="9-4-位运算符"><a href="#9-4-位运算符" class="headerlink" title="9.4 位运算符"></a>9.4 位运算符</h5><p>​    位运算符：二进制位的运算，先将十进制转成二进制后在进行运算</p>
<p>​            在二进制运算中，1表示true ，0表示false</p>
<p>​    &amp;位与：遇到false就是false，遇到0就是0；</p>
<p>​    |位或：遇到true则true,遇到1则1</p>
<p>​    ^位异或：相同为false,不同的为true ；  一个数被另一个数异或两次，得到的还是该数</p>
<p>​    ~ 取反：全部取反，0变1，1变0；</p>
<p>​    </p>
<p>​    <strong>一个数和本身异或结果是 0</strong></p>
<p>​    <strong>任何数和0异或的到任何数</strong></p>
<p>​    </p>
<p>​    位移运算</p>
<p>​    &lt;&lt; : 左移几位，乘2的几次方</p>
<p>​    &gt;&gt;：右移几位，除2的几次方</p>
<p> <img src="/image/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="位运算符"></p>
<h3 id="10-二维数组"><a href="#10-二维数组" class="headerlink" title="10. 二维数组"></a>10. 二维数组</h3><h5 id="10-1-二维数组概念"><a href="#10-1-二维数组概念" class="headerlink" title="10.1 二维数组概念"></a>10.1 二维数组概念</h5><p>​        概念： 存储多个一维数组的容器</p>
<p>​                    二维数组里面存在的一堆数组的地址         </p>
<p>​        格式： 数据类型 <code>[]</code> <code>[]</code> 变量名 = new 数据类型<code>[m]</code> <code>[n]</code></p>
<p>​        </p>
<p>​    遍历</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">  for(int j&#x3D;0;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">  System.out.println(arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2021/09/07/day07-%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="11-类和对象"><a href="#11-类和对象" class="headerlink" title="11. 类和对象"></a>11. 类和对象</h3><p>三大特征：封装、继承、多态</p>
<p>面对过程思想：自己一步步实现需求<br>面向对象思想：指挥别人干活</p>
<h5 id="11-1-类"><a href="#11-1-类" class="headerlink" title="11.1 类"></a>11.1 类</h5><p>​    11.1.1 类的组成</p>
<p>​        类：现实生活中具有共同属性和行为事物的抽象<br>​    用java语言去对一类事物的共性（属性和行为）进行总结和描述，类似于一类事物的模板；</p>
<p>​        对象：真实存在的个体</p>
<p>​    在java中，用new关键字创建出来的实体，在堆内存中产生<br>​    </p>
<p>​    <strong>定义：</strong></p>
<p>​    类的属性：成员变量（类中方法外的变量）</p>
<p>​    行为：成员方法（去掉static的方法）</p>
<p>​    使用属性：对象名、属性名 既可以存值也可以取值</p>
<p>​    属性行为：对象名、方法名（）</p>
<p>​    自定义类  模板类  没有住方法  不需要运行</p>
<p>​    垃圾回收</p>
<p>​    注意：当堆内存中，对象或数组产生的地址，通过任何方式都不能被找到后，就会被判定为内存找那个的’垃圾’ ，垃圾会被java垃圾回收器，空闲的时候自动进行清理</p>
<h5 id="11-2-局部变量和成员变量"><a href="#11-2-局部变量和成员变量" class="headerlink" title="11.2 局部变量和成员变量"></a>11.2 局部变量和成员变量</h5><p>​    1.局部变量：方法中的变量<br>​    2.成员变量：类中方法外的变量</p>
<p><img src="/image/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F.png" alt="局部变量和成员变量"></p>
<h5 id="11-3-封装"><a href="#11-3-封装" class="headerlink" title="11.3 封装"></a>11.3 封装</h5><p>​    隐藏实现细节，仅对外暴露公共的访问方式<br>​    体现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 私有成员变量，提供setXxx和getXxx</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 将代码抽取到方法中，这是对代码的一种分装</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 将属性抽取到类当中，这是对数据表的一种分装</span><br></pre></td></tr></table></figure>

<p>​      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优点： 安全 提高复用性</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h6 id="11-3-1-private私有化"><a href="#11-3-1-private私有化" class="headerlink" title="11.3.1 private私有化"></a><strong>11.3.1 private私有化</strong></h6><p>​    关键字：private</p>
<p>​    是一个权限修饰符<br>​    私有化，只能在本类中使用变量</p>
<h6 id="11-3-2-this关键字"><a href="#11-3-2-this关键字" class="headerlink" title="11.3.2 this关键字"></a>11.3.2 this关键字</h6><p>​    方法名中的变量名和私有化的变量名相同的时候，使用this关键字</p>
<p>​    this.变量名</p>
<p><code>return age</code>     //  <code>this this.age</code></p>
<p>​    概念:代表所在类的对象的引用</p>
<p>​        方法被哪个对象调动，this就代表那个对象</p>
<h5 id="11-4-构造方法"><a href="#11-4-构造方法" class="headerlink" title="11.4 构造方法"></a>11.4 构造方法</h5><p>​        分别提供一个有参的，和无参的 方法</p>
<h6 id="11-4-1-基本概念"><a href="#11-4-1-基本概念" class="headerlink" title="11.4.1 基本概念"></a>11.4.1 基本概念</h6><p>​            基本概念：构建、构造对象的时候，所调用的方法；</p>
<p>​            格式：</p>
<p>​            1.方法名和类名相同，大小也要一致</p>
<p>​            2.没有返回值的类型，连void都没有</p>
<p>​            3.没有具体的返回值（不能有return带回具体的结果）</p>
<p>​    </p>
<p>​    执行时机：没有构造的时候，系统默认提供一个无参构造：</p>
<p>​        1.创建对象的时候调用，每创建一次对象的时候，就会执行一次构造方法；</p>
<p>​        2.不能手动调用构造方法；</p>
<p>​    </p>
<p>​        格式：</p>
<p>​    public  变量名(){    }</p>
<p>​        </p>
<p>​        作用： 用于给对象的数据(属性)进行初始化</p>
<p>​    <strong>JavaBean类：封装数据</strong></p>
<p>​    标准类的书写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubic <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">  <span class="comment">// 私有化属性</span></span><br><span class="line"> <span class="comment">// 无参构造</span></span><br><span class="line"> <span class="comment">// 满参构造</span></span><br><span class="line"> <span class="comment">// get/set方法</span></span><br><span class="line"> <span class="comment">// 行为</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​        </p>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>API和String的使用</title>
    <url>/2021/09/09/day08-String%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1-API概述-帮助文档的使用"><a href="#1-1-API概述-帮助文档的使用" class="headerlink" title="1.1 API概述-帮助文档的使用"></a>1.1 API概述-帮助文档的使用</h3><ul>
<li><p>什么是API</p>
<p>​    API (Application Programming Interface) ：应用程序编程接口</p>
</li>
<li><p>java中的API</p>
<p>​    指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>
</li>
</ul>
<p><strong>如何使用API帮助文档 :</strong> </p>
<ul>
<li>打开帮助文档</li>
<li>找到索引选项卡中的输入框</li>
<li>在输入框中输入Random</li>
<li>看类在哪个包下</li>
<li>看类的描述</li>
<li>看构造方法</li>
<li>看成员方法</li>
</ul>
<h3 id="1-2-键盘录入字符串"><a href="#1-2-键盘录入字符串" class="headerlink" title="1.2 键盘录入字符串"></a>1.2 键盘录入字符串</h3><p><strong>Scanner类 :</strong></p>
<p>​    next() : 遇到了空格, 就不再录入数据了 , 结束标记: 空格, tab键</p>
<p>​    nextLine() : 可以将数据完整的接收过来 , 结束标记: 回车换行符       </p>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Demo1Scanner &#123;   </span><br><span class="line">&#x2F;*        next() : 遇到了空格, 就不再录入数据了                结束标记: 空格, tab键       </span><br><span class="line">nextLine() : 可以将数据完整的接收过来              </span><br><span class="line">结束标记: 回车换行符     *&#x2F;  </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">&#x2F;&#x2F; 1. 创建Scanner对象      </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入:&quot;);      </span><br><span class="line">&#x2F;&#x2F; 2. 调用nextLine方法接收字符串       </span><br><span class="line">&#x2F;&#x2F; ctrl + alt + v : 快速生成方法的返回值     </span><br><span class="line">String s &#x3D; sc.nextLine();    </span><br><span class="line">System.out.println(s);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Demo2Scanner &#123;   </span><br><span class="line">&#x2F;*    nextInt和nextLine方法配合使用的时候, nextLine方法就没有键盘录入的机会了        建议: 今后键盘录入数据的时候, 如果是字符串和整数一起接受, 建议使用next方法接受字符串.     *&#x2F;  </span><br><span class="line">public static void main(String[] args) &#123;   </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入整数:&quot;);     </span><br><span class="line">int num &#x3D; sc.nextInt(); &#x2F;&#x2F; 10 + 回车换行        System.out.println(&quot;请输入字符串:&quot;);     </span><br><span class="line">String s &#x3D; sc.nextLine();     </span><br><span class="line">System.out.println(num);       </span><br><span class="line">System.out.println(s);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2. String类"></a>2. String类</h2><h3 id="2-1-String概述"><a href="#2-1-String概述" class="headerlink" title="2.1 String概述"></a>2.1 String概述</h3><p>​    1 String 类在 java.lang 包下，所以使用的时候不需要导包</p>
<p>​    2 String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象</p>
<p>​    3 字符串不可变，它们的值在创建后不能被更改</p>
<h3 id="2-2-String类的构造方法"><a href="#2-2-String类的构造方法" class="headerlink" title="2.2 String类的构造方法"></a>2.2 String类的构造方法</h3><p><strong>常用的构造方法</strong></p>
<p><img src="image/Sting%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="1590939947722"></p>
<p><strong>示例代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;       String类常见构造方法:      </span><br><span class="line">public String() : 创建一个空白字符串对象，不含有任何内容            public String(char[] chs) : 根据字符数组的内容，来创建字符串对象      public String(String original) : 根据传入的字符串内容，来创建字符串对象            String s &#x3D; “abc”;  直接赋值的方式创建字符串对象，内容就是abc         注意:                String这个类比较特殊, 打印其对象名的时候, 不会出现内存地址                而是该对象所记录的真实内容.                面向对象-继承, Object类     *&#x2F;   </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">&#x2F;&#x2F; public String() : 创建一个空白字符串对象，不含有任何内容        String s1 &#x3D; new String();     </span><br><span class="line">System.out.println(s1);       </span><br><span class="line">&#x2F;&#x2F; public String(char[] chs) : 根据字符数组的内容，来创建字符串对象    char[] chs &#x3D; &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;    </span><br><span class="line">String s2 &#x3D; new String(chs);     </span><br><span class="line">System.out.println(s2);       </span><br><span class="line">&#x2F;&#x2F; public String(String original) : 根据传入的字符串内容，来创建字符串对象      </span><br><span class="line">String s3 &#x3D; new String(&quot;123&quot;);    </span><br><span class="line">System.out.println(s3);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建字符串对象的区别对比"><a href="#2-4-创建字符串对象的区别对比" class="headerlink" title="2.4 创建字符串对象的区别对比"></a>2.4 创建字符串对象的区别对比</h3><ul>
<li><p><strong>通过构造方法创建</strong></p>
<p>​    通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p>
</li>
<li><p><strong>直接赋值方式创建</strong></p>
<p>​    以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p>
</li>
</ul>
<h3 id="2-5-字符串的比较"><a href="#2-5-字符串的比较" class="headerlink" title="2.5 字符串的比较"></a>2.5 字符串的比较</h3><h4 id="2-5-1-字符串的比较"><a href="#2-5-1-字符串的比较" class="headerlink" title="2.5.1 字符串的比较"></a>2.5.1 字符串的比较</h4><ul>
<li>== 比较基本数据类型：比较的是具体的值</li>
<li>== 比较引用数据类型：比较的是对象地址值</li>
</ul>
<p><strong>String类 :  public boolean equals(String s)     比较两个字符串内容是否相同、区分大小写</strong></p>
<p><strong>代码 :</strong></p>
<p>package com.itheima.stringmethod;public class Demo1Equals {    public static void main(String[] args) {<br>String s1 = “abc”;<br>String s2 = “ABC”;<br>String s3 = “abc”;    // equals : 比较字符串内容, 区分大小写        System.out.println(s1.equals(s2));        System.out.println(s1.equals(s3));<br>// equalsIgnoreCase : 比较字符串内容, 忽略大小写        System.out.println(s1.equalsIgnoreCase(s2));    }}</p>
<h3 id="2-6-用户登录案例【应用】"><a href="#2-6-用户登录案例【应用】" class="headerlink" title="2.6 用户登录案例【应用】"></a>2.6 用户登录案例【应用】</h3><p><strong>案例需求 :</strong> </p>
<p>​    已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p>
<p><strong>实现步骤 : \</strong></p>
<ol>
<li>已知用户名和密码，定义两个字符串表示即可</li>
<li>键盘录入要登录的用户名和密码，用 Scanner 实现</li>
<li>拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。</li>
<li>字符串的内容比较，用equals() 方法实现</li>
<li>用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test1 &#123;  </span><br><span class="line">&#x2F;*        需求：已知用户名和密码，请用程序实现模拟用户登录。              总共给三次机会，登录之后，给出相应的提示        </span><br><span class="line">思路：       </span><br><span class="line">1. 已知用户名和密码，定义两个字符串表示即可       </span><br><span class="line">2. 键盘录入要登录的用户名和密码，用 Scanner 实现      </span><br><span class="line">3. 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。            字符串的内容比较，用equals() 方法实现        </span><br><span class="line">4. 用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环     *&#x2F;   </span><br><span class="line">public static void main(String[] args) &#123;      </span><br><span class="line">&#x2F;&#x2F; 1. 已知用户名和密码，定义两个字符串表示即可       </span><br><span class="line">String username &#x3D; &quot;admin&quot;;       </span><br><span class="line">String password &#x3D; &quot;123456&quot;;        </span><br><span class="line">&#x2F;&#x2F; 2. 键盘录入要登录的用户名和密码，用 Scanner 实现   </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        </span><br><span class="line">&#x2F;&#x2F; 4. 用循环实现多次机会，这里的次数明确，采用for循环实现        for(int i &#x3D; 1; i &lt;&#x3D; 3; i++)&#123;            </span><br><span class="line">System.out.println(&quot;请输入用户名:&quot;);            </span><br><span class="line">String scUsername &#x3D; sc.nextLine();            System.out.println(&quot;请输入密码:&quot;);          </span><br><span class="line">String scPassword &#x3D; sc.nextLine();           </span><br><span class="line">&#x2F;&#x2F; 3. 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。           </span><br><span class="line">if(username.equals(scUsername) &amp;&amp; password.equals(scPassword))&#123;   System.out.println(&quot;登录成功&quot;);            </span><br><span class="line">break;            </span><br><span class="line">&#125;else&#123; </span><br><span class="line">if(i &#x3D;&#x3D; 3)&#123;   </span><br><span class="line">System.out.println(&quot;您的登录次数已达到今日上限, 请明天再来&quot;);       &#125;else&#123;           </span><br><span class="line">System.out.println(&quot;登录失败,您还剩余&quot; + (3-i) +&quot;次机会&quot;);                &#125;            &#125;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-遍历字符串案例【应用】"><a href="#2-7-遍历字符串案例【应用】" class="headerlink" title="2.7 遍历字符串案例【应用】"></a>2.7 遍历字符串案例【应用】</h3><p><strong>案例需求 :</strong> </p>
<p>​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p>
<p><strong>实现步骤 :</strong> </p>
<ol>
<li>键盘录入一个字符串，用 Scanner 实现</li>
<li>遍历字符串，首先要能够获取到字符串中的每一个字符, public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的</li>
<li>遍历字符串，其次要能够获取到字符串的长度,   public int length()：返回此字符串的长度</li>
<li>遍历打印</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;    <span class="comment">/*       </span></span><br><span class="line"><span class="comment">需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串        </span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1. 键盘录入一个字符串，用 Scanner 实现       </span></span><br><span class="line"><span class="comment">2. 遍历字符串，首先要能够获取到字符串中的每一个字符            </span></span><br><span class="line"><span class="comment">public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的        </span></span><br><span class="line"><span class="comment">3. 遍历字符串，其次要能够获取到字符串的长度            </span></span><br><span class="line"><span class="comment">public int length()：返回此字符串的长度        </span></span><br><span class="line"><span class="comment">4. 遍历打印9     */</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line"><span class="comment">//  1. 键盘录入一个字符串，用 Scanner 实现        </span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);        System.out.println(<span class="string">"请输入:"</span>);        </span><br><span class="line">String s = sc.nextLine();        </span><br><span class="line"><span class="comment">// 2. 遍历字符串，首先要能够获取到字符串中的每一个字符        </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;            </span><br><span class="line"><span class="comment">// i : 字符串的每一个索引            </span></span><br><span class="line"><span class="keyword">char</span> c = s.charAt(i);            </span><br><span class="line">System.out.println(c);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-统计字符次数案例【应用】"><a href="#2-8-统计字符次数案例【应用】" class="headerlink" title="2.8 统计字符次数案例【应用】"></a>2.8 统计字符次数案例【应用】</h3><p><strong>案例需求 :</strong> </p>
<p>​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p>
<p><strong>实现步骤 :</strong> </p>
<ol>
<li>键盘录入一个字符串，用 Scanner 实现</li>
<li>将字符串拆分为字符数组 , public char[] toCharArray( )：将当前字符串拆分为字符数组并返回</li>
<li>遍历字符数</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test3 &#123;    </span><br><span class="line">&#x2F;*       需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串   思路：       </span><br><span class="line">1. 键盘录入一个字符串，用 Scanner 实现       </span><br><span class="line">2. 将字符串拆分为字符数组                </span><br><span class="line">public char[] toCharArray( )：将当前字符串拆分为字符数组并返回       3. 遍历字符数组    *&#x2F;   </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">&#x2F;&#x2F;  1. 键盘录入一个字符串，用 Scanner 实现       </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入:&quot;);       </span><br><span class="line">String s &#x3D; sc.nextLine();        </span><br><span class="line">&#x2F;&#x2F; 2. 将字符串拆分为字符数组        </span><br><span class="line">char[] chars &#x3D; s.toCharArray();     </span><br><span class="line">&#x2F;&#x2F; 3. 遍历字符数组       </span><br><span class="line">for (int i &#x3D; 0; i &lt; chars.length; i++) &#123;            System.out.println(chars[i]);      </span><br><span class="line">&#125;    &#125;&#125;</span><br><span class="line">public class Demo7 &#123;  </span><br><span class="line">public static void main(String[] args) &#123;        System.out.println(&quot;请输入一个字符串&quot;);      </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);    </span><br><span class="line">String  s&#x3D; sc.nextLine();    </span><br><span class="line">char[] arr &#x3D; s.toCharArray();      </span><br><span class="line">int countBig&#x3D;0;      </span><br><span class="line">int countSmall&#x3D;0;       </span><br><span class="line">int count3&#x3D;0;     </span><br><span class="line">int countElse&#x3D;0;      </span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;       </span><br><span class="line">char ch&#x3D; arr[i];          </span><br><span class="line">if(ch&gt;&#39;0&#39;&amp;&amp;ch&lt;&#39;9&#39;)&#123;              </span><br><span class="line">count3++;           </span><br><span class="line">&#125;else if(ch&gt;&#39;a&#39;&amp;&amp;ch&lt;&#39;z&#39;)&#123;    </span><br><span class="line">countSmall++;          </span><br><span class="line">&#125;else if(ch&gt;&#39;A&#39;&amp;&amp;ch&lt;&#39;Z&#39;)&#123;      </span><br><span class="line">countBig++;           </span><br><span class="line">&#125;else&#123;              </span><br><span class="line">countElse++;            &#125;        &#125;    </span><br><span class="line">System.out.println(&quot;大写字母有&quot;+countBig+&quot;个&quot;);        System.out.println(&quot;小写字母有&quot;+countSmall+&quot;个&quot;);        System.out.println(&quot;数字有&quot;+count3+&quot;个&quot;);        System.out.println(&quot;其他字符有&quot;+countElse+&quot;个&quot;);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-9-手机号屏蔽-字符串截取"><a href="#2-9-手机号屏蔽-字符串截取" class="headerlink" title="2.9 手机号屏蔽-字符串截取"></a>2.9 手机号屏蔽-字符串截取</h3><p><strong>案例需求 :</strong> </p>
<p>​    以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最终效果为：156****1234</span><br></pre></td></tr></table></figure>

<p><strong>实现步骤 :</strong> </p>
<ol>
<li>键盘录入一个字符串，用 Scanner 实现</li>
<li>截取字符串前三位</li>
<li>截取字符串后四位</li>
<li>将截取后的两个字符串，中间加上****进行拼接，输出结果</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test5 &#123;    &#x2F;*        需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽        最终效果为：156****1234        </span><br><span class="line">思路：        </span><br><span class="line">1. 键盘录入一个字符串，用 Scanner 实现        </span><br><span class="line">2. 截取字符串前三位        </span><br><span class="line">3. 截取字符串后四位        </span><br><span class="line">4. 将截取后的两个字符串，中间加上****进行拼接，输出结果     *&#x2F;    public static void main(String[] args) &#123;      </span><br><span class="line">&#x2F;&#x2F; 1. 键盘录入一个字符串，用 Scanner 实现     </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入手机号:&quot;);    </span><br><span class="line">String telString &#x3D; sc.nextLine();     </span><br><span class="line">&#x2F;&#x2F; 2. 截取字符串前三位       </span><br><span class="line">String start &#x3D; telString.substring(0,3);    </span><br><span class="line">&#x2F;&#x2F; 3. 截取字符串后四位      </span><br><span class="line">String end &#x3D; telString.substring(7);    </span><br><span class="line">&#x2F;&#x2F; 4. 将截取后的两个字符串，中间加上****进行拼接，输出结果        System.out.println(start + &quot;****&quot; + end);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-10-敏感词替换-字符串替换"><a href="#2-10-敏感词替换-字符串替换" class="headerlink" title="2.10 敏感词替换-字符串替换"></a>2.10 敏感词替换-字符串替换</h3><p><strong>案例需求 :</strong> </p>
<p>​    键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换</p>
<p><strong>实现步骤 :</strong> </p>
<ol>
<li><p>键盘录入一个字符串，用 Scanner 实现</p>
</li>
<li><p>替换敏感词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String replace(CharSequence target, CharSequence replacement)</span><br><span class="line">将当前字符串中的target内容，使用replacement进行替换，返回新的字符串</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test6 &#123;   </span><br><span class="line">&#x2F;*        需求：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换        </span><br><span class="line">思路：        </span><br><span class="line">1. 键盘录入一个字符串，用 Scanner 实现        </span><br><span class="line">2. 替换敏感词                </span><br><span class="line">String replace(CharSequence target, CharSequence replacement)     将当前字符串中的target内容，使用replacement进行替换，返回新的字符串   3. 输出结果     *&#x2F;   </span><br><span class="line">public static void main(String[] args) &#123;    </span><br><span class="line">&#x2F;&#x2F; 1. 键盘录入一个字符串，用 Scanner 实现    </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入:&quot;);      </span><br><span class="line">String s &#x3D; sc.nextLine();       </span><br><span class="line">&#x2F;&#x2F; 2. 替换敏感词      </span><br><span class="line">String result &#x3D; s.replace(&quot;TMD&quot;,&quot;***&quot;);    </span><br><span class="line">&#x2F;&#x2F; 3. 输出结果        </span><br><span class="line">System.out.println(result);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-11-切割字符串"><a href="#2-11-切割字符串" class="headerlink" title="2.11 切割字符串"></a>2.11 切割字符串</h3><p><strong>案例需求 :</strong> </p>
<p>​    以字符串的形式从键盘录入学生信息，例如：“张三 , 23”</p>
<p>​    从该字符串中切割出有效数据,封装为Student学生对象</p>
<p><strong>实现步骤 :</strong> </p>
<ol>
<li><p>编写Student类，用于封装数据</p>
</li>
<li><p>键盘录入一个字符串，用 Scanner 实现</p>
</li>
<li><p>根据逗号切割字符串，得到（张三）（23）</p>
<p>String[] split(String regex) ：根据传入的字符串作为规则进行切割将切割后的内容存入字符串数组中，并将字符串数组返回</p>
</li>
<li><p>从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象</p>
</li>
<li><p>调用对象getXxx方法，取出数据并打印。</p>
</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.domain.Student;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test7 &#123;   </span><br><span class="line">&#x2F;*         需求：以字符串的形式从键盘录入学生信息，例如：“张三 , 23”                从该字符串中切割出有效数据,封装为Student学生对象         思路：           </span><br><span class="line">1. 编写Student类，用于封装数据           </span><br><span class="line">2. 键盘录入一个字符串，用 Scanner 实现       </span><br><span class="line">3. 根据逗号切割字符串，得到（张三）（23）                    String[] split(String regex) ：根据传入的字符串作为规则进行切割      将切割后的内容存入字符串数组中，并将字符串数组返回           </span><br><span class="line">4. 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象           </span><br><span class="line">5. 调用对象getXxx方法，取出数据并打印。     *&#x2F;    </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">&#x2F;&#x2F; 2. 键盘录入一个字符串，用 Scanner 实现        </span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);        System.out.println(&quot;请输入学生信息:&quot;);        </span><br><span class="line">String stuInfo &#x3D; sc.nextLine();        </span><br><span class="line">&#x2F;&#x2F; stuInfo &#x3D; &quot;张三,23&quot;;        </span><br><span class="line">&#x2F;&#x2F; 3. 根据逗号切割字符串，得到（张三）（23）     </span><br><span class="line">String[] sArr &#x3D; stuInfo.split(&quot;,&quot;);&#x2F;&#x2F;        System.out.println(sArr[0]);&#x2F;&#x2F;        System.out.println(sArr[1]);       </span><br><span class="line">&#x2F;&#x2F; 4. 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象        </span><br><span class="line">Student stu &#x3D; new Student(sArr[0],sArr[1]);       </span><br><span class="line">&#x2F;&#x2F; 5. 调用对象getXxx方法，取出数据并打印。        System.out.println(stu.getName() + &quot;...&quot; + stu.getAge());    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-12-String方法小结"><a href="#2-12-String方法小结" class="headerlink" title="2.12 String方法小结"></a>2.12 String方法小结</h3><p><strong>String类的常用方法 :</strong> </p>
<p>​    public boolean equals(Object anObject)  比较字符串的内容，严格区分大小写</p>
<p>​    public boolean equalsIgnoreCase(String anotherString)  比较字符串的内容，忽略大小写</p>
<p>​    public int length()  返回此字符串的长度</p>
<p>​    public char charAt(int index)  返回指定索引处的 char 值</p>
<p>​    public char[] toCharArray()  将字符串拆分为字符数组后返回</p>
<p>​    public String substring(int beginIndex, int endIndex)  根据开始和结束索引进行截取，得到新的字符串（包含头，不包含尾）</p>
<p>​    public String substring(int beginIndex)  从传入的索引处截取，截取到末尾，得到新的字符串</p>
<p>​    public String replace(CharSequence target, CharSequence replacement)  使用新值，将字符串中的旧值替换，得到新的字符串</p>
<p>​    public String[] split(String regex)  根据传入的规则切割字符串，得到字符串数组</p>
<h2 id="3-StringBuilder类"><a href="#3-StringBuilder类" class="headerlink" title="3 StringBuilder类"></a>3 StringBuilder类</h2><h3 id="3-1-StringBuilder类概述"><a href="#3-1-StringBuilder类概述" class="headerlink" title="3.1 StringBuilder类概述"></a>3.1 StringBuilder类概述</h3><p>​    <strong>概述 :</strong> StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的内容是可变的</p>
<h3 id="3-2-StringBuilder类和String类的区别"><a href="#3-2-StringBuilder类和String类的区别" class="headerlink" title="3.2 StringBuilder类和String类的区别"></a>3.2 StringBuilder类和String类的区别</h3><ul>
<li><strong>String类：</strong>内容是不可变的</li>
<li><strong>StringBuilder类：</strong>内容是可变的</li>
</ul>
<h3 id="3-3StringBuilder类的构造方法"><a href="#3-3StringBuilder类的构造方法" class="headerlink" title="3.3StringBuilder类的构造方法"></a>3.3StringBuilder类的构造方法</h3><p><strong>常用的构造方法</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringBuilder()</td>
<td>创建一个空白可变字符串对象，不含有任何内容</td>
</tr>
<tr>
<td>public StringBuilder(String   str)</td>
<td>根据字符串的内容，来创建可变字符串对象</td>
</tr>
</tbody></table>
<p><strong>示例代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringBuilderDemo01 &#123;  </span><br><span class="line">public static void main(String[] args) &#123;    </span><br><span class="line">&#x2F;&#x2F;public StringBuilder()：创建一个空白可变字符串对象，不含有任何内容 StringBuilder sb &#x3D; new StringBuilder();        System.out.println(&quot;sb:&quot; + sb);        System.out.println(&quot;sb.length():&quot; + sb.length());        &#x2F;&#x2F;public StringBuilder(String str)：根据字符串的内容，来创建可变字符串对象       </span><br><span class="line">StringBuilder sb2 &#x3D; new StringBuilder(&quot;hello&quot;);        System.out.println(&quot;sb2:&quot; + sb2);        System.out.println(&quot;sb2.length():&quot; + sb2.length());    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-StringBuilder常用的成员方法"><a href="#3-4-StringBuilder常用的成员方法" class="headerlink" title="3.4 StringBuilder常用的成员方法"></a>3.4 StringBuilder常用的成员方法</h3><ul>
<li><p><strong>添加和反转方法</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringBuilder   append(任意类型)</td>
<td>添加数据，并返回对象本身</td>
</tr>
<tr>
<td>public StringBuilder   reverse()</td>
<td>返回相反的字符序列</td>
</tr>
</tbody></table>
</li>
<li><p><strong>示例代码</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringBuilderDemo01 &#123;</span><br><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">&#x2F;&#x2F;创建对象        </span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder();      </span><br><span class="line">&#x2F;&#x2F;public StringBuilder append(任意类型)：添加数据，并返回对象本身&#x2F;&#x2F; StringBuilder sb2 &#x3D; sb.append(&quot;hello&quot;);&#x2F;&#x2F;&#x2F;&#x2F;        System.out.println(&quot;sb:&quot; + sb);&#x2F;&#x2F;        System.out.println(&quot;sb2:&quot; + sb2);&#x2F;&#x2F;     </span><br><span class="line">System.out.println(sb &#x3D;&#x3D; sb2);&#x2F;&#x2F;     </span><br><span class="line">sb.append(&quot;hello&quot;);&#x2F;&#x2F;    </span><br><span class="line">sb.append(&quot;world&quot;);&#x2F;&#x2F;       </span><br><span class="line">sb.append(&quot;java&quot;);&#x2F;&#x2F;      </span><br><span class="line">sb.append(100);        &#x2F;&#x2F;链式编程        sb.append(&quot;hello&quot;).append(&quot;world&quot;).append(&quot;java&quot;).append(100);   System.out.println(&quot;sb:&quot; + sb);   </span><br><span class="line">&#x2F;&#x2F;public StringBuilder reverse()：返回相反的字符序列        sb.reverse();       </span><br><span class="line">System.out.println(&quot;sb:&quot; + sb);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5StringBuilder和String相互转换【应用】"><a href="#3-5StringBuilder和String相互转换【应用】" class="headerlink" title="3.5StringBuilder和String相互转换【应用】"></a>3.5StringBuilder和String相互转换【应用】</h3><ul>
<li><p><strong>StringBuilder转换为String</strong></p>
<p>​        public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String</p>
</li>
<li><p><strong>String转换为StringBuilder</strong></p>
<p>​        public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</p>
</li>
<li><p><strong>示例代码</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringBuilderDemo02 &#123; </span><br><span class="line">public static void main(String[] args) &#123;        &#x2F;*        &#x2F;&#x2F;StringBuilder 转换为 String      </span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder();        sb.append(&quot;hello&quot;);     </span><br><span class="line">&#x2F;&#x2F;String s &#x3D; sb; &#x2F;&#x2F;这个是错误的做法   </span><br><span class="line">&#x2F;&#x2F;public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String      </span><br><span class="line">String s &#x3D; sb.toString();     </span><br><span class="line">System.out.println(s);        *&#x2F;    </span><br><span class="line">&#x2F;&#x2F;String 转换为 StringBuilder    </span><br><span class="line">String s &#x3D; &quot;hello&quot;;       </span><br><span class="line">&#x2F;&#x2F;StringBuilder sb &#x3D; s; &#x2F;&#x2F;这个是错误的做法    </span><br><span class="line">&#x2F;&#x2F;public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder     </span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder(s);        System.out.println(sb);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-StringBuilder拼接字符串案例"><a href="#3-6-StringBuilder拼接字符串案例" class="headerlink" title="3.6 StringBuilder拼接字符串案例"></a>3.6 StringBuilder拼接字符串案例</h3><p><strong>案例需求 :</strong> </p>
<p>​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p>
<p>​    并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p>
<p><strong>实现步骤 :</strong> </p>
<ol>
<li><p>定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</p>
</li>
<li><p>定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回值类型 String，参数列表 int[] arr</span><br></pre></td></tr></table></figure>
</li>
<li><p>在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</p>
</li>
<li><p>调用方法，用一个变量接收结果</p>
</li>
<li><p>输出结果</p>
</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*    思路：     </span><br><span class="line">1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化  </span><br><span class="line">2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。          返回值类型 String，参数列表 int[] arr      </span><br><span class="line">3:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回 4:调用方法，用一个变量接收结果        </span><br><span class="line">5:输出结果 *&#x2F;</span><br><span class="line">public class StringBuilderTest01 &#123;    </span><br><span class="line">public static void main(String[] args) &#123;      </span><br><span class="line">&#x2F;&#x2F;定义一个 int 类型的数组，用静态初始化完成数组元素的初始化        int[] arr &#x3D; &#123;1, 2, 3&#125;;        &#x2F;&#x2F;调用方法，用一个变量接收结果        String s &#x3D; arrayToString(arr);        &#x2F;&#x2F;输出结果        System.out.println(&quot;s:&quot; + s);    &#125;    &#x2F;&#x2F;定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回   </span><br><span class="line">&#x2F;*        两个明确：            返回值类型：String            参数：int[] arr     *&#x2F;   </span><br><span class="line">public static String arrayToString(int[] arr) &#123;   </span><br><span class="line">&#x2F;&#x2F;在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回  StringBuilder sb &#x3D; new StringBuilder();       </span><br><span class="line">sb.append(&quot;[&quot;);      </span><br><span class="line">for(int i&#x3D;0; i&lt;arr.length; i++) &#123;      </span><br><span class="line">if(i &#x3D;&#x3D; arr.length-1) &#123;            </span><br><span class="line">sb.append(arr[i]);         </span><br><span class="line">&#125; else &#123;               </span><br><span class="line">sb.append(arr[i]).append(&quot;, &quot;);      </span><br><span class="line">&#125;        &#125;       </span><br><span class="line">sb.append(&quot;]&quot;);     </span><br><span class="line">String s &#x3D; sb.toString();    </span><br><span class="line">return  s;    </span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>分类和Static</title>
    <url>/2021/09/13/day10-%E5%88%86%E7%B1%BB%E5%92%8Cstatic/</url>
    <content><![CDATA[<h2 id="1-案例驱动模式"><a href="#1-案例驱动模式" class="headerlink" title="1.案例驱动模式"></a>1.案例驱动模式</h2><h3 id="1-1案例驱动模式概述-理解"><a href="#1-1案例驱动模式概述-理解" class="headerlink" title="1.1案例驱动模式概述 (理解)"></a>1.1案例驱动模式概述 (理解)</h3><p>通过我们已掌握的知识点,先实现一个案例,然后找出这个案例中,存在的一些问题,在通过新知识点解决问题</p>
<h3 id="1-2案例驱动模式的好处-理解"><a href="#1-2案例驱动模式的好处-理解" class="headerlink" title="1.2案例驱动模式的好处 (理解)"></a>1.2案例驱动模式的好处 (理解)</h3><ul>
<li>解决重复代码过多的冗余,提高代码的复用性</li>
<li>解决业务逻辑聚集紧密导致的可读性差,提高代码的可读性</li>
<li>解决代码可维护性差,提高代码的维护性</li>
</ul>
<h2 id="2-分类思想"><a href="#2-分类思想" class="headerlink" title="2.分类思想"></a>2.分类思想</h2><h3 id="2-1分类思想概述-理解"><a href="#2-1分类思想概述-理解" class="headerlink" title="2.1分类思想概述 (理解)"></a>2.1分类思想概述 (理解)</h3><p>分工协作,专人干专事</p>
<h3 id="2-2信息管理系统-理解"><a href="#2-2信息管理系统-理解" class="headerlink" title="2.2信息管理系统 (理解)"></a>2.2信息管理系统 (理解)</h3><ul>
<li><p>Student类  标准学生类,封装键盘录入的学生信息(id , name , age , birthday)</p>
</li>
<li><p>StudentDao类  Dao : (Data Access Object 缩写) 用于访问存储数据的数组或集合</p>
</li>
<li><p>StudentService类  用来进行业务逻辑的处理(例如: 判断录入的id是否存在)</p>
</li>
<li><p>StudentController类  和用户打交道(接收用户需求,采集用户信息,打印数据到控制台)</p>
<p><img src=".%5Cimg%5C01_%E9%BB%91%E9%A9%AC%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%88%86%E7%B1%BB.png" alt="01_黑马信息管理系统分类"></p>
</li>
</ul>
<h2 id="3-分包思想"><a href="#3-分包思想" class="headerlink" title="3.分包思想"></a>3.分包思想</h2><h3 id="3-1分包思想概述-理解"><a href="#3-1分包思想概述-理解" class="headerlink" title="3.1分包思想概述 (理解)"></a>3.1分包思想概述 (理解)</h3><p>如果将所有的类文件都放在同一个包下,不利于管理和后期维护,所以,对于不同功能的类文件,可以放在不同的包下进行管理</p>
<h3 id="3-2包的概述-记忆"><a href="#3-2包的概述-记忆" class="headerlink" title="3.2包的概述 (记忆)"></a>3.2包的概述 (记忆)</h3><ul>
<li><p>包</p>
<p>本质上就是文件夹</p>
</li>
<li><p>创建包</p>
<p>多级包之间使用 “ . “ 进行分割<br>多级包的定义规范：公司的网站地址翻转(去掉www)<br>比如：黑马程序员的网站址为<a href="http://www.itheima.com" target="_blank" rel="noopener">www.itheima.com</a><br>后期我们所定义的包的结构就是：com.itheima.其他的包名</p>
</li>
<li><p>包的命名规则</p>
<p>字母都是小写</p>
</li>
</ul>
<h3 id="3-3包的注意事项-理解"><a href="#3-3包的注意事项-理解" class="headerlink" title="3.3包的注意事项 (理解)"></a>3.3包的注意事项 (理解)</h3><ul>
<li>package语句必须是程序的第一条可执行的代码 </li>
<li>package语句在一个java文件中只能有一个 </li>
<li>如果没有package,默认表示无包名 </li>
</ul>
<h3 id="3-4类与类之间的访问-理解"><a href="#3-4类与类之间的访问-理解" class="headerlink" title="3.4类与类之间的访问 (理解)"></a>3.4类与类之间的访问 (理解)</h3><ul>
<li><p>同一个包下的访问</p>
<p>不需要导包，直接使用即可</p>
</li>
<li><p>不同包下的访问</p>
<p>1.import 导包后访问</p>
<p>2.通过全类名（包名 + 类名）访问</p>
</li>
<li><p>注意：import 、package 、class 三个关键字的摆放位置存在顺序关系</p>
<p>package 必须是程序的第一条可执行的代码</p>
<p>import 需要写在 package 下面</p>
<p>class 需要在 import 下面</p>
</li>
</ul>
<h2 id="4-信息管理系统"><a href="#4-信息管理系统" class="headerlink" title="4.信息管理系统"></a>4.信息管理系统</h2><h3 id="4-1系统介绍-理解"><a href="#4-1系统介绍-理解" class="headerlink" title="4.1系统介绍 (理解)"></a>4.1系统介绍 (理解)</h3><p><img src="image/02_%E9%BB%91%E9%A9%AC%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D.png" alt="02_黑马信息管理系统介绍"></p>
<h3 id="4-2学生管理系统-应用"><a href="#4-2学生管理系统-应用" class="headerlink" title="4.2学生管理系统 (应用)"></a>4.2学生管理系统 (应用)</h3><h4 id="4-2-1需求说明"><a href="#4-2-1需求说明" class="headerlink" title="4.2.1需求说明"></a>4.2.1需求说明</h4><ul>
<li><p>添加学生: 键盘录入学生信息(id，name，age，birthday)</p>
<p>使用数组存储学生信息,要求学生的id不能重复</p>
</li>
<li><p>删除学生: 键盘录入要删除学生的id值,将该学生从数组中移除,如果录入的id在数组中不存在,需要重新录入</p>
</li>
<li><p>修改学生: 键盘录入要修改学生的id值和修改后的学生信息</p>
<p>将数组中该学生的信息修改,如果录入的id在数组中不存在,需要重新录入</p>
</li>
<li><p>查询学生: 将数组中存储的所有学生的信息输出到控制台</p>
</li>
</ul>
<h4 id="4-2-2实现步骤"><a href="#4-2-2实现步骤" class="headerlink" title="4.2.2实现步骤"></a>4.2.2实现步骤</h4><ul>
<li><p>环境搭建实现步骤 </p>
<table>
<thead>
<tr>
<th>包</th>
<th>存储的类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>com.itheima.edu.info.manager.domain</td>
<td>Student.java</td>
<td>封装学生信息</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.dao</td>
<td>StudentDao.java</td>
<td>访问存储数据的数组，进行赠删改查（库管）</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.service</td>
<td>StudentService.java</td>
<td>业务的逻辑处理（业务员）</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.controller</td>
<td>StudentController.java</td>
<td>和用户打交道（客服接待）</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.entry</td>
<td>InfoManagerEntry.java</td>
<td>程序的入口类，提供一个main方法</td>
</tr>
</tbody></table>
</li>
<li><p>菜单搭建实现步骤 </p>
<ul>
<li>需求<ul>
<li>黑马管理系统菜单搭建</li>
<li>学生管理系统菜单搭建</li>
</ul>
</li>
<li>实现步骤<ol>
<li>展示欢迎页面,用输出语句完成主界面的编写</li>
<li>获取用户的选择,用Scanner实现键盘录入数据</li>
<li>根据用户的选择执行对应的操作,用switch语句完成操作的选择</li>
</ol>
</li>
</ul>
</li>
<li><p>添加功能实现步骤 </p>
<p><img src="image/03_%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="03_添加功能需求分析"></p>
</li>
</ul>
<ul>
<li><p>添加功能优化:判断id是否存在</p>
<p><img src="image/04_%E5%88%A4%E6%96%ADid%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8.png" alt="04_判断id是否存在"></p>
</li>
<li><p>查询功能实现步骤</p>
<p><img src="image/05_%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="05_查询功能需求分析"></p>
</li>
<li><p>删除功能实现步骤</p>
<p><img src="image/06_%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="06_删除功能需求分析"></p>
</li>
<li><p>修改功能实现步骤 </p>
<p><img src="image/07_%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="07_修改功能需求分析"></p>
</li>
<li><p>系统优化 </p>
<ul>
<li>把updateStudent和deleteStudentById中录入学生id代码抽取到一个方法(inputStudentId)中<br>该方法的主要作用就是录入学生的id，方法的返回值为String类型</li>
</ul>
</li>
</ul>
<ul>
<li>把addStudent和updateStudent中录入学生信息的代码抽取到一个方法(inputStudentInfo)中<br>该方法的主要作用就是录入学生的信息，并封装为学生对象，方法的返回值为Student类型 </li>
</ul>
<h4 id="4-2-3代码实现"><a href="#4-2-3代码实现" class="headerlink" title="4.2.3代码实现"></a>4.2.3代码实现</h4><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name, String age, String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序入口InfoManagerEntry类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoManagerEntry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 主菜单搭建</span></span><br><span class="line">            System.out.println(<span class="string">"--------欢迎来到黑马信息管理系统--------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入您的选择: 1.学生管理  2.老师管理  3.退出"</span>);</span><br><span class="line">            String choice = sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("学生管理");</span></span><br><span class="line">                    <span class="comment">// 开启学生管理系统</span></span><br><span class="line">                    StudentController studentController = <span class="keyword">new</span> StudentController();</span><br><span class="line">                    studentController.start();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"老师管理"</span>);</span><br><span class="line">                    TeacherController teacherController = <span class="keyword">new</span> TeacherController();</span><br><span class="line">                    teacherController.start();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"感谢您的使用"</span>);</span><br><span class="line">                    <span class="comment">// 退出当前正在运行的JVM虚拟机</span></span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"您的输入有误, 请重新输入"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StudentController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 业务员对象</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService = <span class="keyword">new</span> StudentService();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启学生管理系统, 并展示学生管理系统菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Scanner sc = new Scanner(System.in);</span></span><br><span class="line">        studentLoop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--------欢迎来到 &lt;学生&gt; 管理系统--------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入您的选择: 1.添加学生  2.删除学生  3.修改学生  4.查看学生  5.退出"</span>);</span><br><span class="line">            String choice = sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("添加");</span></span><br><span class="line">                    addStudent();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("删除");</span></span><br><span class="line">                    deleteStudentById();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("修改");</span></span><br><span class="line">                    updateStudent();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("查询");</span></span><br><span class="line">                    findAllStudent();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"感谢您使用学生管理系统, 再见!"</span>);</span><br><span class="line">                    <span class="keyword">break</span> studentLoop;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"您的输入有误, 请重新输入"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改学生方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String updateId = inputStudentId();</span><br><span class="line">        Student newStu = inputStudentInfo(updateId);</span><br><span class="line">        studentService.updateStudent(updateId, newStu);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"修改成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除学生方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudentById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String delId = inputStudentId();</span><br><span class="line">        <span class="comment">// 3. 调用业务员中的deleteStudentById根据id, 删除学生</span></span><br><span class="line">        studentService.deleteStudentById(delId);</span><br><span class="line">        <span class="comment">// 4. 提示删除成功</span></span><br><span class="line">        System.out.println(<span class="string">"删除成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看学生方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 调用业务员中的获取方法, 得到学生的对象数组</span></span><br><span class="line">        Student[] stus = studentService.findAllStudent();</span><br><span class="line">        <span class="comment">// 2. 判断数组的内存地址, 是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (stus == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"查无信息, 请添加后重试"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 遍历数组, 获取学生信息并打印在控制台</span></span><br><span class="line">        System.out.println(<span class="string">"学号\t\t姓名\t年龄\t生日"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            Student stu = stus[i];</span><br><span class="line">            <span class="keyword">if</span> (stu != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(stu.getId() + <span class="string">"\t"</span> + stu.getName() + <span class="string">"\t"</span> + stu.getAge() + <span class="string">"\t\t"</span> + stu.getBirthday());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加学生方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// StudentService studentService = new StudentService();</span></span><br><span class="line">        <span class="comment">// 1. 键盘接收学生信息</span></span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学生id:"</span>);</span><br><span class="line">            id = sc.next();</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">"学号已被占用, 请重新输入"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Student stu = inputStudentInfo(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 将学生对象,传递给StudentService(业务员)中的addStudent方法</span></span><br><span class="line">        <span class="keyword">boolean</span> result = studentService.addStudent(stu);</span><br><span class="line">        <span class="comment">// 4. 根据返回的boolean类型结果, 在控制台打印成功\失败</span></span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键盘录入学生id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">inputStudentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学生id:"</span>);</span><br><span class="line">            id = sc.next();</span><br><span class="line">            <span class="keyword">boolean</span> exists = studentService.isExists(id);</span><br><span class="line">            <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                System.out.println(<span class="string">"您输入的id不存在, 请重新输入:"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键盘录入学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">inputStudentInfo</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄:"</span>);</span><br><span class="line">        String age = sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生生日:"</span>);</span><br><span class="line">        String birthday = sc.next();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setId(id);</span><br><span class="line">        stu.setName(name);</span><br><span class="line">        stu.setAge(age);</span><br><span class="line">        stu.setBirthday(birthday);</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StudentService类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建StudentDao (库管)</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">    <span class="comment">// 添加学生方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 将学生对象, 传递给StudentDao 库管中的addStudent方法</span></span><br><span class="line">        <span class="comment">// 3. 将返回的boolean类型结果, 返还给StudentController</span></span><br><span class="line">        <span class="keyword">return</span> studentDao.addStudent(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断学号是否存在方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExists</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        Student[] stus = studentDao.findAllStudent();</span><br><span class="line">        <span class="comment">// 假设id在数组中不存在</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 遍历数组, 获取每一个学生对象, 准备进行判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            Student student = stus[i];</span><br><span class="line">            <span class="keyword">if</span>(student != <span class="keyword">null</span> &amp;&amp; student.getId().equals(id))&#123;</span><br><span class="line">                exists = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看学生方法</span></span><br><span class="line">    <span class="keyword">public</span> Student[] findAllStudent() &#123;</span><br><span class="line">        <span class="comment">// 1. 调用库管对象的findAllStudent获取学生对象数组</span></span><br><span class="line">        Student[] allStudent = studentDao.findAllStudent();</span><br><span class="line">        <span class="comment">// 2. 判断数组中是否有学生信息 (有: 返回地址,  没有: 返回null)</span></span><br><span class="line">        <span class="comment">// 思路: 数组中只要存在一个不是null的元素, 那就代表有学生信息</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allStudent.length; i++) &#123;</span><br><span class="line">            Student stu = allStudent[i];</span><br><span class="line">            <span class="keyword">if</span>(stu != <span class="keyword">null</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">// 有信息</span></span><br><span class="line">            <span class="keyword">return</span> allStudent;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 没有信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudentById</span><span class="params">(String delId)</span> </span>&#123;</span><br><span class="line">        studentDao.deleteStudentById(delId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(String updateId, Student newStu)</span> </span>&#123;</span><br><span class="line">        studentDao.updateStudent(updateId, newStu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StudentDao类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建学生对象数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Student[] stus = <span class="keyword">new</span> Student[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// 添加学生方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加学生到数组</span></span><br><span class="line">        <span class="comment">//2.1 定义变量index为-1，假设数组已经全部存满，没有null的元素</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.2 遍历数组取出每一个元素，判断是否是null</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            Student student = stus[i];</span><br><span class="line">            <span class="keyword">if</span>(student == <span class="keyword">null</span>)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="comment">//2.3 如果为null，让index变量记录当前索引位置，并使用break结束循环遍历</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 返回是否添加成功的boolean类型状态</span></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 装满了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 没有装满, 正常添加, 返回true</span></span><br><span class="line">            stus[index] = stu;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看学生方法</span></span><br><span class="line">    <span class="keyword">public</span> Student[] findAllStudent() &#123;</span><br><span class="line">        <span class="keyword">return</span> stus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudentById</span><span class="params">(String delId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查找id在容器中所在的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> index = getIndex(delId);</span><br><span class="line">        <span class="comment">// 2. 将该索引位置,使用null元素进行覆盖</span></span><br><span class="line">        stus[index] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            Student stu = stus[i];</span><br><span class="line">            <span class="keyword">if</span>(stu != <span class="keyword">null</span> &amp;&amp; stu.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(String updateId, Student newStu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查找updateId, 在容器中的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> index = getIndex(updateId);</span><br><span class="line">        <span class="comment">// 2. 将该索引位置, 使用新的学生对象替换</span></span><br><span class="line">        stus[index] = newStu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3老师管理系统-应用"><a href="#4-3老师管理系统-应用" class="headerlink" title="4.3老师管理系统 (应用)"></a>4.3老师管理系统 (应用)</h3><h4 id="4-3-1需求说明"><a href="#4-3-1需求说明" class="headerlink" title="4.3.1需求说明"></a>4.3.1需求说明</h4><ul>
<li><p>添加老师: 通过键盘录入老师信息(id，name，age，birthday)</p>
<p>使用数组存储老师信息,要求老师的id不能重复</p>
</li>
<li><p>删除老师: 通过键盘录入要删除老师的id值,将该老师从数组中移除,如果录入的id在数组中不存在,需要重新录入</p>
</li>
<li><p>修改老师: 通过键盘录入要修改老师的id值和修改后的老师信息</p>
<p>将数组中该老师的信息修改,如果录入的id在数组中不存在,需要重新录入</p>
</li>
<li><p>查询老师: 将数组中存储的所有老师的信息输出到控制台</p>
</li>
</ul>
<h4 id="4-3-2实现步骤"><a href="#4-3-2实现步骤" class="headerlink" title="4.3.2实现步骤"></a>4.3.2实现步骤</h4><ul>
<li><p>环境搭建实现步骤</p>
<table>
<thead>
<tr>
<th>包</th>
<th>存储的类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>com.itheima.edu.info.manager.domain</td>
<td>Student.java   Teacher.java</td>
<td>封装学生信息  封装老师信息</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.dao</td>
<td>StudentDao.java  TeacherDao.java</td>
<td>访问存储数据的数组,进行赠删改查（库管）</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.service</td>
<td>StudentService.java  TeacherService.java</td>
<td>业务的逻辑处理（业务员）</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.controller</td>
<td>StudentController.java  TeacherController.java</td>
<td>和用户打交道（客服接待）</td>
</tr>
<tr>
<td>com.itheima.edu.info.manager.entry</td>
<td>InfoManagerEntry.java</td>
<td>程序的入口类,提供一个main方法</td>
</tr>
</tbody></table>
</li>
<li><p>菜单搭建实现步骤</p>
<ol>
<li>展示欢迎页面,用输出语句完成主界面的编写</li>
<li>获取用户的选择,用Scanner实现键盘录入数据</li>
<li>根据用户的选择执行对应的操作,用switch语句完成操作的选择</li>
</ol>
</li>
<li><p>添加功能实现步骤</p>
<p><img src="image/10_%E6%B7%BB%E5%8A%A0%E8%80%81%E5%B8%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4.png" alt="10_添加老师功能实现步骤"></p>
</li>
<li><p>查询功能实现步骤</p>
<p><img src="image/11_%E6%9F%A5%E8%AF%A2%E8%80%81%E5%B8%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4.png" alt="11_查询老师功能实现步骤"></p>
</li>
<li><p>删除功能实现步骤</p>
<p><img src="image/12_%E5%88%A0%E9%99%A4%E8%80%81%E5%B8%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4.png" alt="12_删除老师功能实现步骤"></p>
</li>
<li><p>修改功能实现步骤</p>
<p><img src="image/13_%E4%BF%AE%E6%94%B9%E8%80%81%E5%B8%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4.png" alt="13_修改老师功能实现步骤"></p>
</li>
<li><p>系统优化</p>
<ul>
<li>把updateTeacher和deleteTeacherById中录入老师id代码抽取到一个方法(inputTeacherId)中<br>该方法的主要作用就是录入老师的id,方法的返回值为String类型</li>
<li>把addTeacher和updateTeacher中录入老师信息的代码抽取到一个方法(inputTeacherInfo)中<br>该方法的主要作用就是录入老师的信息,并封装为老师对象,方法的返回值为Teacher类型</li>
</ul>
</li>
</ul>
<h4 id="4-3-3代码实现"><a href="#4-3-3代码实现" class="headerlink" title="4.3.3代码实现"></a>4.3.3代码实现</h4><p>老师类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String id, String name, String age, String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TeacherController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService = <span class="keyword">new</span> TeacherService();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        teacherLoop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--------欢迎来到 &lt;老师&gt; 管理系统--------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入您的选择: 1.添加老师  2.删除老师  3.修改老师  4.查看老师  5.退出"</span>);</span><br><span class="line">            String choice = sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("添加老师");</span></span><br><span class="line">                    addTeacher();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("删除老师");</span></span><br><span class="line">                    deleteTeacherById();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("修改老师");</span></span><br><span class="line">                    updateTeacher();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("查看老师");</span></span><br><span class="line">                    findAllTeacher();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"感谢您使用老师管理系统, 再见!"</span>);</span><br><span class="line">                    <span class="keyword">break</span> teacherLoop;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"您的输入有误, 请重新输入"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String id = inputTeacherId();</span><br><span class="line"></span><br><span class="line">        Teacher newTeacher = inputTeacherInfo(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用业务员的修改方法</span></span><br><span class="line">        teacherService.updateTeacher(id,newTeacher);</span><br><span class="line">        System.out.println(<span class="string">"修改成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTeacherById</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String id = inputTeacherId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用业务员中的删除方法, 根据id, 删除老师</span></span><br><span class="line">        teacherService.deleteTeacherById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 提示删除成功</span></span><br><span class="line">        System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 从业务员中, 获取老师对象数组</span></span><br><span class="line">        Teacher[] teachers = teacherService.findAllTeacher();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断数组中是否有元素</span></span><br><span class="line">        <span class="keyword">if</span> (teachers == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"查无信息, 请添加后重试"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 遍历数组, 取出元素, 并打印在控制台</span></span><br><span class="line">        System.out.println(<span class="string">"学号\t\t姓名\t年龄\t生日"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            Teacher t = teachers[i];</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(t.getId() + <span class="string">"\t"</span> + t.getName() + <span class="string">"\t"</span> + t.getAge() + <span class="string">"\t\t"</span> + t.getBirthday());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 接收不存在的老师id</span></span><br><span class="line">            System.out.println(<span class="string">"请输入老师id:"</span>);</span><br><span class="line">            id = sc.next();</span><br><span class="line">            <span class="comment">// 2. 判断id是否存在</span></span><br><span class="line">            <span class="keyword">boolean</span> exists = teacherService.isExists(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">                System.out.println(<span class="string">"id已被占用, 请重新输入:"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Teacher t = inputTeacherInfo(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 将封装好的老师对象, 传递给TeacherService继续完成添加操作</span></span><br><span class="line">        <span class="keyword">boolean</span> result = teacherService.addTeacher(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入老师id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">inputTeacherId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入id"</span>);</span><br><span class="line">            id = sc.next();</span><br><span class="line">            <span class="keyword">boolean</span> exists = teacherService.isExists(id);</span><br><span class="line">            <span class="keyword">if</span>(!exists)&#123;</span><br><span class="line">                System.out.println(<span class="string">"您输入的id不存在, 请重新输入:"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入老师信息, 封装为老师对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">inputTeacherInfo</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入老师姓名:"</span>);</span><br><span class="line">        String name = sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入老师年龄:"</span>);</span><br><span class="line">        String age = sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入老师生日:"</span>);</span><br><span class="line">        String birthday = sc.next();</span><br><span class="line"></span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        t.setId(id);</span><br><span class="line">        t.setName(name);</span><br><span class="line">        t.setAge(age);</span><br><span class="line">        t.setBirthday(birthday);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TeacherService类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TeacherDao teacherDao = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addTeacher</span><span class="params">(Teacher t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherDao.addTeacher(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExists</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取库管对象中的数组</span></span><br><span class="line">        Teacher[] teachers = teacherDao.findAllTeacher();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 遍历数组, 取出每一个元素, 进行判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            Teacher teacher = teachers[i];</span><br><span class="line">            <span class="keyword">if</span>(teacher != <span class="keyword">null</span> &amp;&amp; teacher.getId().equals(id))&#123;</span><br><span class="line">                exists = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Teacher[] findAllTeacher() &#123;</span><br><span class="line">        Teacher[] allTeacher = teacherDao.findAllTeacher();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allTeacher.length; i++) &#123;</span><br><span class="line">            Teacher t = allTeacher[i];</span><br><span class="line">            <span class="keyword">if</span>(t != <span class="keyword">null</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> allTeacher;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTeacherById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        teacherDao.deleteTeacherById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTeacher</span><span class="params">(String id, Teacher newTeacher)</span> </span>&#123;</span><br><span class="line">        teacherDao.updateTeacher(id,newTeacher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TeacherDao类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Teacher[] teachers = <span class="keyword">new</span> Teacher[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addTeacher</span><span class="params">(Teacher t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            Teacher teacher = teachers[i];</span><br><span class="line">            <span class="keyword">if</span>(teacher == <span class="keyword">null</span>)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            teachers[index] = t;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Teacher[] findAllTeacher() &#123;</span><br><span class="line">        <span class="keyword">return</span> teachers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTeacherById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询id在数组中的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> index = getIndex(id);</span><br><span class="line">        <span class="comment">// 2. 将该索引位置的元素, 使用null进行替换</span></span><br><span class="line">        teachers[index] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            Teacher t = teachers[i];</span><br><span class="line">            <span class="keyword">if</span>(t != <span class="keyword">null</span> &amp;&amp; t.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTeacher</span><span class="params">(String id, Teacher newTeacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = getIndex(id);</span><br><span class="line">        teachers[index] = newTeacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-static关键字"><a href="#5-static关键字" class="headerlink" title="5.static关键字"></a>5.static关键字</h2><h3 id="5-1static关键字概述-理解"><a href="#5-1static关键字概述-理解" class="headerlink" title="5.1static关键字概述 (理解)"></a>5.1static关键字概述 (理解)</h3><p>static 关键字是静态的意思,是Java中的一个修饰符,可以修饰成员方法,成员变量</p>
<h3 id="5-2static修饰的特点-记忆"><a href="#5-2static修饰的特点-记忆" class="headerlink" title="5.2static修饰的特点 (记忆)"></a>5.2static修饰的特点 (记忆)</h3><ul>
<li><p>被类的所有对象共享</p>
<p>是我们判断是否使用静态关键字的条件</p>
</li>
<li><p>随着类的加载而加载，优先于对象存在</p>
<p>对象需要类被加载后，才能创建</p>
</li>
<li><p>可以通过类名调用</p>
<p>也可以通过对象名调用</p>
</li>
</ul>
<h3 id="5-3static关键字注意事项-理解"><a href="#5-3static关键字注意事项-理解" class="headerlink" title="5.3static关键字注意事项 (理解)"></a>5.3static关键字注意事项 (理解)</h3><ul>
<li>静态方法只能访问静态的成员</li>
<li>非静态方法可以访问静态的成员，也可以访问非静态的成员</li>
<li>静态方法中是没有this关键字 </li>
</ul>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2021/09/15/day11_%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h3 id="15-继承"><a href="#15-继承" class="headerlink" title="15. 继承"></a>15. 继承</h3><h5 id="15-1-继承概述"><a href="#15-1-继承概述" class="headerlink" title="15.1  继承概述"></a>15.1  继承概述</h5><h6 id="15-1-1-继承："><a href="#15-1-1-继承：" class="headerlink" title="15.1.1 继承："></a>15.1.1 继承：</h6><p>​            让<font color= "red">类与类之间产生关系</font>（子父类关系），子类可以直接使用父类中非私有的成员</p>
<p>​            格式：通过’ extends ‘实现</p>
<ul>
<li>​    public class 子类名 extends 父类名｛｝</li>
<li>​    public class Zi extends Fu {}<ul>
<li>父类又称 基类或超类</li>
<li>子类又称 派生类</li>
</ul>
</li>
</ul>
<p>Object类是所有类的超类，无论是否显式的写出</p>
<h6 id="15-1-2-优势："><a href="#15-1-2-优势：" class="headerlink" title="15.1.2 优势："></a>15.1.2 优势：</h6><ul>
<li><p>提高代码的复用性</p>
</li>
<li><p>提高代码的维护性</p>
</li>
<li><p>让类和类之间产生的关系，是多态的前提 </p>
</li>
</ul>
<pre><code>###### 15.1.3 弊端：</code></pre><ul>
<li><p>提高了代码的耦合性</p>
</li>
<li><p>降低了代码的灵活性</p>
</li>
</ul>
<ul>
<li>当类和类，存在相同（共性）的内容，并且产生了is a（前者是后者的一种）的关系，就可以考虑使用继承，来优化代码</li>
</ul>
<h6 id="15-1-4-特点："><a href="#15-1-4-特点：" class="headerlink" title="15.1.4 特点："></a>15.1.4 特点：</h6><ul>
<li>Java只支持单继承，不支持多继承，但是只是多层继承</li>
</ul>
<h3 id="16-子类和父类"><a href="#16-子类和父类" class="headerlink" title="16. 子类和父类"></a>16. 子类和父类</h3><p>成员变量： 就近原则</p>
<ul>
<li>子类的局部范围</li>
<li>子类的成员范围</li>
<li>父类的成员范围</li>
</ul>
<p>如果子父类中，出现重名的成员变量，通过就近原则，会优先使用子类的</p>
<p>​    如果一定要会用父类的，可以使用super关键字，进行区分</p>
<p>this:代表本类对象的引用</p>
<p>super：代表父类存储空间的标识</p>
<p><img src="image/this%E3%80%81super%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt=""></p>
<h3 id="17-方法重写"><a href="#17-方法重写" class="headerlink" title="17. 方法重写"></a>17. 方法重写</h3><h5 id="17-1-方法重写概念"><a href="#17-1-方法重写概念" class="headerlink" title="17.1 方法重写概念"></a>17.1 方法重写概念</h5><p>​    在继承体系中，子类中出现了父类中一模一样的方法声明（方法名、参数列表、返回值类型）</p>
<hr>
<p>​    方法重载：在同个类中，存在方法名，参数列表不同的多个方法，和返回值无关，之间的关系叫重载</p>
<hr>
<h5 id="17-2-重写应用场景"><a href="#17-2-重写应用场景" class="headerlink" title="17.2 重写应用场景"></a>17.2 重写应用场景</h5><p>​    当子类需要父类的功能，而功能主体子类有自己的特色内容</p>
<p>可以重写父类中的方法，这样，即沿袭了父类的功能，有定义子类特有内容</p>
<h5 id="17-3-注意事项"><a href="#17-3-注意事项" class="headerlink" title="17.3 注意事项"></a>17.3 注意事项</h5><ul>
<li><p>子父类的方法声明必须一致</p>
</li>
<li><p>父类中私有方法不能被重写</p>
</li>
<li><p>父类的静态方法，父类必须通过静态方法进行重写，父类非静态，子类也要非静态</p>
<ul>
<li><p><font color = "red">注意：静态方法不能被重写，只是覆盖！如果子类中，也存在一个方法声明一模一样方法</font></p>
</li>
<li><p>@Override // 注解检查当前的成员方法是否一个正确的重写方法</p>
</li>
</ul>
</li>
<li><p>子类重写父类方法时，访问权限必须大于等于父类</p>
</li>
<li><p>权限修饰符</p>
</li>
</ul>
<p><img src="image/%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.png" alt=""></p>
<h5 id="17-4-继承中构造方法的访问特点"><a href="#17-4-继承中构造方法的访问特点" class="headerlink" title="17.4 继承中构造方法的访问特点"></a>17.4 继承中构造方法的访问特点</h5><ul>
<li>子类初始化之前，一定要先完成父类数据的初始化.</li>
<li>构造方法的第一条语句默认都是：super();<ul>
<li>必须出现在方法的第一行</li>
</ul>
</li>
<li>子类初始化之前，一定先访问道父类的构造方法</li>
<li>this() 和super()不能出现在同一个构造方法中,但凡出现一个，系统将不再提供默认的super();<ul>
<li>this() 和super()关键字可以出现在同一个构造方法中</li>
</ul>
</li>
</ul>
<h5 id="17-5-特殊情况"><a href="#17-5-特殊情况" class="headerlink" title="17.5 特殊情况"></a>17.5 特殊情况</h5><p>当父类中没有空参构造时，在子类的构造方法首行手动调动父类中的有参构造，或在子类中通过this调用本类的其他构造方法，被调用的构造方法</p>
<h5 id="17-6-抽象类"><a href="#17-6-抽象类" class="headerlink" title="17.6 抽象类"></a>17.6 抽象类</h5><p>​     抽象方法：将共性的行为（方法）抽取到父类之后，发现该方法的实现逻辑，无法在父类中给出具体明确，该方法就可以定义为抽象方法，被<font color= 'pink'>abstract</font>修饰</p>
<p>​    抽象类：如果一个类中存在抽象方法，那么该类就必须声明为抽象类</p>
<p>​    特点：</p>
<ul>
<li>抽象类不能实例化（实例化就是创建对象）</li>
<li>抽象类中可以没有抽象方法，有抽象方法的类一定是抽象类</li>
<li>抽象类可以有构造方法<ul>
<li>但是无法创建对象</li>
<li>构造方法主要用于初始化父类成员变量，以供子类使用</li>
</ul>
</li>
<li>抽象类的子类<ul>
<li>要么重写父类所有的抽象方法（推荐）</li>
<li>要么自己也是一个抽象类（工作中可能会使用到）</li>
</ul>
</li>
</ul>
<h3 id="18-模板设计模式"><a href="#18-模板设计模式" class="headerlink" title="18. 模板设计模式"></a>18. 模板设计模式</h3><h5 id="18-1-设计模式"><a href="#18-1-设计模式" class="headerlink" title="18.1 设计模式"></a>18.1 设计模式</h5><p>​        设计模式就是成熟的解决方案/思路</p>
<h5 id="18-2-final-关键字"><a href="#18-2-final-关键字" class="headerlink" title="18.2 final 关键字"></a>18.2 final 关键字</h5><p>​        final 关键字是最终的意思，可以修饰（方法、变量、类）；</p>
<p>​        </p>
<p>​        final 修饰的特点</p>
<ul>
<li>修饰方法：表示该方法是最终方法，不能被重写</li>
<li>修饰变量：表示该变量是常量，不能再次被赋值<ul>
<li>在创建的时候，直接给值</li>
<li>在构造方法结束之前，完成赋值                          </li>
</ul>
</li>
<li>修饰类：表明该类是最终类，不能被继承</li>
</ul>
<h3 id="19-代码块"><a href="#19-代码块" class="headerlink" title="19. 代码块"></a>19. 代码块</h3><h5 id="19-1-概念"><a href="#19-1-概念" class="headerlink" title="19.1 概念"></a>19.1 概念</h5><p>​        在java中被｛｝起来的的代码被称为代码块</p>
<p>​        分类：</p>
<ul>
<li>局部代码块<ul>
<li>方法中定义</li>
<li>限定变量的生命周期、作用范，及早释放，提高内存的释放率</li>
</ul>
</li>
<li>构造代码块<ul>
<li>类中方法外</li>
<li>每次执行构造方法时，先执行代码块</li>
<li>多个构造方法相同的方法，抽取到代码块中，提高代码的复用性</li>
</ul>
</li>
<li>静态代码<ul>
<li>类中方法外</li>
<li>需要通过static修饰，随着类的加载而加载，并且只执行一次</li>
<li>类加载的时候，做一些数据初始化的操作</li>
</ul>
</li>
</ul>
<p>​    19.2</p>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2021/09/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>冒泡排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">12</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">89</span>,<span class="number">34</span>,<span class="number">25</span>&#125;;</span><br><span class="line">        <span class="comment">//排序  冒泡排序  选</span></span><br><span class="line">        <span class="comment">//冒泡了几次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//每一次冒泡了几次</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                        arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                        arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrlist实例</title>
    <url>/2021/09/10/day09%20ArrayList%E9%9B%86%E5%90%88&amp;%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h2><p><strong>集合和数组的区别 :</strong> </p>
<p>​    共同点：都是存储数据的容器</p>
<p>​    不同点：数组的容量是固定的，集合的容量是可变的</p>
<h3 id="1-1-ArrayList的构造方法和添加方法"><a href="#1-1-ArrayList的构造方法和添加方法" class="headerlink" title="1.1 -ArrayList的构造方法和添加方法"></a>1.1 -ArrayList的构造方法和添加方法</h3><table>
<thead>
<tr>
<th>public ArrayList()</th>
<th>创建一个空的集合对象</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean add(E e)</td>
<td>将指定的元素追加到此集合的末尾</td>
</tr>
<tr>
<td>public void add(int index,E element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
</tbody></table>
<p><strong>ArrayList<E> ：</strong> </p>
<p>​    可调整大小的数组实现 </p>
<p>​    <E> : 是一种特殊的数据类型，泛型。</p>
<p><strong>怎么用呢 ?</strong>    </p>
<p>​    在出现E的地方我们使用引用数据类型替换即可    </p>
<p>​    举例：ArrayList<String>, ArrayList<Student></p>
<h3 id="1-2ArrayList类常用方法【应用】"><a href="#1-2ArrayList类常用方法【应用】" class="headerlink" title="1.2ArrayList类常用方法【应用】"></a>1.2ArrayList类常用方法【应用】</h3><p>*<em>成员方法 : *</em></p>
<table>
<thead>
<tr>
<th>public boolean remove(Object o)</th>
<th>删除指定的元素，返回删除是否成功</th>
</tr>
</thead>
<tbody><tr>
<td>public E remove(int index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>public E set(int index,E element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>public E get(int index)</td>
<td>返回指定索引处的元素</td>
</tr>
<tr>
<td>public int size()</td>
<td>返回集合中的元素的个数</td>
</tr>
</tbody></table>
<p><strong>示例代码 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        array.add(<span class="string">"hello"</span>);</span><br><span class="line">        array.add(<span class="string">"world"</span>);</span><br><span class="line">        array.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove("world"));</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove("javaee"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove(3));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment">//        System.out.println(array.set(1,"javaee"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//        System.out.println(array.set(3,"javaee"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E get(int index)：返回指定索引处的元素</span></span><br><span class="line"><span class="comment">//        System.out.println(array.get(0));</span></span><br><span class="line"><span class="comment">//        System.out.println(array.get(1));</span></span><br><span class="line"><span class="comment">//        System.out.println(array.get(2));</span></span><br><span class="line">        <span class="comment">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size()：返回集合中的元素的个数</span></span><br><span class="line">        System.out.println(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合</span></span><br><span class="line">        System.out.println(<span class="string">"array:"</span> + array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-ArrayList存储字符串并遍历"><a href="#1-3-ArrayList存储字符串并遍历" class="headerlink" title="1.3 ArrayList存储字符串并遍历"></a>1.3 ArrayList存储字符串并遍历</h3><p><strong>案例需求 :</strong> </p>
<p>​    创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p>
<p><strong>实现步骤 :</strong> </p>
<pre><code>1:创建集合对象
   2:往集合中添加字符串对象
   3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现
   4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现
   5:遍历集合的通用格式</code></pre><p><strong>代码实现 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:创建集合对象</span></span><br><span class="line"><span class="comment">        2:往集合中添加字符串对象</span></span><br><span class="line"><span class="comment">        3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现</span></span><br><span class="line"><span class="comment">        4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span></span><br><span class="line"><span class="comment">        5:遍历集合的通用格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加字符串对象</span></span><br><span class="line">        array.add(<span class="string">"刘正风"</span>);</span><br><span class="line">        array.add(<span class="string">"左冷禅"</span>);</span><br><span class="line">        array.add(<span class="string">"风清扬"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span></span><br><span class="line"><span class="comment">//        System.out.println(array.size());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合的通用格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            String s = array.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-ArrayList存储学生对象并遍历"><a href="#1-4-ArrayList存储学生对象并遍历" class="headerlink" title="1.4 ArrayList存储学生对象并遍历"></a>1.4 ArrayList存储学生对象并遍历</h3><p><strong>案例需求 :</strong> </p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
<p>*<em>实现步骤 : *</em> </p>
<p>​    1:定义学生类    </p>
<p>​    2:创建集合对象    </p>
<p>​    3:创建学生对象    </p>
<p>​    4:添加学生对象到集合中    </p>
<p>​    5:遍历集合，采用通用遍历格式实现</p>
<p><strong>代码实现 :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义学生类</span></span><br><span class="line"><span class="comment">        2:创建集合对象</span></span><br><span class="line"><span class="comment">        3:创建学生对象</span></span><br><span class="line"><span class="comment">        4:添加学生对象到集合中</span></span><br><span class="line"><span class="comment">        5:遍历集合，采用通用遍历格式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"风清扬"</span>, <span class="number">33</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"张曼玉"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加学生对象到集合中</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，采用通用遍历格式实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-键盘录入学生信息到集合"><a href="#1-5-键盘录入学生信息到集合" class="headerlink" title="1.5 键盘录入学生信息到集合"></a>1.5 键盘录入学生信息到集合</h3><p><strong>案例需求 :</strong> </p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
<p>​        学生的姓名和年龄来自于键盘录入</p>
<p><strong>实现步骤 :</strong></p>
<p>​    1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型    </p>
<p>​    2:创建集合对象    </p>
<p>​    3:键盘录入学生对象所需要的数据    </p>
<p>​    4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量    </p>
<p>​    5:往集合中添加学生对象    </p>
<p>​    6:遍历集合，采用通用遍历格式实现</p>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型</span></span><br><span class="line"><span class="comment">        2:创建集合对象</span></span><br><span class="line"><span class="comment">        3:键盘录入学生对象所需要的数据</span></span><br><span class="line"><span class="comment">        4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line"><span class="comment">        5:往集合中添加学生对象</span></span><br><span class="line"><span class="comment">        6:遍历集合，采用通用遍历格式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了提高代码的复用性，我们用方法来改进程序</span></span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，采用通用遍历格式实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：void</span></span><br><span class="line"><span class="comment">            参数：ArrayList&lt;Student&gt; array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入学生对象所需要的数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄:"</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加学生对象</span></span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-学生管理系统"><a href="#2-学生管理系统" class="headerlink" title="2. 学生管理系统"></a>2. 学生管理系统</h2><h3 id="2-1-学生管理系统实现步骤"><a href="#2-1-学生管理系统实现步骤" class="headerlink" title="2.1 学生管理系统实现步骤"></a>2.1 学生管理系统实现步骤</h3><ul>
<li><p><strong>案例需求</strong></p>
<p>​    针对目前我们的所学内容，完成一个综合案例：学生管理系统！该系统主要功能如下：</p>
<p>​    添加学生：通过键盘录入学生信息，添加到集合中</p>
<p>​    删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</p>
<p>​    修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</p>
<p>​    查看学生：将集合中的学生对象信息进行展示</p>
<p>​    退出系统：结束程序</p>
</li>
<li><p><strong>实现步骤</strong></p>
<ol>
<li><p>定义学生类，包含以下成员变量</p>
<p>学生类：    Student成员变量：    </p>
<p>​    学号：sid    </p>
<p>​    姓名：name    </p>
<p>​    年龄：age    </p>
<p>​    生日：birthday</p>
<p>​    构造方法：    </p>
<p>​        无参构造    </p>
<p>​        带四个参数的构造成员方法：    </p>
<p>​    每个成员变量对应给出get/set方法</p>
</li>
<li><p>学生管理系统主界面的搭建步骤</p>
<p>2.1 用输出语句完成主界面的编写</p>
<p>2.2 用Scanner实现键盘录入数据</p>
<p>2.3 用switch语句完成操作的选择</p>
<p>2.4 用循环完成再次回到主界面</p>
</li>
<li><p>学生管理系统的添加学生功能实现步骤</p>
<p>3.1 用键盘录入选择添加学生</p>
<p>3.2 定义一个方法，用于添加学生</p>
<p>​    显示提示信息，提示要输入何种信息</p>
<p>​    键盘录入学生对象所需要的数据</p>
<p>​    创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</p>
<p>​    将学生对象添加到集合中（保存）</p>
<p>​    给出添加成功提示</p>
<p>3.3 调用方法</p>
</li>
<li><p>学生管理系统的查看学生功能实现步骤</p>
<p>4.1 用键盘录入选择查看所有学生信息</p>
<p>4.2 定义一个方法，用于查看学生信息</p>
<p>​    显示表头信息</p>
<p>​    将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁”</p>
<p>4.3 调用方法</p>
</li>
<li><p>学生管理系统的删除学生功能实现步骤</p>
<p>5.1 用键盘录入选择删除学生信息</p>
<p>5.2 定义一个方法，用于删除学生信息</p>
<p>​    显示提示信息</p>
<p>​    键盘录入要删除的学生学号</p>
<p>​    调用getIndex方法，查找该学号在集合的索引</p>
<p>​    如果索引为-1，提示信息不存在</p>
<p>​    如果索引不是-1，调用remove方法删除并提示删除成功</p>
<p>5.3 调用方法</p>
</li>
<li><p>学生管理系统的修改学生功能实现步骤</p>
<p>6.1 用键盘录入选择修改学生信息</p>
<p>6.2 定义一个方法，用于修改学生信息</p>
<p>​    显示提示信息</p>
<p>​    键盘录入要修改的学生学号</p>
<p>​    调用getIndex方法，查找该学号在集合的索引</p>
<p>​    如果索引为-1，提示信息不存在</p>
<p>​    如果索引不是-1，键盘录入要修改的学生信息</p>
<p>​    集合修改对应的学生信息</p>
<p>​    给出修改成功提示</p>
<p>6.3 调用方法</p>
</li>
<li><p>退出系统</p>
<p>使用System.exit(0);退出JVM</p>
</li>
</ol>
</li>
</ul>
<h3 id="2-2-学生类的定义"><a href="#2-2-学生类的定义" class="headerlink" title="2.2 学生类的定义"></a>2.2 学生类的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sid; <span class="comment">// 学号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String birthday; <span class="comment">// 生日</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sid, String name, <span class="keyword">int</span> age, String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(String sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-测试类的定义"><a href="#2-3-测试类的定义" class="headerlink" title="2.3 测试类的定义"></a>2.3 测试类的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建集合容器对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        lo:</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 搭建主界面菜单</span></span><br><span class="line">            System.out.println(<span class="string">"--------欢迎来到学生管理系统--------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"1 添加学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2 删除学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3 修改学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4 查看学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5 退出"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入您的选择:"</span>);</span><br><span class="line"></span><br><span class="line">            String choice = sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    <span class="comment">//System.out.println("添加学生");</span></span><br><span class="line">                    addStudent(list);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    <span class="comment">//System.out.println("删除学生");</span></span><br><span class="line">                    deleteStudent(list);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    <span class="comment">//System.out.println("修改学生");</span></span><br><span class="line">                    updateStudent(list);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                    <span class="comment">// System.out.println("查看学生");</span></span><br><span class="line">                    queryStudents(list);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"感谢您的使用"</span>);</span><br><span class="line">                    <span class="keyword">break</span> lo;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"您的输入有误"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改学生的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入您要修改的学生学号:"</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String updateSid = sc.next();</span><br><span class="line">        <span class="comment">// 3. 调用getIndex方法, 查找该学号在集合中出现的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> index = getIndex(list,updateSid);</span><br><span class="line">        <span class="comment">// 4. 根据索引判断, 学号在集合中是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 不存在: 给出提示</span></span><br><span class="line">            System.out.println(<span class="string">"查无信息, 请重新输入"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 存在: 接收新的学生信息</span></span><br><span class="line">            System.out.println(<span class="string">"请输入新的学生姓名:"</span>);</span><br><span class="line">            String name = sc.next();</span><br><span class="line">            System.out.println(<span class="string">"请输入新的学生年龄:"</span>);</span><br><span class="line">            <span class="keyword">int</span> age = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"请输入新的学生生日:"</span>);</span><br><span class="line">            String birthday = sc.next();</span><br><span class="line">            <span class="comment">// 封装为新的学生对象</span></span><br><span class="line">            Student stu = <span class="keyword">new</span> Student(updateSid, name, age, birthday);</span><br><span class="line">            <span class="comment">// 调用集合的set方法, 完成修改</span></span><br><span class="line">            list.set(index, stu);</span><br><span class="line">            System.out.println(<span class="string">"修改成功!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除学生的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 给出提示信息 (请输入您要删除的学号)</span></span><br><span class="line">        System.out.println(<span class="string">"请输入您要删除的学生学号:"</span>);</span><br><span class="line">        <span class="comment">// 2. 键盘接收要删除的学号</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String deleteSid = sc.next();</span><br><span class="line">        <span class="comment">// 3. 调用getIndex方法, 查找该学号在集合中出现的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> index = getIndex(list,deleteSid);</span><br><span class="line">        <span class="comment">// 4. 根据索引判断, 学号在集合中是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 不存在: 给出提示</span></span><br><span class="line">            System.out.println(<span class="string">"查无信息, 请重新输入"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 存在:删除</span></span><br><span class="line">            list.remove(index);</span><br><span class="line">            System.out.println(<span class="string">"删除成功!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看学生的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryStudents</span><span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 判断集合中是否存在数据, 如果不存在直接给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"无信息, 请添加后重新查询"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 存在: 展示表头数据</span></span><br><span class="line">        System.out.println(<span class="string">"学号\t\t姓名\t年龄\t生日"</span>);</span><br><span class="line">        <span class="comment">// 3. 遍历集合, 获取每一个学生对象的信息, 打印在控制台</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            Student stu = list.get(i);</span><br><span class="line">            System.out.println(stu.getSid() + <span class="string">"\t"</span> + stu.getName() + <span class="string">"\t"</span> + stu.getAge() + <span class="string">"\t\t"</span> + stu.getBirthday());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加学生的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 1. 给出录入的提示信息</span></span><br><span class="line"></span><br><span class="line">        String sid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学号:"</span>);</span><br><span class="line">            sid = sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = getIndex(list, sid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// sid不存在, 学号可以使用</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入姓名:"</span>);</span><br><span class="line">        String name = sc.next();</span><br><span class="line">        System.out.println(<span class="string">"请输入年龄:"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入生日:"</span>);</span><br><span class="line">        String birthday = sc.next();</span><br><span class="line">        <span class="comment">// 2. 将键盘录入的信息封装为学生对象</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(sid,name,age,birthday);</span><br><span class="line">        <span class="comment">// 3. 将封装好的学生对象, 添加到集合容器当中</span></span><br><span class="line">        list.add(stu);</span><br><span class="line">        <span class="comment">// 4. 给出添加成功的提示信息</span></span><br><span class="line">        System.out.println(<span class="string">"添加成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        getIndex : 接收一个集合对象, 接收一个学生学号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        查找这个学号, 在集合中出现的索引位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(ArrayList&lt;Student&gt; list, String sid)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1. 假设传入的学号, 在集合中不存在</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 2. 遍历集合, 获取每一个学生对象, 准备进行查找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            Student stu = list.get(i);</span><br><span class="line">            <span class="comment">// 3. 获取每一个学生对象的学号</span></span><br><span class="line">            String id = stu.getSid();</span><br><span class="line">            <span class="comment">// 4. 使用获取出的学生学号, 和传入的学号(查找的学号)进行比对</span></span><br><span class="line">            <span class="keyword">if</span>(id.equals(sid))&#123;</span><br><span class="line">                <span class="comment">// 存在: 让index变量记录正确的索引位置</span></span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2021/10/13/Day22_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="42-网络编程-物联网"><a href="#42-网络编程-物联网" class="headerlink" title="42.网络编程(物联网)"></a>42.网络编程(物联网)</h3><h4 id="42-1-网络编程概述"><a href="#42-1-网络编程概述" class="headerlink" title="42.1 网络编程概述"></a>42.1 网络编程概述</h4><h5 id="42-1-1-基本概念"><a href="#42-1-1-基本概念" class="headerlink" title="42.1.1 基本概念"></a>42.1.1 基本概念</h5><blockquote>
<p>网络编程三要素：</p>
<ul>
<li><p>IP地址</p>
</li>
<li><p>端口</p>
<ul>
<li><p>端口号的取值范围：0~65535，普通的应用程序需要使用1024以上的端口号</p>
</li>
<li><p>==一个端口只能被一个应用程序使用==</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>协议</li>
</ul>
</blockquote>
<h4 id="42-2-IntAddress的使用"><a href="#42-2-IntAddress的使用" class="headerlink" title="42.2 IntAddress的使用"></a>42.2 IntAddress的使用</h4><blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">       <span class="comment">//设置地址</span></span><br><span class="line">       InetAddress byName = InetAddress.getByName(<span class="string">"192.168.31.58"</span>);</span><br><span class="line">       <span class="comment">//获取地址的名字</span></span><br><span class="line">       String hostName = byName.getHostName();</span><br><span class="line">       System.out.println(hostName);</span><br><span class="line">       <span class="comment">//获得地址的ip地址</span></span><br><span class="line">       String hostAddress = byName.getHostAddress();</span><br><span class="line">       System.out.println(hostAddress);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="42-3-UDP通信程序"><a href="#42-3-UDP通信程序" class="headerlink" title="42.3 UDP通信程序"></a>42.3 UDP通信程序</h4><blockquote>
<p>发送端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//DUP发送</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="comment">//确认发送端口</span></span><br><span class="line">       DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="comment">//打包礼物</span></span><br><span class="line">           String s = <span class="string">"🤘🎈"</span>;</span><br><span class="line">           String num = sc.next();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">byte</span>[] bytes = num.getBytes();</span><br><span class="line">           <span class="comment">//确认发送ip</span></span><br><span class="line">           InetAddress address = InetAddress.getByName(<span class="string">"192.168.31.108"</span>);</span><br><span class="line">           <span class="keyword">int</span> port = <span class="number">10000</span>;</span><br><span class="line">           <span class="comment">//封装成数据包</span></span><br><span class="line">           DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bytes, bytes.length, address, port);</span><br><span class="line">           <span class="comment">//发送信息</span></span><br><span class="line">           ds.send(dp);</span><br><span class="line">           System.err.println(<span class="string">"已发送"</span>);</span><br><span class="line">           <span class="keyword">if</span>(num.equals(<span class="string">"886"</span>))&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"结束聊天"</span>);</span><br><span class="line">       <span class="comment">//释放资源</span></span><br><span class="line">&gt;<span class="comment">//        ds.close();</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>接收端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//DUP接收</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Accept</span> </span>&#123;</span><br><span class="line">       <span class="comment">//注意点</span></span><br><span class="line">   <span class="comment">//1.需要先运行发送端再运行发送端</span></span><br><span class="line">   <span class="comment">//2.如果接收端启动之后，没有收到信息，就会死等(阻塞)</span></span><br><span class="line">   <span class="comment">//3.接收的时候需要调用getLength</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//确认发送端口</span></span><br><span class="line">       DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">           <span class="comment">//构建数据包，接收数据</span></span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8042</span>];</span><br><span class="line">           DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bytes,bytes.length);</span><br><span class="line">           <span class="comment">//接收信息</span></span><br><span class="line">           ds.receive(dp);</span><br><span class="line">           <span class="comment">//解析数据包</span></span><br><span class="line">           <span class="keyword">byte</span>[] data = dp.getData();</span><br><span class="line">           <span class="keyword">int</span> length = dp.getLength();</span><br><span class="line">           InetAddress address = dp.getAddress();</span><br><span class="line">           System.out.println(<span class="string">"用户名："</span>+address.getHostName());</span><br><span class="line">           System.out.println(<span class="keyword">new</span> String(data,<span class="number">0</span>,length));</span><br><span class="line">&gt;<span class="comment">//            System.out.println(address.getHostAddress() );</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//关闭</span></span><br><span class="line">&gt;<span class="comment">//        ds.close();</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>



<p>UDP的三种通讯方式</p>
<ul>
<li>单播<ul>
<li>1-1</li>
<li>创建DatagramSocket</li>
<li>打包DatagramPacket</li>
<li>发送send</li>
</ul>
</li>
<li>组播<ul>
<li>1- 组(多)</li>
</ul>
</li>
<li>广播<ul>
<li>1-多</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="42-4-TCP通信程序"><a href="#42-4-TCP通信程序" class="headerlink" title="42.4 TCP通信程序"></a>42.4 TCP通信程序</h4><blockquote>
<p>发送：</p>
<p>Socket</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">send</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个Socket对象</span></span><br><span class="line">       Socket socket = <span class="keyword">new</span> Socket(<span class="string">"192.168.31.87"</span>, <span class="number">10010</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取IO流</span></span><br><span class="line">       OutputStream os = socket.getOutputStream(); <span class="comment">//网络流</span></span><br><span class="line">       os.write(<span class="string">"hello"</span>.getBytes());</span><br><span class="line">       <span class="comment">//关闭流</span></span><br><span class="line">       os.close();</span><br><span class="line">       socket.close();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>接收：</p>
<p>SeverSocket</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">receive</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//接收</span></span><br><span class="line">       ServerSocket accept = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line">       InputStream is = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="comment">//调用等待</span></span><br><span class="line">           Socket ss =accept.accept();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取输入流</span></span><br><span class="line">           is = ss.getInputStream();</span><br><span class="line">           <span class="keyword">int</span> b;</span><br><span class="line">           <span class="keyword">while</span> ((b = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">               System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&gt;<span class="comment">//        //关闭</span></span><br><span class="line">&gt;<span class="comment">//        is.close();</span></span><br><span class="line">&gt;<span class="comment">//        accept.close();</span></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol>
<li>accpet方法是阻塞，作用就是等待客户端连接</li>
<li>客户端创建对象并连接服务器，通过 三次握手协议保证连接</li>
<li>对于客服端，往外写，所以是输出；对于服务器是，往里输，所以是输入</li>
<li>read也是阻塞</li>
<li>通过四次挥手协议，确认连接终止</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>递归排序</title>
    <url>/2021/09/09/%E9%80%92%E5%BD%92%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="递归排序"><a href="#递归排序" class="headerlink" title="递归排序"></a>递归排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">12</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">89</span>,<span class="number">34</span>,<span class="number">25</span>&#125;;</span><br><span class="line">        <span class="comment">//哪些索引需要往后比</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//每一次从哪开始比的位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]&lt;arr[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j]=arr[i];</span><br><span class="line">                    arr[i]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端学习</tag>
      </tags>
  </entry>
</search>
